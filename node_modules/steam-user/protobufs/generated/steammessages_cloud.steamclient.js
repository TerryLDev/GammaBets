/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/
(function(global, factory) { /* global define, require, module */

    /* AMD */ if (typeof define === 'function' && define.amd)
        define(["protobufjs/minimal"], factory);

    /* CommonJS */ else if (typeof require === 'function' && typeof module === 'object' && module && module.exports)
        module.exports = factory(require("protobufjs/minimal"));

})(this, function($protobuf) {
    "use strict";

    // Common aliases
    var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;
    
    // Exported root namespace
    var $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});
    
    $root.CCloud_GetUploadServerInfo_Request = (function() {
    
        /**
         * Properties of a CCloud_GetUploadServerInfo_Request.
         * @exports ICCloud_GetUploadServerInfo_Request
         * @interface ICCloud_GetUploadServerInfo_Request
         * @property {number|null} [appid] CCloud_GetUploadServerInfo_Request appid
         */
    
        /**
         * Constructs a new CCloud_GetUploadServerInfo_Request.
         * @exports CCloud_GetUploadServerInfo_Request
         * @classdesc Represents a CCloud_GetUploadServerInfo_Request.
         * @implements ICCloud_GetUploadServerInfo_Request
         * @constructor
         * @param {ICCloud_GetUploadServerInfo_Request=} [properties] Properties to set
         */
        function CCloud_GetUploadServerInfo_Request(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CCloud_GetUploadServerInfo_Request appid.
         * @member {number} appid
         * @memberof CCloud_GetUploadServerInfo_Request
         * @instance
         */
        CCloud_GetUploadServerInfo_Request.prototype.appid = 0;
    
        /**
         * Creates a new CCloud_GetUploadServerInfo_Request instance using the specified properties.
         * @function create
         * @memberof CCloud_GetUploadServerInfo_Request
         * @static
         * @param {ICCloud_GetUploadServerInfo_Request=} [properties] Properties to set
         * @returns {CCloud_GetUploadServerInfo_Request} CCloud_GetUploadServerInfo_Request instance
         */
        CCloud_GetUploadServerInfo_Request.create = function create(properties) {
            return new CCloud_GetUploadServerInfo_Request(properties);
        };
    
        /**
         * Encodes the specified CCloud_GetUploadServerInfo_Request message. Does not implicitly {@link CCloud_GetUploadServerInfo_Request.verify|verify} messages.
         * @function encode
         * @memberof CCloud_GetUploadServerInfo_Request
         * @static
         * @param {ICCloud_GetUploadServerInfo_Request} message CCloud_GetUploadServerInfo_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_GetUploadServerInfo_Request.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.appid != null && message.hasOwnProperty("appid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.appid);
            return writer;
        };
    
        /**
         * Encodes the specified CCloud_GetUploadServerInfo_Request message, length delimited. Does not implicitly {@link CCloud_GetUploadServerInfo_Request.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CCloud_GetUploadServerInfo_Request
         * @static
         * @param {ICCloud_GetUploadServerInfo_Request} message CCloud_GetUploadServerInfo_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_GetUploadServerInfo_Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CCloud_GetUploadServerInfo_Request message from the specified reader or buffer.
         * @function decode
         * @memberof CCloud_GetUploadServerInfo_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CCloud_GetUploadServerInfo_Request} CCloud_GetUploadServerInfo_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_GetUploadServerInfo_Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CCloud_GetUploadServerInfo_Request();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.appid = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CCloud_GetUploadServerInfo_Request message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CCloud_GetUploadServerInfo_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CCloud_GetUploadServerInfo_Request} CCloud_GetUploadServerInfo_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_GetUploadServerInfo_Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CCloud_GetUploadServerInfo_Request message.
         * @function verify
         * @memberof CCloud_GetUploadServerInfo_Request
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CCloud_GetUploadServerInfo_Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.appid != null && message.hasOwnProperty("appid"))
                if (!$util.isInteger(message.appid))
                    return "appid: integer expected";
            return null;
        };
    
        /**
         * Creates a CCloud_GetUploadServerInfo_Request message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CCloud_GetUploadServerInfo_Request
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CCloud_GetUploadServerInfo_Request} CCloud_GetUploadServerInfo_Request
         */
        CCloud_GetUploadServerInfo_Request.fromObject = function fromObject(object) {
            if (object instanceof $root.CCloud_GetUploadServerInfo_Request)
                return object;
            var message = new $root.CCloud_GetUploadServerInfo_Request();
            if (object.appid != null)
                message.appid = object.appid >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CCloud_GetUploadServerInfo_Request message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CCloud_GetUploadServerInfo_Request
         * @static
         * @param {CCloud_GetUploadServerInfo_Request} message CCloud_GetUploadServerInfo_Request
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CCloud_GetUploadServerInfo_Request.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.appid = 0;
            if (message.appid != null && message.hasOwnProperty("appid"))
                object.appid = message.appid;
            return object;
        };
    
        /**
         * Converts this CCloud_GetUploadServerInfo_Request to JSON.
         * @function toJSON
         * @memberof CCloud_GetUploadServerInfo_Request
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CCloud_GetUploadServerInfo_Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CCloud_GetUploadServerInfo_Request;
    })();
    
    $root.CCloud_GetUploadServerInfo_Response = (function() {
    
        /**
         * Properties of a CCloud_GetUploadServerInfo_Response.
         * @exports ICCloud_GetUploadServerInfo_Response
         * @interface ICCloud_GetUploadServerInfo_Response
         * @property {string|null} [server_url] CCloud_GetUploadServerInfo_Response server_url
         */
    
        /**
         * Constructs a new CCloud_GetUploadServerInfo_Response.
         * @exports CCloud_GetUploadServerInfo_Response
         * @classdesc Represents a CCloud_GetUploadServerInfo_Response.
         * @implements ICCloud_GetUploadServerInfo_Response
         * @constructor
         * @param {ICCloud_GetUploadServerInfo_Response=} [properties] Properties to set
         */
        function CCloud_GetUploadServerInfo_Response(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CCloud_GetUploadServerInfo_Response server_url.
         * @member {string} server_url
         * @memberof CCloud_GetUploadServerInfo_Response
         * @instance
         */
        CCloud_GetUploadServerInfo_Response.prototype.server_url = "";
    
        /**
         * Creates a new CCloud_GetUploadServerInfo_Response instance using the specified properties.
         * @function create
         * @memberof CCloud_GetUploadServerInfo_Response
         * @static
         * @param {ICCloud_GetUploadServerInfo_Response=} [properties] Properties to set
         * @returns {CCloud_GetUploadServerInfo_Response} CCloud_GetUploadServerInfo_Response instance
         */
        CCloud_GetUploadServerInfo_Response.create = function create(properties) {
            return new CCloud_GetUploadServerInfo_Response(properties);
        };
    
        /**
         * Encodes the specified CCloud_GetUploadServerInfo_Response message. Does not implicitly {@link CCloud_GetUploadServerInfo_Response.verify|verify} messages.
         * @function encode
         * @memberof CCloud_GetUploadServerInfo_Response
         * @static
         * @param {ICCloud_GetUploadServerInfo_Response} message CCloud_GetUploadServerInfo_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_GetUploadServerInfo_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.server_url != null && message.hasOwnProperty("server_url"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.server_url);
            return writer;
        };
    
        /**
         * Encodes the specified CCloud_GetUploadServerInfo_Response message, length delimited. Does not implicitly {@link CCloud_GetUploadServerInfo_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CCloud_GetUploadServerInfo_Response
         * @static
         * @param {ICCloud_GetUploadServerInfo_Response} message CCloud_GetUploadServerInfo_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_GetUploadServerInfo_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CCloud_GetUploadServerInfo_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CCloud_GetUploadServerInfo_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CCloud_GetUploadServerInfo_Response} CCloud_GetUploadServerInfo_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_GetUploadServerInfo_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CCloud_GetUploadServerInfo_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.server_url = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CCloud_GetUploadServerInfo_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CCloud_GetUploadServerInfo_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CCloud_GetUploadServerInfo_Response} CCloud_GetUploadServerInfo_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_GetUploadServerInfo_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CCloud_GetUploadServerInfo_Response message.
         * @function verify
         * @memberof CCloud_GetUploadServerInfo_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CCloud_GetUploadServerInfo_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.server_url != null && message.hasOwnProperty("server_url"))
                if (!$util.isString(message.server_url))
                    return "server_url: string expected";
            return null;
        };
    
        /**
         * Creates a CCloud_GetUploadServerInfo_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CCloud_GetUploadServerInfo_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CCloud_GetUploadServerInfo_Response} CCloud_GetUploadServerInfo_Response
         */
        CCloud_GetUploadServerInfo_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CCloud_GetUploadServerInfo_Response)
                return object;
            var message = new $root.CCloud_GetUploadServerInfo_Response();
            if (object.server_url != null)
                message.server_url = String(object.server_url);
            return message;
        };
    
        /**
         * Creates a plain object from a CCloud_GetUploadServerInfo_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CCloud_GetUploadServerInfo_Response
         * @static
         * @param {CCloud_GetUploadServerInfo_Response} message CCloud_GetUploadServerInfo_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CCloud_GetUploadServerInfo_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.server_url = "";
            if (message.server_url != null && message.hasOwnProperty("server_url"))
                object.server_url = message.server_url;
            return object;
        };
    
        /**
         * Converts this CCloud_GetUploadServerInfo_Response to JSON.
         * @function toJSON
         * @memberof CCloud_GetUploadServerInfo_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CCloud_GetUploadServerInfo_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CCloud_GetUploadServerInfo_Response;
    })();
    
    $root.CCloud_BeginHTTPUpload_Request = (function() {
    
        /**
         * Properties of a CCloud_BeginHTTPUpload_Request.
         * @exports ICCloud_BeginHTTPUpload_Request
         * @interface ICCloud_BeginHTTPUpload_Request
         * @property {number|null} [appid] CCloud_BeginHTTPUpload_Request appid
         * @property {number|null} [file_size] CCloud_BeginHTTPUpload_Request file_size
         * @property {string|null} [filename] CCloud_BeginHTTPUpload_Request filename
         * @property {string|null} [file_sha] CCloud_BeginHTTPUpload_Request file_sha
         * @property {boolean|null} [is_public] CCloud_BeginHTTPUpload_Request is_public
         * @property {Array.<string>|null} [platforms_to_sync] CCloud_BeginHTTPUpload_Request platforms_to_sync
         * @property {Array.<string>|null} [request_headers_names] CCloud_BeginHTTPUpload_Request request_headers_names
         * @property {Array.<string>|null} [request_headers_values] CCloud_BeginHTTPUpload_Request request_headers_values
         * @property {number|Long|null} [upload_batch_id] CCloud_BeginHTTPUpload_Request upload_batch_id
         */
    
        /**
         * Constructs a new CCloud_BeginHTTPUpload_Request.
         * @exports CCloud_BeginHTTPUpload_Request
         * @classdesc Represents a CCloud_BeginHTTPUpload_Request.
         * @implements ICCloud_BeginHTTPUpload_Request
         * @constructor
         * @param {ICCloud_BeginHTTPUpload_Request=} [properties] Properties to set
         */
        function CCloud_BeginHTTPUpload_Request(properties) {
            this.platforms_to_sync = [];
            this.request_headers_names = [];
            this.request_headers_values = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CCloud_BeginHTTPUpload_Request appid.
         * @member {number} appid
         * @memberof CCloud_BeginHTTPUpload_Request
         * @instance
         */
        CCloud_BeginHTTPUpload_Request.prototype.appid = 0;
    
        /**
         * CCloud_BeginHTTPUpload_Request file_size.
         * @member {number} file_size
         * @memberof CCloud_BeginHTTPUpload_Request
         * @instance
         */
        CCloud_BeginHTTPUpload_Request.prototype.file_size = 0;
    
        /**
         * CCloud_BeginHTTPUpload_Request filename.
         * @member {string} filename
         * @memberof CCloud_BeginHTTPUpload_Request
         * @instance
         */
        CCloud_BeginHTTPUpload_Request.prototype.filename = "";
    
        /**
         * CCloud_BeginHTTPUpload_Request file_sha.
         * @member {string} file_sha
         * @memberof CCloud_BeginHTTPUpload_Request
         * @instance
         */
        CCloud_BeginHTTPUpload_Request.prototype.file_sha = "";
    
        /**
         * CCloud_BeginHTTPUpload_Request is_public.
         * @member {boolean} is_public
         * @memberof CCloud_BeginHTTPUpload_Request
         * @instance
         */
        CCloud_BeginHTTPUpload_Request.prototype.is_public = false;
    
        /**
         * CCloud_BeginHTTPUpload_Request platforms_to_sync.
         * @member {Array.<string>} platforms_to_sync
         * @memberof CCloud_BeginHTTPUpload_Request
         * @instance
         */
        CCloud_BeginHTTPUpload_Request.prototype.platforms_to_sync = $util.emptyArray;
    
        /**
         * CCloud_BeginHTTPUpload_Request request_headers_names.
         * @member {Array.<string>} request_headers_names
         * @memberof CCloud_BeginHTTPUpload_Request
         * @instance
         */
        CCloud_BeginHTTPUpload_Request.prototype.request_headers_names = $util.emptyArray;
    
        /**
         * CCloud_BeginHTTPUpload_Request request_headers_values.
         * @member {Array.<string>} request_headers_values
         * @memberof CCloud_BeginHTTPUpload_Request
         * @instance
         */
        CCloud_BeginHTTPUpload_Request.prototype.request_headers_values = $util.emptyArray;
    
        /**
         * CCloud_BeginHTTPUpload_Request upload_batch_id.
         * @member {number|Long} upload_batch_id
         * @memberof CCloud_BeginHTTPUpload_Request
         * @instance
         */
        CCloud_BeginHTTPUpload_Request.prototype.upload_batch_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * Creates a new CCloud_BeginHTTPUpload_Request instance using the specified properties.
         * @function create
         * @memberof CCloud_BeginHTTPUpload_Request
         * @static
         * @param {ICCloud_BeginHTTPUpload_Request=} [properties] Properties to set
         * @returns {CCloud_BeginHTTPUpload_Request} CCloud_BeginHTTPUpload_Request instance
         */
        CCloud_BeginHTTPUpload_Request.create = function create(properties) {
            return new CCloud_BeginHTTPUpload_Request(properties);
        };
    
        /**
         * Encodes the specified CCloud_BeginHTTPUpload_Request message. Does not implicitly {@link CCloud_BeginHTTPUpload_Request.verify|verify} messages.
         * @function encode
         * @memberof CCloud_BeginHTTPUpload_Request
         * @static
         * @param {ICCloud_BeginHTTPUpload_Request} message CCloud_BeginHTTPUpload_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_BeginHTTPUpload_Request.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.appid != null && message.hasOwnProperty("appid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.appid);
            if (message.file_size != null && message.hasOwnProperty("file_size"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.file_size);
            if (message.filename != null && message.hasOwnProperty("filename"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.filename);
            if (message.file_sha != null && message.hasOwnProperty("file_sha"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.file_sha);
            if (message.is_public != null && message.hasOwnProperty("is_public"))
                writer.uint32(/* id 5, wireType 0 =*/40).bool(message.is_public);
            if (message.platforms_to_sync != null && message.platforms_to_sync.length)
                for (var i = 0; i < message.platforms_to_sync.length; ++i)
                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.platforms_to_sync[i]);
            if (message.request_headers_names != null && message.request_headers_names.length)
                for (var i = 0; i < message.request_headers_names.length; ++i)
                    writer.uint32(/* id 7, wireType 2 =*/58).string(message.request_headers_names[i]);
            if (message.request_headers_values != null && message.request_headers_values.length)
                for (var i = 0; i < message.request_headers_values.length; ++i)
                    writer.uint32(/* id 8, wireType 2 =*/66).string(message.request_headers_values[i]);
            if (message.upload_batch_id != null && message.hasOwnProperty("upload_batch_id"))
                writer.uint32(/* id 9, wireType 0 =*/72).uint64(message.upload_batch_id);
            return writer;
        };
    
        /**
         * Encodes the specified CCloud_BeginHTTPUpload_Request message, length delimited. Does not implicitly {@link CCloud_BeginHTTPUpload_Request.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CCloud_BeginHTTPUpload_Request
         * @static
         * @param {ICCloud_BeginHTTPUpload_Request} message CCloud_BeginHTTPUpload_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_BeginHTTPUpload_Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CCloud_BeginHTTPUpload_Request message from the specified reader or buffer.
         * @function decode
         * @memberof CCloud_BeginHTTPUpload_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CCloud_BeginHTTPUpload_Request} CCloud_BeginHTTPUpload_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_BeginHTTPUpload_Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CCloud_BeginHTTPUpload_Request();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.appid = reader.uint32();
                    break;
                case 2:
                    message.file_size = reader.uint32();
                    break;
                case 3:
                    message.filename = reader.string();
                    break;
                case 4:
                    message.file_sha = reader.string();
                    break;
                case 5:
                    message.is_public = reader.bool();
                    break;
                case 6:
                    if (!(message.platforms_to_sync && message.platforms_to_sync.length))
                        message.platforms_to_sync = [];
                    message.platforms_to_sync.push(reader.string());
                    break;
                case 7:
                    if (!(message.request_headers_names && message.request_headers_names.length))
                        message.request_headers_names = [];
                    message.request_headers_names.push(reader.string());
                    break;
                case 8:
                    if (!(message.request_headers_values && message.request_headers_values.length))
                        message.request_headers_values = [];
                    message.request_headers_values.push(reader.string());
                    break;
                case 9:
                    message.upload_batch_id = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CCloud_BeginHTTPUpload_Request message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CCloud_BeginHTTPUpload_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CCloud_BeginHTTPUpload_Request} CCloud_BeginHTTPUpload_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_BeginHTTPUpload_Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CCloud_BeginHTTPUpload_Request message.
         * @function verify
         * @memberof CCloud_BeginHTTPUpload_Request
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CCloud_BeginHTTPUpload_Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.appid != null && message.hasOwnProperty("appid"))
                if (!$util.isInteger(message.appid))
                    return "appid: integer expected";
            if (message.file_size != null && message.hasOwnProperty("file_size"))
                if (!$util.isInteger(message.file_size))
                    return "file_size: integer expected";
            if (message.filename != null && message.hasOwnProperty("filename"))
                if (!$util.isString(message.filename))
                    return "filename: string expected";
            if (message.file_sha != null && message.hasOwnProperty("file_sha"))
                if (!$util.isString(message.file_sha))
                    return "file_sha: string expected";
            if (message.is_public != null && message.hasOwnProperty("is_public"))
                if (typeof message.is_public !== "boolean")
                    return "is_public: boolean expected";
            if (message.platforms_to_sync != null && message.hasOwnProperty("platforms_to_sync")) {
                if (!Array.isArray(message.platforms_to_sync))
                    return "platforms_to_sync: array expected";
                for (var i = 0; i < message.platforms_to_sync.length; ++i)
                    if (!$util.isString(message.platforms_to_sync[i]))
                        return "platforms_to_sync: string[] expected";
            }
            if (message.request_headers_names != null && message.hasOwnProperty("request_headers_names")) {
                if (!Array.isArray(message.request_headers_names))
                    return "request_headers_names: array expected";
                for (var i = 0; i < message.request_headers_names.length; ++i)
                    if (!$util.isString(message.request_headers_names[i]))
                        return "request_headers_names: string[] expected";
            }
            if (message.request_headers_values != null && message.hasOwnProperty("request_headers_values")) {
                if (!Array.isArray(message.request_headers_values))
                    return "request_headers_values: array expected";
                for (var i = 0; i < message.request_headers_values.length; ++i)
                    if (!$util.isString(message.request_headers_values[i]))
                        return "request_headers_values: string[] expected";
            }
            if (message.upload_batch_id != null && message.hasOwnProperty("upload_batch_id"))
                if (!$util.isInteger(message.upload_batch_id) && !(message.upload_batch_id && $util.isInteger(message.upload_batch_id.low) && $util.isInteger(message.upload_batch_id.high)))
                    return "upload_batch_id: integer|Long expected";
            return null;
        };
    
        /**
         * Creates a CCloud_BeginHTTPUpload_Request message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CCloud_BeginHTTPUpload_Request
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CCloud_BeginHTTPUpload_Request} CCloud_BeginHTTPUpload_Request
         */
        CCloud_BeginHTTPUpload_Request.fromObject = function fromObject(object) {
            if (object instanceof $root.CCloud_BeginHTTPUpload_Request)
                return object;
            var message = new $root.CCloud_BeginHTTPUpload_Request();
            if (object.appid != null)
                message.appid = object.appid >>> 0;
            if (object.file_size != null)
                message.file_size = object.file_size >>> 0;
            if (object.filename != null)
                message.filename = String(object.filename);
            if (object.file_sha != null)
                message.file_sha = String(object.file_sha);
            if (object.is_public != null)
                message.is_public = Boolean(object.is_public);
            if (object.platforms_to_sync) {
                if (!Array.isArray(object.platforms_to_sync))
                    throw TypeError(".CCloud_BeginHTTPUpload_Request.platforms_to_sync: array expected");
                message.platforms_to_sync = [];
                for (var i = 0; i < object.platforms_to_sync.length; ++i)
                    message.platforms_to_sync[i] = String(object.platforms_to_sync[i]);
            }
            if (object.request_headers_names) {
                if (!Array.isArray(object.request_headers_names))
                    throw TypeError(".CCloud_BeginHTTPUpload_Request.request_headers_names: array expected");
                message.request_headers_names = [];
                for (var i = 0; i < object.request_headers_names.length; ++i)
                    message.request_headers_names[i] = String(object.request_headers_names[i]);
            }
            if (object.request_headers_values) {
                if (!Array.isArray(object.request_headers_values))
                    throw TypeError(".CCloud_BeginHTTPUpload_Request.request_headers_values: array expected");
                message.request_headers_values = [];
                for (var i = 0; i < object.request_headers_values.length; ++i)
                    message.request_headers_values[i] = String(object.request_headers_values[i]);
            }
            if (object.upload_batch_id != null)
                if ($util.Long)
                    (message.upload_batch_id = $util.Long.fromValue(object.upload_batch_id)).unsigned = true;
                else if (typeof object.upload_batch_id === "string")
                    message.upload_batch_id = parseInt(object.upload_batch_id, 10);
                else if (typeof object.upload_batch_id === "number")
                    message.upload_batch_id = object.upload_batch_id;
                else if (typeof object.upload_batch_id === "object")
                    message.upload_batch_id = new $util.LongBits(object.upload_batch_id.low >>> 0, object.upload_batch_id.high >>> 0).toNumber(true);
            return message;
        };
    
        /**
         * Creates a plain object from a CCloud_BeginHTTPUpload_Request message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CCloud_BeginHTTPUpload_Request
         * @static
         * @param {CCloud_BeginHTTPUpload_Request} message CCloud_BeginHTTPUpload_Request
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CCloud_BeginHTTPUpload_Request.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.platforms_to_sync = [];
                object.request_headers_names = [];
                object.request_headers_values = [];
            }
            if (options.defaults) {
                object.appid = 0;
                object.file_size = 0;
                object.filename = "";
                object.file_sha = "";
                object.is_public = false;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.upload_batch_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.upload_batch_id = options.longs === String ? "0" : 0;
            }
            if (message.appid != null && message.hasOwnProperty("appid"))
                object.appid = message.appid;
            if (message.file_size != null && message.hasOwnProperty("file_size"))
                object.file_size = message.file_size;
            if (message.filename != null && message.hasOwnProperty("filename"))
                object.filename = message.filename;
            if (message.file_sha != null && message.hasOwnProperty("file_sha"))
                object.file_sha = message.file_sha;
            if (message.is_public != null && message.hasOwnProperty("is_public"))
                object.is_public = message.is_public;
            if (message.platforms_to_sync && message.platforms_to_sync.length) {
                object.platforms_to_sync = [];
                for (var j = 0; j < message.platforms_to_sync.length; ++j)
                    object.platforms_to_sync[j] = message.platforms_to_sync[j];
            }
            if (message.request_headers_names && message.request_headers_names.length) {
                object.request_headers_names = [];
                for (var j = 0; j < message.request_headers_names.length; ++j)
                    object.request_headers_names[j] = message.request_headers_names[j];
            }
            if (message.request_headers_values && message.request_headers_values.length) {
                object.request_headers_values = [];
                for (var j = 0; j < message.request_headers_values.length; ++j)
                    object.request_headers_values[j] = message.request_headers_values[j];
            }
            if (message.upload_batch_id != null && message.hasOwnProperty("upload_batch_id"))
                if (typeof message.upload_batch_id === "number")
                    object.upload_batch_id = options.longs === String ? String(message.upload_batch_id) : message.upload_batch_id;
                else
                    object.upload_batch_id = options.longs === String ? $util.Long.prototype.toString.call(message.upload_batch_id) : options.longs === Number ? new $util.LongBits(message.upload_batch_id.low >>> 0, message.upload_batch_id.high >>> 0).toNumber(true) : message.upload_batch_id;
            return object;
        };
    
        /**
         * Converts this CCloud_BeginHTTPUpload_Request to JSON.
         * @function toJSON
         * @memberof CCloud_BeginHTTPUpload_Request
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CCloud_BeginHTTPUpload_Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CCloud_BeginHTTPUpload_Request;
    })();
    
    $root.CCloud_BeginHTTPUpload_Response = (function() {
    
        /**
         * Properties of a CCloud_BeginHTTPUpload_Response.
         * @exports ICCloud_BeginHTTPUpload_Response
         * @interface ICCloud_BeginHTTPUpload_Response
         * @property {number|Long|null} [ugcid] CCloud_BeginHTTPUpload_Response ugcid
         * @property {number|null} [timestamp] CCloud_BeginHTTPUpload_Response timestamp
         * @property {string|null} [url_host] CCloud_BeginHTTPUpload_Response url_host
         * @property {string|null} [url_path] CCloud_BeginHTTPUpload_Response url_path
         * @property {boolean|null} [use_https] CCloud_BeginHTTPUpload_Response use_https
         * @property {Array.<CCloud_BeginHTTPUpload_Response.IHTTPHeaders>|null} [request_headers] CCloud_BeginHTTPUpload_Response request_headers
         */
    
        /**
         * Constructs a new CCloud_BeginHTTPUpload_Response.
         * @exports CCloud_BeginHTTPUpload_Response
         * @classdesc Represents a CCloud_BeginHTTPUpload_Response.
         * @implements ICCloud_BeginHTTPUpload_Response
         * @constructor
         * @param {ICCloud_BeginHTTPUpload_Response=} [properties] Properties to set
         */
        function CCloud_BeginHTTPUpload_Response(properties) {
            this.request_headers = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CCloud_BeginHTTPUpload_Response ugcid.
         * @member {number|Long} ugcid
         * @memberof CCloud_BeginHTTPUpload_Response
         * @instance
         */
        CCloud_BeginHTTPUpload_Response.prototype.ugcid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CCloud_BeginHTTPUpload_Response timestamp.
         * @member {number} timestamp
         * @memberof CCloud_BeginHTTPUpload_Response
         * @instance
         */
        CCloud_BeginHTTPUpload_Response.prototype.timestamp = 0;
    
        /**
         * CCloud_BeginHTTPUpload_Response url_host.
         * @member {string} url_host
         * @memberof CCloud_BeginHTTPUpload_Response
         * @instance
         */
        CCloud_BeginHTTPUpload_Response.prototype.url_host = "";
    
        /**
         * CCloud_BeginHTTPUpload_Response url_path.
         * @member {string} url_path
         * @memberof CCloud_BeginHTTPUpload_Response
         * @instance
         */
        CCloud_BeginHTTPUpload_Response.prototype.url_path = "";
    
        /**
         * CCloud_BeginHTTPUpload_Response use_https.
         * @member {boolean} use_https
         * @memberof CCloud_BeginHTTPUpload_Response
         * @instance
         */
        CCloud_BeginHTTPUpload_Response.prototype.use_https = false;
    
        /**
         * CCloud_BeginHTTPUpload_Response request_headers.
         * @member {Array.<CCloud_BeginHTTPUpload_Response.IHTTPHeaders>} request_headers
         * @memberof CCloud_BeginHTTPUpload_Response
         * @instance
         */
        CCloud_BeginHTTPUpload_Response.prototype.request_headers = $util.emptyArray;
    
        /**
         * Creates a new CCloud_BeginHTTPUpload_Response instance using the specified properties.
         * @function create
         * @memberof CCloud_BeginHTTPUpload_Response
         * @static
         * @param {ICCloud_BeginHTTPUpload_Response=} [properties] Properties to set
         * @returns {CCloud_BeginHTTPUpload_Response} CCloud_BeginHTTPUpload_Response instance
         */
        CCloud_BeginHTTPUpload_Response.create = function create(properties) {
            return new CCloud_BeginHTTPUpload_Response(properties);
        };
    
        /**
         * Encodes the specified CCloud_BeginHTTPUpload_Response message. Does not implicitly {@link CCloud_BeginHTTPUpload_Response.verify|verify} messages.
         * @function encode
         * @memberof CCloud_BeginHTTPUpload_Response
         * @static
         * @param {ICCloud_BeginHTTPUpload_Response} message CCloud_BeginHTTPUpload_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_BeginHTTPUpload_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.ugcid != null && message.hasOwnProperty("ugcid"))
                writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.ugcid);
            if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                writer.uint32(/* id 2, wireType 5 =*/21).fixed32(message.timestamp);
            if (message.url_host != null && message.hasOwnProperty("url_host"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.url_host);
            if (message.url_path != null && message.hasOwnProperty("url_path"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.url_path);
            if (message.use_https != null && message.hasOwnProperty("use_https"))
                writer.uint32(/* id 5, wireType 0 =*/40).bool(message.use_https);
            if (message.request_headers != null && message.request_headers.length)
                for (var i = 0; i < message.request_headers.length; ++i)
                    $root.CCloud_BeginHTTPUpload_Response.HTTPHeaders.encode(message.request_headers[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CCloud_BeginHTTPUpload_Response message, length delimited. Does not implicitly {@link CCloud_BeginHTTPUpload_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CCloud_BeginHTTPUpload_Response
         * @static
         * @param {ICCloud_BeginHTTPUpload_Response} message CCloud_BeginHTTPUpload_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_BeginHTTPUpload_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CCloud_BeginHTTPUpload_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CCloud_BeginHTTPUpload_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CCloud_BeginHTTPUpload_Response} CCloud_BeginHTTPUpload_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_BeginHTTPUpload_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CCloud_BeginHTTPUpload_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.ugcid = reader.fixed64();
                    break;
                case 2:
                    message.timestamp = reader.fixed32();
                    break;
                case 3:
                    message.url_host = reader.string();
                    break;
                case 4:
                    message.url_path = reader.string();
                    break;
                case 5:
                    message.use_https = reader.bool();
                    break;
                case 6:
                    if (!(message.request_headers && message.request_headers.length))
                        message.request_headers = [];
                    message.request_headers.push($root.CCloud_BeginHTTPUpload_Response.HTTPHeaders.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CCloud_BeginHTTPUpload_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CCloud_BeginHTTPUpload_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CCloud_BeginHTTPUpload_Response} CCloud_BeginHTTPUpload_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_BeginHTTPUpload_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CCloud_BeginHTTPUpload_Response message.
         * @function verify
         * @memberof CCloud_BeginHTTPUpload_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CCloud_BeginHTTPUpload_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.ugcid != null && message.hasOwnProperty("ugcid"))
                if (!$util.isInteger(message.ugcid) && !(message.ugcid && $util.isInteger(message.ugcid.low) && $util.isInteger(message.ugcid.high)))
                    return "ugcid: integer|Long expected";
            if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                if (!$util.isInteger(message.timestamp))
                    return "timestamp: integer expected";
            if (message.url_host != null && message.hasOwnProperty("url_host"))
                if (!$util.isString(message.url_host))
                    return "url_host: string expected";
            if (message.url_path != null && message.hasOwnProperty("url_path"))
                if (!$util.isString(message.url_path))
                    return "url_path: string expected";
            if (message.use_https != null && message.hasOwnProperty("use_https"))
                if (typeof message.use_https !== "boolean")
                    return "use_https: boolean expected";
            if (message.request_headers != null && message.hasOwnProperty("request_headers")) {
                if (!Array.isArray(message.request_headers))
                    return "request_headers: array expected";
                for (var i = 0; i < message.request_headers.length; ++i) {
                    var error = $root.CCloud_BeginHTTPUpload_Response.HTTPHeaders.verify(message.request_headers[i]);
                    if (error)
                        return "request_headers." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CCloud_BeginHTTPUpload_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CCloud_BeginHTTPUpload_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CCloud_BeginHTTPUpload_Response} CCloud_BeginHTTPUpload_Response
         */
        CCloud_BeginHTTPUpload_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CCloud_BeginHTTPUpload_Response)
                return object;
            var message = new $root.CCloud_BeginHTTPUpload_Response();
            if (object.ugcid != null)
                if ($util.Long)
                    (message.ugcid = $util.Long.fromValue(object.ugcid)).unsigned = false;
                else if (typeof object.ugcid === "string")
                    message.ugcid = parseInt(object.ugcid, 10);
                else if (typeof object.ugcid === "number")
                    message.ugcid = object.ugcid;
                else if (typeof object.ugcid === "object")
                    message.ugcid = new $util.LongBits(object.ugcid.low >>> 0, object.ugcid.high >>> 0).toNumber();
            if (object.timestamp != null)
                message.timestamp = object.timestamp >>> 0;
            if (object.url_host != null)
                message.url_host = String(object.url_host);
            if (object.url_path != null)
                message.url_path = String(object.url_path);
            if (object.use_https != null)
                message.use_https = Boolean(object.use_https);
            if (object.request_headers) {
                if (!Array.isArray(object.request_headers))
                    throw TypeError(".CCloud_BeginHTTPUpload_Response.request_headers: array expected");
                message.request_headers = [];
                for (var i = 0; i < object.request_headers.length; ++i) {
                    if (typeof object.request_headers[i] !== "object")
                        throw TypeError(".CCloud_BeginHTTPUpload_Response.request_headers: object expected");
                    message.request_headers[i] = $root.CCloud_BeginHTTPUpload_Response.HTTPHeaders.fromObject(object.request_headers[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CCloud_BeginHTTPUpload_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CCloud_BeginHTTPUpload_Response
         * @static
         * @param {CCloud_BeginHTTPUpload_Response} message CCloud_BeginHTTPUpload_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CCloud_BeginHTTPUpload_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.request_headers = [];
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.ugcid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.ugcid = options.longs === String ? "0" : 0;
                object.timestamp = 0;
                object.url_host = "";
                object.url_path = "";
                object.use_https = false;
            }
            if (message.ugcid != null && message.hasOwnProperty("ugcid"))
                if (typeof message.ugcid === "number")
                    object.ugcid = options.longs === String ? String(message.ugcid) : message.ugcid;
                else
                    object.ugcid = options.longs === String ? $util.Long.prototype.toString.call(message.ugcid) : options.longs === Number ? new $util.LongBits(message.ugcid.low >>> 0, message.ugcid.high >>> 0).toNumber() : message.ugcid;
            if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                object.timestamp = message.timestamp;
            if (message.url_host != null && message.hasOwnProperty("url_host"))
                object.url_host = message.url_host;
            if (message.url_path != null && message.hasOwnProperty("url_path"))
                object.url_path = message.url_path;
            if (message.use_https != null && message.hasOwnProperty("use_https"))
                object.use_https = message.use_https;
            if (message.request_headers && message.request_headers.length) {
                object.request_headers = [];
                for (var j = 0; j < message.request_headers.length; ++j)
                    object.request_headers[j] = $root.CCloud_BeginHTTPUpload_Response.HTTPHeaders.toObject(message.request_headers[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CCloud_BeginHTTPUpload_Response to JSON.
         * @function toJSON
         * @memberof CCloud_BeginHTTPUpload_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CCloud_BeginHTTPUpload_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        CCloud_BeginHTTPUpload_Response.HTTPHeaders = (function() {
    
            /**
             * Properties of a HTTPHeaders.
             * @memberof CCloud_BeginHTTPUpload_Response
             * @interface IHTTPHeaders
             * @property {string|null} [name] HTTPHeaders name
             * @property {string|null} [value] HTTPHeaders value
             */
    
            /**
             * Constructs a new HTTPHeaders.
             * @memberof CCloud_BeginHTTPUpload_Response
             * @classdesc Represents a HTTPHeaders.
             * @implements IHTTPHeaders
             * @constructor
             * @param {CCloud_BeginHTTPUpload_Response.IHTTPHeaders=} [properties] Properties to set
             */
            function HTTPHeaders(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * HTTPHeaders name.
             * @member {string} name
             * @memberof CCloud_BeginHTTPUpload_Response.HTTPHeaders
             * @instance
             */
            HTTPHeaders.prototype.name = "";
    
            /**
             * HTTPHeaders value.
             * @member {string} value
             * @memberof CCloud_BeginHTTPUpload_Response.HTTPHeaders
             * @instance
             */
            HTTPHeaders.prototype.value = "";
    
            /**
             * Creates a new HTTPHeaders instance using the specified properties.
             * @function create
             * @memberof CCloud_BeginHTTPUpload_Response.HTTPHeaders
             * @static
             * @param {CCloud_BeginHTTPUpload_Response.IHTTPHeaders=} [properties] Properties to set
             * @returns {CCloud_BeginHTTPUpload_Response.HTTPHeaders} HTTPHeaders instance
             */
            HTTPHeaders.create = function create(properties) {
                return new HTTPHeaders(properties);
            };
    
            /**
             * Encodes the specified HTTPHeaders message. Does not implicitly {@link CCloud_BeginHTTPUpload_Response.HTTPHeaders.verify|verify} messages.
             * @function encode
             * @memberof CCloud_BeginHTTPUpload_Response.HTTPHeaders
             * @static
             * @param {CCloud_BeginHTTPUpload_Response.IHTTPHeaders} message HTTPHeaders message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            HTTPHeaders.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && message.hasOwnProperty("name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.value != null && message.hasOwnProperty("value"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);
                return writer;
            };
    
            /**
             * Encodes the specified HTTPHeaders message, length delimited. Does not implicitly {@link CCloud_BeginHTTPUpload_Response.HTTPHeaders.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CCloud_BeginHTTPUpload_Response.HTTPHeaders
             * @static
             * @param {CCloud_BeginHTTPUpload_Response.IHTTPHeaders} message HTTPHeaders message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            HTTPHeaders.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a HTTPHeaders message from the specified reader or buffer.
             * @function decode
             * @memberof CCloud_BeginHTTPUpload_Response.HTTPHeaders
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CCloud_BeginHTTPUpload_Response.HTTPHeaders} HTTPHeaders
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            HTTPHeaders.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CCloud_BeginHTTPUpload_Response.HTTPHeaders();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        message.value = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a HTTPHeaders message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CCloud_BeginHTTPUpload_Response.HTTPHeaders
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CCloud_BeginHTTPUpload_Response.HTTPHeaders} HTTPHeaders
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            HTTPHeaders.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a HTTPHeaders message.
             * @function verify
             * @memberof CCloud_BeginHTTPUpload_Response.HTTPHeaders
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            HTTPHeaders.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.value != null && message.hasOwnProperty("value"))
                    if (!$util.isString(message.value))
                        return "value: string expected";
                return null;
            };
    
            /**
             * Creates a HTTPHeaders message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CCloud_BeginHTTPUpload_Response.HTTPHeaders
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CCloud_BeginHTTPUpload_Response.HTTPHeaders} HTTPHeaders
             */
            HTTPHeaders.fromObject = function fromObject(object) {
                if (object instanceof $root.CCloud_BeginHTTPUpload_Response.HTTPHeaders)
                    return object;
                var message = new $root.CCloud_BeginHTTPUpload_Response.HTTPHeaders();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.value != null)
                    message.value = String(object.value);
                return message;
            };
    
            /**
             * Creates a plain object from a HTTPHeaders message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CCloud_BeginHTTPUpload_Response.HTTPHeaders
             * @static
             * @param {CCloud_BeginHTTPUpload_Response.HTTPHeaders} message HTTPHeaders
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            HTTPHeaders.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.name = "";
                    object.value = "";
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.value != null && message.hasOwnProperty("value"))
                    object.value = message.value;
                return object;
            };
    
            /**
             * Converts this HTTPHeaders to JSON.
             * @function toJSON
             * @memberof CCloud_BeginHTTPUpload_Response.HTTPHeaders
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            HTTPHeaders.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return HTTPHeaders;
        })();
    
        return CCloud_BeginHTTPUpload_Response;
    })();
    
    $root.CCloud_CommitHTTPUpload_Request = (function() {
    
        /**
         * Properties of a CCloud_CommitHTTPUpload_Request.
         * @exports ICCloud_CommitHTTPUpload_Request
         * @interface ICCloud_CommitHTTPUpload_Request
         * @property {boolean|null} [transfer_succeeded] CCloud_CommitHTTPUpload_Request transfer_succeeded
         * @property {number|null} [appid] CCloud_CommitHTTPUpload_Request appid
         * @property {string|null} [file_sha] CCloud_CommitHTTPUpload_Request file_sha
         * @property {string|null} [filename] CCloud_CommitHTTPUpload_Request filename
         */
    
        /**
         * Constructs a new CCloud_CommitHTTPUpload_Request.
         * @exports CCloud_CommitHTTPUpload_Request
         * @classdesc Represents a CCloud_CommitHTTPUpload_Request.
         * @implements ICCloud_CommitHTTPUpload_Request
         * @constructor
         * @param {ICCloud_CommitHTTPUpload_Request=} [properties] Properties to set
         */
        function CCloud_CommitHTTPUpload_Request(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CCloud_CommitHTTPUpload_Request transfer_succeeded.
         * @member {boolean} transfer_succeeded
         * @memberof CCloud_CommitHTTPUpload_Request
         * @instance
         */
        CCloud_CommitHTTPUpload_Request.prototype.transfer_succeeded = false;
    
        /**
         * CCloud_CommitHTTPUpload_Request appid.
         * @member {number} appid
         * @memberof CCloud_CommitHTTPUpload_Request
         * @instance
         */
        CCloud_CommitHTTPUpload_Request.prototype.appid = 0;
    
        /**
         * CCloud_CommitHTTPUpload_Request file_sha.
         * @member {string} file_sha
         * @memberof CCloud_CommitHTTPUpload_Request
         * @instance
         */
        CCloud_CommitHTTPUpload_Request.prototype.file_sha = "";
    
        /**
         * CCloud_CommitHTTPUpload_Request filename.
         * @member {string} filename
         * @memberof CCloud_CommitHTTPUpload_Request
         * @instance
         */
        CCloud_CommitHTTPUpload_Request.prototype.filename = "";
    
        /**
         * Creates a new CCloud_CommitHTTPUpload_Request instance using the specified properties.
         * @function create
         * @memberof CCloud_CommitHTTPUpload_Request
         * @static
         * @param {ICCloud_CommitHTTPUpload_Request=} [properties] Properties to set
         * @returns {CCloud_CommitHTTPUpload_Request} CCloud_CommitHTTPUpload_Request instance
         */
        CCloud_CommitHTTPUpload_Request.create = function create(properties) {
            return new CCloud_CommitHTTPUpload_Request(properties);
        };
    
        /**
         * Encodes the specified CCloud_CommitHTTPUpload_Request message. Does not implicitly {@link CCloud_CommitHTTPUpload_Request.verify|verify} messages.
         * @function encode
         * @memberof CCloud_CommitHTTPUpload_Request
         * @static
         * @param {ICCloud_CommitHTTPUpload_Request} message CCloud_CommitHTTPUpload_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_CommitHTTPUpload_Request.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.transfer_succeeded != null && message.hasOwnProperty("transfer_succeeded"))
                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.transfer_succeeded);
            if (message.appid != null && message.hasOwnProperty("appid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.appid);
            if (message.file_sha != null && message.hasOwnProperty("file_sha"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.file_sha);
            if (message.filename != null && message.hasOwnProperty("filename"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.filename);
            return writer;
        };
    
        /**
         * Encodes the specified CCloud_CommitHTTPUpload_Request message, length delimited. Does not implicitly {@link CCloud_CommitHTTPUpload_Request.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CCloud_CommitHTTPUpload_Request
         * @static
         * @param {ICCloud_CommitHTTPUpload_Request} message CCloud_CommitHTTPUpload_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_CommitHTTPUpload_Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CCloud_CommitHTTPUpload_Request message from the specified reader or buffer.
         * @function decode
         * @memberof CCloud_CommitHTTPUpload_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CCloud_CommitHTTPUpload_Request} CCloud_CommitHTTPUpload_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_CommitHTTPUpload_Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CCloud_CommitHTTPUpload_Request();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.transfer_succeeded = reader.bool();
                    break;
                case 2:
                    message.appid = reader.uint32();
                    break;
                case 3:
                    message.file_sha = reader.string();
                    break;
                case 4:
                    message.filename = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CCloud_CommitHTTPUpload_Request message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CCloud_CommitHTTPUpload_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CCloud_CommitHTTPUpload_Request} CCloud_CommitHTTPUpload_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_CommitHTTPUpload_Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CCloud_CommitHTTPUpload_Request message.
         * @function verify
         * @memberof CCloud_CommitHTTPUpload_Request
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CCloud_CommitHTTPUpload_Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.transfer_succeeded != null && message.hasOwnProperty("transfer_succeeded"))
                if (typeof message.transfer_succeeded !== "boolean")
                    return "transfer_succeeded: boolean expected";
            if (message.appid != null && message.hasOwnProperty("appid"))
                if (!$util.isInteger(message.appid))
                    return "appid: integer expected";
            if (message.file_sha != null && message.hasOwnProperty("file_sha"))
                if (!$util.isString(message.file_sha))
                    return "file_sha: string expected";
            if (message.filename != null && message.hasOwnProperty("filename"))
                if (!$util.isString(message.filename))
                    return "filename: string expected";
            return null;
        };
    
        /**
         * Creates a CCloud_CommitHTTPUpload_Request message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CCloud_CommitHTTPUpload_Request
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CCloud_CommitHTTPUpload_Request} CCloud_CommitHTTPUpload_Request
         */
        CCloud_CommitHTTPUpload_Request.fromObject = function fromObject(object) {
            if (object instanceof $root.CCloud_CommitHTTPUpload_Request)
                return object;
            var message = new $root.CCloud_CommitHTTPUpload_Request();
            if (object.transfer_succeeded != null)
                message.transfer_succeeded = Boolean(object.transfer_succeeded);
            if (object.appid != null)
                message.appid = object.appid >>> 0;
            if (object.file_sha != null)
                message.file_sha = String(object.file_sha);
            if (object.filename != null)
                message.filename = String(object.filename);
            return message;
        };
    
        /**
         * Creates a plain object from a CCloud_CommitHTTPUpload_Request message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CCloud_CommitHTTPUpload_Request
         * @static
         * @param {CCloud_CommitHTTPUpload_Request} message CCloud_CommitHTTPUpload_Request
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CCloud_CommitHTTPUpload_Request.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.transfer_succeeded = false;
                object.appid = 0;
                object.file_sha = "";
                object.filename = "";
            }
            if (message.transfer_succeeded != null && message.hasOwnProperty("transfer_succeeded"))
                object.transfer_succeeded = message.transfer_succeeded;
            if (message.appid != null && message.hasOwnProperty("appid"))
                object.appid = message.appid;
            if (message.file_sha != null && message.hasOwnProperty("file_sha"))
                object.file_sha = message.file_sha;
            if (message.filename != null && message.hasOwnProperty("filename"))
                object.filename = message.filename;
            return object;
        };
    
        /**
         * Converts this CCloud_CommitHTTPUpload_Request to JSON.
         * @function toJSON
         * @memberof CCloud_CommitHTTPUpload_Request
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CCloud_CommitHTTPUpload_Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CCloud_CommitHTTPUpload_Request;
    })();
    
    $root.CCloud_CommitHTTPUpload_Response = (function() {
    
        /**
         * Properties of a CCloud_CommitHTTPUpload_Response.
         * @exports ICCloud_CommitHTTPUpload_Response
         * @interface ICCloud_CommitHTTPUpload_Response
         * @property {boolean|null} [file_committed] CCloud_CommitHTTPUpload_Response file_committed
         */
    
        /**
         * Constructs a new CCloud_CommitHTTPUpload_Response.
         * @exports CCloud_CommitHTTPUpload_Response
         * @classdesc Represents a CCloud_CommitHTTPUpload_Response.
         * @implements ICCloud_CommitHTTPUpload_Response
         * @constructor
         * @param {ICCloud_CommitHTTPUpload_Response=} [properties] Properties to set
         */
        function CCloud_CommitHTTPUpload_Response(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CCloud_CommitHTTPUpload_Response file_committed.
         * @member {boolean} file_committed
         * @memberof CCloud_CommitHTTPUpload_Response
         * @instance
         */
        CCloud_CommitHTTPUpload_Response.prototype.file_committed = false;
    
        /**
         * Creates a new CCloud_CommitHTTPUpload_Response instance using the specified properties.
         * @function create
         * @memberof CCloud_CommitHTTPUpload_Response
         * @static
         * @param {ICCloud_CommitHTTPUpload_Response=} [properties] Properties to set
         * @returns {CCloud_CommitHTTPUpload_Response} CCloud_CommitHTTPUpload_Response instance
         */
        CCloud_CommitHTTPUpload_Response.create = function create(properties) {
            return new CCloud_CommitHTTPUpload_Response(properties);
        };
    
        /**
         * Encodes the specified CCloud_CommitHTTPUpload_Response message. Does not implicitly {@link CCloud_CommitHTTPUpload_Response.verify|verify} messages.
         * @function encode
         * @memberof CCloud_CommitHTTPUpload_Response
         * @static
         * @param {ICCloud_CommitHTTPUpload_Response} message CCloud_CommitHTTPUpload_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_CommitHTTPUpload_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.file_committed != null && message.hasOwnProperty("file_committed"))
                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.file_committed);
            return writer;
        };
    
        /**
         * Encodes the specified CCloud_CommitHTTPUpload_Response message, length delimited. Does not implicitly {@link CCloud_CommitHTTPUpload_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CCloud_CommitHTTPUpload_Response
         * @static
         * @param {ICCloud_CommitHTTPUpload_Response} message CCloud_CommitHTTPUpload_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_CommitHTTPUpload_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CCloud_CommitHTTPUpload_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CCloud_CommitHTTPUpload_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CCloud_CommitHTTPUpload_Response} CCloud_CommitHTTPUpload_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_CommitHTTPUpload_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CCloud_CommitHTTPUpload_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.file_committed = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CCloud_CommitHTTPUpload_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CCloud_CommitHTTPUpload_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CCloud_CommitHTTPUpload_Response} CCloud_CommitHTTPUpload_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_CommitHTTPUpload_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CCloud_CommitHTTPUpload_Response message.
         * @function verify
         * @memberof CCloud_CommitHTTPUpload_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CCloud_CommitHTTPUpload_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.file_committed != null && message.hasOwnProperty("file_committed"))
                if (typeof message.file_committed !== "boolean")
                    return "file_committed: boolean expected";
            return null;
        };
    
        /**
         * Creates a CCloud_CommitHTTPUpload_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CCloud_CommitHTTPUpload_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CCloud_CommitHTTPUpload_Response} CCloud_CommitHTTPUpload_Response
         */
        CCloud_CommitHTTPUpload_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CCloud_CommitHTTPUpload_Response)
                return object;
            var message = new $root.CCloud_CommitHTTPUpload_Response();
            if (object.file_committed != null)
                message.file_committed = Boolean(object.file_committed);
            return message;
        };
    
        /**
         * Creates a plain object from a CCloud_CommitHTTPUpload_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CCloud_CommitHTTPUpload_Response
         * @static
         * @param {CCloud_CommitHTTPUpload_Response} message CCloud_CommitHTTPUpload_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CCloud_CommitHTTPUpload_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.file_committed = false;
            if (message.file_committed != null && message.hasOwnProperty("file_committed"))
                object.file_committed = message.file_committed;
            return object;
        };
    
        /**
         * Converts this CCloud_CommitHTTPUpload_Response to JSON.
         * @function toJSON
         * @memberof CCloud_CommitHTTPUpload_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CCloud_CommitHTTPUpload_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CCloud_CommitHTTPUpload_Response;
    })();
    
    $root.CCloud_BeginUGCUpload_Request = (function() {
    
        /**
         * Properties of a CCloud_BeginUGCUpload_Request.
         * @exports ICCloud_BeginUGCUpload_Request
         * @interface ICCloud_BeginUGCUpload_Request
         * @property {number|null} [appid] CCloud_BeginUGCUpload_Request appid
         * @property {number|null} [file_size] CCloud_BeginUGCUpload_Request file_size
         * @property {string|null} [filename] CCloud_BeginUGCUpload_Request filename
         * @property {string|null} [file_sha] CCloud_BeginUGCUpload_Request file_sha
         * @property {string|null} [content_type] CCloud_BeginUGCUpload_Request content_type
         */
    
        /**
         * Constructs a new CCloud_BeginUGCUpload_Request.
         * @exports CCloud_BeginUGCUpload_Request
         * @classdesc Represents a CCloud_BeginUGCUpload_Request.
         * @implements ICCloud_BeginUGCUpload_Request
         * @constructor
         * @param {ICCloud_BeginUGCUpload_Request=} [properties] Properties to set
         */
        function CCloud_BeginUGCUpload_Request(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CCloud_BeginUGCUpload_Request appid.
         * @member {number} appid
         * @memberof CCloud_BeginUGCUpload_Request
         * @instance
         */
        CCloud_BeginUGCUpload_Request.prototype.appid = 0;
    
        /**
         * CCloud_BeginUGCUpload_Request file_size.
         * @member {number} file_size
         * @memberof CCloud_BeginUGCUpload_Request
         * @instance
         */
        CCloud_BeginUGCUpload_Request.prototype.file_size = 0;
    
        /**
         * CCloud_BeginUGCUpload_Request filename.
         * @member {string} filename
         * @memberof CCloud_BeginUGCUpload_Request
         * @instance
         */
        CCloud_BeginUGCUpload_Request.prototype.filename = "";
    
        /**
         * CCloud_BeginUGCUpload_Request file_sha.
         * @member {string} file_sha
         * @memberof CCloud_BeginUGCUpload_Request
         * @instance
         */
        CCloud_BeginUGCUpload_Request.prototype.file_sha = "";
    
        /**
         * CCloud_BeginUGCUpload_Request content_type.
         * @member {string} content_type
         * @memberof CCloud_BeginUGCUpload_Request
         * @instance
         */
        CCloud_BeginUGCUpload_Request.prototype.content_type = "";
    
        /**
         * Creates a new CCloud_BeginUGCUpload_Request instance using the specified properties.
         * @function create
         * @memberof CCloud_BeginUGCUpload_Request
         * @static
         * @param {ICCloud_BeginUGCUpload_Request=} [properties] Properties to set
         * @returns {CCloud_BeginUGCUpload_Request} CCloud_BeginUGCUpload_Request instance
         */
        CCloud_BeginUGCUpload_Request.create = function create(properties) {
            return new CCloud_BeginUGCUpload_Request(properties);
        };
    
        /**
         * Encodes the specified CCloud_BeginUGCUpload_Request message. Does not implicitly {@link CCloud_BeginUGCUpload_Request.verify|verify} messages.
         * @function encode
         * @memberof CCloud_BeginUGCUpload_Request
         * @static
         * @param {ICCloud_BeginUGCUpload_Request} message CCloud_BeginUGCUpload_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_BeginUGCUpload_Request.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.appid != null && message.hasOwnProperty("appid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.appid);
            if (message.file_size != null && message.hasOwnProperty("file_size"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.file_size);
            if (message.filename != null && message.hasOwnProperty("filename"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.filename);
            if (message.file_sha != null && message.hasOwnProperty("file_sha"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.file_sha);
            if (message.content_type != null && message.hasOwnProperty("content_type"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.content_type);
            return writer;
        };
    
        /**
         * Encodes the specified CCloud_BeginUGCUpload_Request message, length delimited. Does not implicitly {@link CCloud_BeginUGCUpload_Request.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CCloud_BeginUGCUpload_Request
         * @static
         * @param {ICCloud_BeginUGCUpload_Request} message CCloud_BeginUGCUpload_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_BeginUGCUpload_Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CCloud_BeginUGCUpload_Request message from the specified reader or buffer.
         * @function decode
         * @memberof CCloud_BeginUGCUpload_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CCloud_BeginUGCUpload_Request} CCloud_BeginUGCUpload_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_BeginUGCUpload_Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CCloud_BeginUGCUpload_Request();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.appid = reader.uint32();
                    break;
                case 2:
                    message.file_size = reader.uint32();
                    break;
                case 3:
                    message.filename = reader.string();
                    break;
                case 4:
                    message.file_sha = reader.string();
                    break;
                case 5:
                    message.content_type = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CCloud_BeginUGCUpload_Request message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CCloud_BeginUGCUpload_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CCloud_BeginUGCUpload_Request} CCloud_BeginUGCUpload_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_BeginUGCUpload_Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CCloud_BeginUGCUpload_Request message.
         * @function verify
         * @memberof CCloud_BeginUGCUpload_Request
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CCloud_BeginUGCUpload_Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.appid != null && message.hasOwnProperty("appid"))
                if (!$util.isInteger(message.appid))
                    return "appid: integer expected";
            if (message.file_size != null && message.hasOwnProperty("file_size"))
                if (!$util.isInteger(message.file_size))
                    return "file_size: integer expected";
            if (message.filename != null && message.hasOwnProperty("filename"))
                if (!$util.isString(message.filename))
                    return "filename: string expected";
            if (message.file_sha != null && message.hasOwnProperty("file_sha"))
                if (!$util.isString(message.file_sha))
                    return "file_sha: string expected";
            if (message.content_type != null && message.hasOwnProperty("content_type"))
                if (!$util.isString(message.content_type))
                    return "content_type: string expected";
            return null;
        };
    
        /**
         * Creates a CCloud_BeginUGCUpload_Request message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CCloud_BeginUGCUpload_Request
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CCloud_BeginUGCUpload_Request} CCloud_BeginUGCUpload_Request
         */
        CCloud_BeginUGCUpload_Request.fromObject = function fromObject(object) {
            if (object instanceof $root.CCloud_BeginUGCUpload_Request)
                return object;
            var message = new $root.CCloud_BeginUGCUpload_Request();
            if (object.appid != null)
                message.appid = object.appid >>> 0;
            if (object.file_size != null)
                message.file_size = object.file_size >>> 0;
            if (object.filename != null)
                message.filename = String(object.filename);
            if (object.file_sha != null)
                message.file_sha = String(object.file_sha);
            if (object.content_type != null)
                message.content_type = String(object.content_type);
            return message;
        };
    
        /**
         * Creates a plain object from a CCloud_BeginUGCUpload_Request message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CCloud_BeginUGCUpload_Request
         * @static
         * @param {CCloud_BeginUGCUpload_Request} message CCloud_BeginUGCUpload_Request
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CCloud_BeginUGCUpload_Request.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.appid = 0;
                object.file_size = 0;
                object.filename = "";
                object.file_sha = "";
                object.content_type = "";
            }
            if (message.appid != null && message.hasOwnProperty("appid"))
                object.appid = message.appid;
            if (message.file_size != null && message.hasOwnProperty("file_size"))
                object.file_size = message.file_size;
            if (message.filename != null && message.hasOwnProperty("filename"))
                object.filename = message.filename;
            if (message.file_sha != null && message.hasOwnProperty("file_sha"))
                object.file_sha = message.file_sha;
            if (message.content_type != null && message.hasOwnProperty("content_type"))
                object.content_type = message.content_type;
            return object;
        };
    
        /**
         * Converts this CCloud_BeginUGCUpload_Request to JSON.
         * @function toJSON
         * @memberof CCloud_BeginUGCUpload_Request
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CCloud_BeginUGCUpload_Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CCloud_BeginUGCUpload_Request;
    })();
    
    $root.CCloud_BeginUGCUpload_Response = (function() {
    
        /**
         * Properties of a CCloud_BeginUGCUpload_Response.
         * @exports ICCloud_BeginUGCUpload_Response
         * @interface ICCloud_BeginUGCUpload_Response
         * @property {EPublishedFileStorageSystem|null} [storage_system] CCloud_BeginUGCUpload_Response storage_system
         * @property {number|Long|null} [ugcid] CCloud_BeginUGCUpload_Response ugcid
         * @property {number|null} [timestamp] CCloud_BeginUGCUpload_Response timestamp
         * @property {string|null} [url_host] CCloud_BeginUGCUpload_Response url_host
         * @property {string|null} [url_path] CCloud_BeginUGCUpload_Response url_path
         * @property {boolean|null} [use_https] CCloud_BeginUGCUpload_Response use_https
         * @property {Array.<CCloud_BeginUGCUpload_Response.IHTTPHeaders>|null} [request_headers] CCloud_BeginUGCUpload_Response request_headers
         */
    
        /**
         * Constructs a new CCloud_BeginUGCUpload_Response.
         * @exports CCloud_BeginUGCUpload_Response
         * @classdesc Represents a CCloud_BeginUGCUpload_Response.
         * @implements ICCloud_BeginUGCUpload_Response
         * @constructor
         * @param {ICCloud_BeginUGCUpload_Response=} [properties] Properties to set
         */
        function CCloud_BeginUGCUpload_Response(properties) {
            this.request_headers = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CCloud_BeginUGCUpload_Response storage_system.
         * @member {EPublishedFileStorageSystem} storage_system
         * @memberof CCloud_BeginUGCUpload_Response
         * @instance
         */
        CCloud_BeginUGCUpload_Response.prototype.storage_system = 0;
    
        /**
         * CCloud_BeginUGCUpload_Response ugcid.
         * @member {number|Long} ugcid
         * @memberof CCloud_BeginUGCUpload_Response
         * @instance
         */
        CCloud_BeginUGCUpload_Response.prototype.ugcid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CCloud_BeginUGCUpload_Response timestamp.
         * @member {number} timestamp
         * @memberof CCloud_BeginUGCUpload_Response
         * @instance
         */
        CCloud_BeginUGCUpload_Response.prototype.timestamp = 0;
    
        /**
         * CCloud_BeginUGCUpload_Response url_host.
         * @member {string} url_host
         * @memberof CCloud_BeginUGCUpload_Response
         * @instance
         */
        CCloud_BeginUGCUpload_Response.prototype.url_host = "";
    
        /**
         * CCloud_BeginUGCUpload_Response url_path.
         * @member {string} url_path
         * @memberof CCloud_BeginUGCUpload_Response
         * @instance
         */
        CCloud_BeginUGCUpload_Response.prototype.url_path = "";
    
        /**
         * CCloud_BeginUGCUpload_Response use_https.
         * @member {boolean} use_https
         * @memberof CCloud_BeginUGCUpload_Response
         * @instance
         */
        CCloud_BeginUGCUpload_Response.prototype.use_https = false;
    
        /**
         * CCloud_BeginUGCUpload_Response request_headers.
         * @member {Array.<CCloud_BeginUGCUpload_Response.IHTTPHeaders>} request_headers
         * @memberof CCloud_BeginUGCUpload_Response
         * @instance
         */
        CCloud_BeginUGCUpload_Response.prototype.request_headers = $util.emptyArray;
    
        /**
         * Creates a new CCloud_BeginUGCUpload_Response instance using the specified properties.
         * @function create
         * @memberof CCloud_BeginUGCUpload_Response
         * @static
         * @param {ICCloud_BeginUGCUpload_Response=} [properties] Properties to set
         * @returns {CCloud_BeginUGCUpload_Response} CCloud_BeginUGCUpload_Response instance
         */
        CCloud_BeginUGCUpload_Response.create = function create(properties) {
            return new CCloud_BeginUGCUpload_Response(properties);
        };
    
        /**
         * Encodes the specified CCloud_BeginUGCUpload_Response message. Does not implicitly {@link CCloud_BeginUGCUpload_Response.verify|verify} messages.
         * @function encode
         * @memberof CCloud_BeginUGCUpload_Response
         * @static
         * @param {ICCloud_BeginUGCUpload_Response} message CCloud_BeginUGCUpload_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_BeginUGCUpload_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.storage_system != null && message.hasOwnProperty("storage_system"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.storage_system);
            if (message.ugcid != null && message.hasOwnProperty("ugcid"))
                writer.uint32(/* id 2, wireType 1 =*/17).fixed64(message.ugcid);
            if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                writer.uint32(/* id 3, wireType 5 =*/29).fixed32(message.timestamp);
            if (message.url_host != null && message.hasOwnProperty("url_host"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.url_host);
            if (message.url_path != null && message.hasOwnProperty("url_path"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.url_path);
            if (message.use_https != null && message.hasOwnProperty("use_https"))
                writer.uint32(/* id 6, wireType 0 =*/48).bool(message.use_https);
            if (message.request_headers != null && message.request_headers.length)
                for (var i = 0; i < message.request_headers.length; ++i)
                    $root.CCloud_BeginUGCUpload_Response.HTTPHeaders.encode(message.request_headers[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CCloud_BeginUGCUpload_Response message, length delimited. Does not implicitly {@link CCloud_BeginUGCUpload_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CCloud_BeginUGCUpload_Response
         * @static
         * @param {ICCloud_BeginUGCUpload_Response} message CCloud_BeginUGCUpload_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_BeginUGCUpload_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CCloud_BeginUGCUpload_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CCloud_BeginUGCUpload_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CCloud_BeginUGCUpload_Response} CCloud_BeginUGCUpload_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_BeginUGCUpload_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CCloud_BeginUGCUpload_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.storage_system = reader.int32();
                    break;
                case 2:
                    message.ugcid = reader.fixed64();
                    break;
                case 3:
                    message.timestamp = reader.fixed32();
                    break;
                case 4:
                    message.url_host = reader.string();
                    break;
                case 5:
                    message.url_path = reader.string();
                    break;
                case 6:
                    message.use_https = reader.bool();
                    break;
                case 7:
                    if (!(message.request_headers && message.request_headers.length))
                        message.request_headers = [];
                    message.request_headers.push($root.CCloud_BeginUGCUpload_Response.HTTPHeaders.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CCloud_BeginUGCUpload_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CCloud_BeginUGCUpload_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CCloud_BeginUGCUpload_Response} CCloud_BeginUGCUpload_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_BeginUGCUpload_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CCloud_BeginUGCUpload_Response message.
         * @function verify
         * @memberof CCloud_BeginUGCUpload_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CCloud_BeginUGCUpload_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.storage_system != null && message.hasOwnProperty("storage_system"))
                switch (message.storage_system) {
                default:
                    return "storage_system: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                    break;
                }
            if (message.ugcid != null && message.hasOwnProperty("ugcid"))
                if (!$util.isInteger(message.ugcid) && !(message.ugcid && $util.isInteger(message.ugcid.low) && $util.isInteger(message.ugcid.high)))
                    return "ugcid: integer|Long expected";
            if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                if (!$util.isInteger(message.timestamp))
                    return "timestamp: integer expected";
            if (message.url_host != null && message.hasOwnProperty("url_host"))
                if (!$util.isString(message.url_host))
                    return "url_host: string expected";
            if (message.url_path != null && message.hasOwnProperty("url_path"))
                if (!$util.isString(message.url_path))
                    return "url_path: string expected";
            if (message.use_https != null && message.hasOwnProperty("use_https"))
                if (typeof message.use_https !== "boolean")
                    return "use_https: boolean expected";
            if (message.request_headers != null && message.hasOwnProperty("request_headers")) {
                if (!Array.isArray(message.request_headers))
                    return "request_headers: array expected";
                for (var i = 0; i < message.request_headers.length; ++i) {
                    var error = $root.CCloud_BeginUGCUpload_Response.HTTPHeaders.verify(message.request_headers[i]);
                    if (error)
                        return "request_headers." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CCloud_BeginUGCUpload_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CCloud_BeginUGCUpload_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CCloud_BeginUGCUpload_Response} CCloud_BeginUGCUpload_Response
         */
        CCloud_BeginUGCUpload_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CCloud_BeginUGCUpload_Response)
                return object;
            var message = new $root.CCloud_BeginUGCUpload_Response();
            switch (object.storage_system) {
            case "k_EPublishedFileStorageSystemInvalid":
            case 0:
                message.storage_system = 0;
                break;
            case "k_EPublishedFileStorageSystemLegacyCloud":
            case 1:
                message.storage_system = 1;
                break;
            case "k_EPublishedFileStorageSystemDepot":
            case 2:
                message.storage_system = 2;
                break;
            case "k_EPublishedFileStorageSystemUGCCloud":
            case 3:
                message.storage_system = 3;
                break;
            }
            if (object.ugcid != null)
                if ($util.Long)
                    (message.ugcid = $util.Long.fromValue(object.ugcid)).unsigned = false;
                else if (typeof object.ugcid === "string")
                    message.ugcid = parseInt(object.ugcid, 10);
                else if (typeof object.ugcid === "number")
                    message.ugcid = object.ugcid;
                else if (typeof object.ugcid === "object")
                    message.ugcid = new $util.LongBits(object.ugcid.low >>> 0, object.ugcid.high >>> 0).toNumber();
            if (object.timestamp != null)
                message.timestamp = object.timestamp >>> 0;
            if (object.url_host != null)
                message.url_host = String(object.url_host);
            if (object.url_path != null)
                message.url_path = String(object.url_path);
            if (object.use_https != null)
                message.use_https = Boolean(object.use_https);
            if (object.request_headers) {
                if (!Array.isArray(object.request_headers))
                    throw TypeError(".CCloud_BeginUGCUpload_Response.request_headers: array expected");
                message.request_headers = [];
                for (var i = 0; i < object.request_headers.length; ++i) {
                    if (typeof object.request_headers[i] !== "object")
                        throw TypeError(".CCloud_BeginUGCUpload_Response.request_headers: object expected");
                    message.request_headers[i] = $root.CCloud_BeginUGCUpload_Response.HTTPHeaders.fromObject(object.request_headers[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CCloud_BeginUGCUpload_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CCloud_BeginUGCUpload_Response
         * @static
         * @param {CCloud_BeginUGCUpload_Response} message CCloud_BeginUGCUpload_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CCloud_BeginUGCUpload_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.request_headers = [];
            if (options.defaults) {
                object.storage_system = options.enums === String ? "k_EPublishedFileStorageSystemInvalid" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.ugcid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.ugcid = options.longs === String ? "0" : 0;
                object.timestamp = 0;
                object.url_host = "";
                object.url_path = "";
                object.use_https = false;
            }
            if (message.storage_system != null && message.hasOwnProperty("storage_system"))
                object.storage_system = options.enums === String ? $root.EPublishedFileStorageSystem[message.storage_system] : message.storage_system;
            if (message.ugcid != null && message.hasOwnProperty("ugcid"))
                if (typeof message.ugcid === "number")
                    object.ugcid = options.longs === String ? String(message.ugcid) : message.ugcid;
                else
                    object.ugcid = options.longs === String ? $util.Long.prototype.toString.call(message.ugcid) : options.longs === Number ? new $util.LongBits(message.ugcid.low >>> 0, message.ugcid.high >>> 0).toNumber() : message.ugcid;
            if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                object.timestamp = message.timestamp;
            if (message.url_host != null && message.hasOwnProperty("url_host"))
                object.url_host = message.url_host;
            if (message.url_path != null && message.hasOwnProperty("url_path"))
                object.url_path = message.url_path;
            if (message.use_https != null && message.hasOwnProperty("use_https"))
                object.use_https = message.use_https;
            if (message.request_headers && message.request_headers.length) {
                object.request_headers = [];
                for (var j = 0; j < message.request_headers.length; ++j)
                    object.request_headers[j] = $root.CCloud_BeginUGCUpload_Response.HTTPHeaders.toObject(message.request_headers[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CCloud_BeginUGCUpload_Response to JSON.
         * @function toJSON
         * @memberof CCloud_BeginUGCUpload_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CCloud_BeginUGCUpload_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        CCloud_BeginUGCUpload_Response.HTTPHeaders = (function() {
    
            /**
             * Properties of a HTTPHeaders.
             * @memberof CCloud_BeginUGCUpload_Response
             * @interface IHTTPHeaders
             * @property {string|null} [name] HTTPHeaders name
             * @property {string|null} [value] HTTPHeaders value
             */
    
            /**
             * Constructs a new HTTPHeaders.
             * @memberof CCloud_BeginUGCUpload_Response
             * @classdesc Represents a HTTPHeaders.
             * @implements IHTTPHeaders
             * @constructor
             * @param {CCloud_BeginUGCUpload_Response.IHTTPHeaders=} [properties] Properties to set
             */
            function HTTPHeaders(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * HTTPHeaders name.
             * @member {string} name
             * @memberof CCloud_BeginUGCUpload_Response.HTTPHeaders
             * @instance
             */
            HTTPHeaders.prototype.name = "";
    
            /**
             * HTTPHeaders value.
             * @member {string} value
             * @memberof CCloud_BeginUGCUpload_Response.HTTPHeaders
             * @instance
             */
            HTTPHeaders.prototype.value = "";
    
            /**
             * Creates a new HTTPHeaders instance using the specified properties.
             * @function create
             * @memberof CCloud_BeginUGCUpload_Response.HTTPHeaders
             * @static
             * @param {CCloud_BeginUGCUpload_Response.IHTTPHeaders=} [properties] Properties to set
             * @returns {CCloud_BeginUGCUpload_Response.HTTPHeaders} HTTPHeaders instance
             */
            HTTPHeaders.create = function create(properties) {
                return new HTTPHeaders(properties);
            };
    
            /**
             * Encodes the specified HTTPHeaders message. Does not implicitly {@link CCloud_BeginUGCUpload_Response.HTTPHeaders.verify|verify} messages.
             * @function encode
             * @memberof CCloud_BeginUGCUpload_Response.HTTPHeaders
             * @static
             * @param {CCloud_BeginUGCUpload_Response.IHTTPHeaders} message HTTPHeaders message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            HTTPHeaders.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && message.hasOwnProperty("name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.value != null && message.hasOwnProperty("value"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);
                return writer;
            };
    
            /**
             * Encodes the specified HTTPHeaders message, length delimited. Does not implicitly {@link CCloud_BeginUGCUpload_Response.HTTPHeaders.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CCloud_BeginUGCUpload_Response.HTTPHeaders
             * @static
             * @param {CCloud_BeginUGCUpload_Response.IHTTPHeaders} message HTTPHeaders message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            HTTPHeaders.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a HTTPHeaders message from the specified reader or buffer.
             * @function decode
             * @memberof CCloud_BeginUGCUpload_Response.HTTPHeaders
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CCloud_BeginUGCUpload_Response.HTTPHeaders} HTTPHeaders
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            HTTPHeaders.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CCloud_BeginUGCUpload_Response.HTTPHeaders();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        message.value = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a HTTPHeaders message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CCloud_BeginUGCUpload_Response.HTTPHeaders
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CCloud_BeginUGCUpload_Response.HTTPHeaders} HTTPHeaders
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            HTTPHeaders.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a HTTPHeaders message.
             * @function verify
             * @memberof CCloud_BeginUGCUpload_Response.HTTPHeaders
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            HTTPHeaders.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.value != null && message.hasOwnProperty("value"))
                    if (!$util.isString(message.value))
                        return "value: string expected";
                return null;
            };
    
            /**
             * Creates a HTTPHeaders message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CCloud_BeginUGCUpload_Response.HTTPHeaders
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CCloud_BeginUGCUpload_Response.HTTPHeaders} HTTPHeaders
             */
            HTTPHeaders.fromObject = function fromObject(object) {
                if (object instanceof $root.CCloud_BeginUGCUpload_Response.HTTPHeaders)
                    return object;
                var message = new $root.CCloud_BeginUGCUpload_Response.HTTPHeaders();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.value != null)
                    message.value = String(object.value);
                return message;
            };
    
            /**
             * Creates a plain object from a HTTPHeaders message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CCloud_BeginUGCUpload_Response.HTTPHeaders
             * @static
             * @param {CCloud_BeginUGCUpload_Response.HTTPHeaders} message HTTPHeaders
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            HTTPHeaders.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.name = "";
                    object.value = "";
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.value != null && message.hasOwnProperty("value"))
                    object.value = message.value;
                return object;
            };
    
            /**
             * Converts this HTTPHeaders to JSON.
             * @function toJSON
             * @memberof CCloud_BeginUGCUpload_Response.HTTPHeaders
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            HTTPHeaders.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return HTTPHeaders;
        })();
    
        return CCloud_BeginUGCUpload_Response;
    })();
    
    $root.CCloud_CommitUGCUpload_Request = (function() {
    
        /**
         * Properties of a CCloud_CommitUGCUpload_Request.
         * @exports ICCloud_CommitUGCUpload_Request
         * @interface ICCloud_CommitUGCUpload_Request
         * @property {boolean|null} [transfer_succeeded] CCloud_CommitUGCUpload_Request transfer_succeeded
         * @property {number|null} [appid] CCloud_CommitUGCUpload_Request appid
         * @property {number|Long|null} [ugcid] CCloud_CommitUGCUpload_Request ugcid
         */
    
        /**
         * Constructs a new CCloud_CommitUGCUpload_Request.
         * @exports CCloud_CommitUGCUpload_Request
         * @classdesc Represents a CCloud_CommitUGCUpload_Request.
         * @implements ICCloud_CommitUGCUpload_Request
         * @constructor
         * @param {ICCloud_CommitUGCUpload_Request=} [properties] Properties to set
         */
        function CCloud_CommitUGCUpload_Request(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CCloud_CommitUGCUpload_Request transfer_succeeded.
         * @member {boolean} transfer_succeeded
         * @memberof CCloud_CommitUGCUpload_Request
         * @instance
         */
        CCloud_CommitUGCUpload_Request.prototype.transfer_succeeded = false;
    
        /**
         * CCloud_CommitUGCUpload_Request appid.
         * @member {number} appid
         * @memberof CCloud_CommitUGCUpload_Request
         * @instance
         */
        CCloud_CommitUGCUpload_Request.prototype.appid = 0;
    
        /**
         * CCloud_CommitUGCUpload_Request ugcid.
         * @member {number|Long} ugcid
         * @memberof CCloud_CommitUGCUpload_Request
         * @instance
         */
        CCloud_CommitUGCUpload_Request.prototype.ugcid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * Creates a new CCloud_CommitUGCUpload_Request instance using the specified properties.
         * @function create
         * @memberof CCloud_CommitUGCUpload_Request
         * @static
         * @param {ICCloud_CommitUGCUpload_Request=} [properties] Properties to set
         * @returns {CCloud_CommitUGCUpload_Request} CCloud_CommitUGCUpload_Request instance
         */
        CCloud_CommitUGCUpload_Request.create = function create(properties) {
            return new CCloud_CommitUGCUpload_Request(properties);
        };
    
        /**
         * Encodes the specified CCloud_CommitUGCUpload_Request message. Does not implicitly {@link CCloud_CommitUGCUpload_Request.verify|verify} messages.
         * @function encode
         * @memberof CCloud_CommitUGCUpload_Request
         * @static
         * @param {ICCloud_CommitUGCUpload_Request} message CCloud_CommitUGCUpload_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_CommitUGCUpload_Request.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.transfer_succeeded != null && message.hasOwnProperty("transfer_succeeded"))
                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.transfer_succeeded);
            if (message.appid != null && message.hasOwnProperty("appid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.appid);
            if (message.ugcid != null && message.hasOwnProperty("ugcid"))
                writer.uint32(/* id 3, wireType 1 =*/25).fixed64(message.ugcid);
            return writer;
        };
    
        /**
         * Encodes the specified CCloud_CommitUGCUpload_Request message, length delimited. Does not implicitly {@link CCloud_CommitUGCUpload_Request.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CCloud_CommitUGCUpload_Request
         * @static
         * @param {ICCloud_CommitUGCUpload_Request} message CCloud_CommitUGCUpload_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_CommitUGCUpload_Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CCloud_CommitUGCUpload_Request message from the specified reader or buffer.
         * @function decode
         * @memberof CCloud_CommitUGCUpload_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CCloud_CommitUGCUpload_Request} CCloud_CommitUGCUpload_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_CommitUGCUpload_Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CCloud_CommitUGCUpload_Request();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.transfer_succeeded = reader.bool();
                    break;
                case 2:
                    message.appid = reader.uint32();
                    break;
                case 3:
                    message.ugcid = reader.fixed64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CCloud_CommitUGCUpload_Request message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CCloud_CommitUGCUpload_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CCloud_CommitUGCUpload_Request} CCloud_CommitUGCUpload_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_CommitUGCUpload_Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CCloud_CommitUGCUpload_Request message.
         * @function verify
         * @memberof CCloud_CommitUGCUpload_Request
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CCloud_CommitUGCUpload_Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.transfer_succeeded != null && message.hasOwnProperty("transfer_succeeded"))
                if (typeof message.transfer_succeeded !== "boolean")
                    return "transfer_succeeded: boolean expected";
            if (message.appid != null && message.hasOwnProperty("appid"))
                if (!$util.isInteger(message.appid))
                    return "appid: integer expected";
            if (message.ugcid != null && message.hasOwnProperty("ugcid"))
                if (!$util.isInteger(message.ugcid) && !(message.ugcid && $util.isInteger(message.ugcid.low) && $util.isInteger(message.ugcid.high)))
                    return "ugcid: integer|Long expected";
            return null;
        };
    
        /**
         * Creates a CCloud_CommitUGCUpload_Request message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CCloud_CommitUGCUpload_Request
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CCloud_CommitUGCUpload_Request} CCloud_CommitUGCUpload_Request
         */
        CCloud_CommitUGCUpload_Request.fromObject = function fromObject(object) {
            if (object instanceof $root.CCloud_CommitUGCUpload_Request)
                return object;
            var message = new $root.CCloud_CommitUGCUpload_Request();
            if (object.transfer_succeeded != null)
                message.transfer_succeeded = Boolean(object.transfer_succeeded);
            if (object.appid != null)
                message.appid = object.appid >>> 0;
            if (object.ugcid != null)
                if ($util.Long)
                    (message.ugcid = $util.Long.fromValue(object.ugcid)).unsigned = false;
                else if (typeof object.ugcid === "string")
                    message.ugcid = parseInt(object.ugcid, 10);
                else if (typeof object.ugcid === "number")
                    message.ugcid = object.ugcid;
                else if (typeof object.ugcid === "object")
                    message.ugcid = new $util.LongBits(object.ugcid.low >>> 0, object.ugcid.high >>> 0).toNumber();
            return message;
        };
    
        /**
         * Creates a plain object from a CCloud_CommitUGCUpload_Request message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CCloud_CommitUGCUpload_Request
         * @static
         * @param {CCloud_CommitUGCUpload_Request} message CCloud_CommitUGCUpload_Request
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CCloud_CommitUGCUpload_Request.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.transfer_succeeded = false;
                object.appid = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.ugcid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.ugcid = options.longs === String ? "0" : 0;
            }
            if (message.transfer_succeeded != null && message.hasOwnProperty("transfer_succeeded"))
                object.transfer_succeeded = message.transfer_succeeded;
            if (message.appid != null && message.hasOwnProperty("appid"))
                object.appid = message.appid;
            if (message.ugcid != null && message.hasOwnProperty("ugcid"))
                if (typeof message.ugcid === "number")
                    object.ugcid = options.longs === String ? String(message.ugcid) : message.ugcid;
                else
                    object.ugcid = options.longs === String ? $util.Long.prototype.toString.call(message.ugcid) : options.longs === Number ? new $util.LongBits(message.ugcid.low >>> 0, message.ugcid.high >>> 0).toNumber() : message.ugcid;
            return object;
        };
    
        /**
         * Converts this CCloud_CommitUGCUpload_Request to JSON.
         * @function toJSON
         * @memberof CCloud_CommitUGCUpload_Request
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CCloud_CommitUGCUpload_Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CCloud_CommitUGCUpload_Request;
    })();
    
    $root.CCloud_CommitUGCUpload_Response = (function() {
    
        /**
         * Properties of a CCloud_CommitUGCUpload_Response.
         * @exports ICCloud_CommitUGCUpload_Response
         * @interface ICCloud_CommitUGCUpload_Response
         * @property {boolean|null} [file_committed] CCloud_CommitUGCUpload_Response file_committed
         */
    
        /**
         * Constructs a new CCloud_CommitUGCUpload_Response.
         * @exports CCloud_CommitUGCUpload_Response
         * @classdesc Represents a CCloud_CommitUGCUpload_Response.
         * @implements ICCloud_CommitUGCUpload_Response
         * @constructor
         * @param {ICCloud_CommitUGCUpload_Response=} [properties] Properties to set
         */
        function CCloud_CommitUGCUpload_Response(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CCloud_CommitUGCUpload_Response file_committed.
         * @member {boolean} file_committed
         * @memberof CCloud_CommitUGCUpload_Response
         * @instance
         */
        CCloud_CommitUGCUpload_Response.prototype.file_committed = false;
    
        /**
         * Creates a new CCloud_CommitUGCUpload_Response instance using the specified properties.
         * @function create
         * @memberof CCloud_CommitUGCUpload_Response
         * @static
         * @param {ICCloud_CommitUGCUpload_Response=} [properties] Properties to set
         * @returns {CCloud_CommitUGCUpload_Response} CCloud_CommitUGCUpload_Response instance
         */
        CCloud_CommitUGCUpload_Response.create = function create(properties) {
            return new CCloud_CommitUGCUpload_Response(properties);
        };
    
        /**
         * Encodes the specified CCloud_CommitUGCUpload_Response message. Does not implicitly {@link CCloud_CommitUGCUpload_Response.verify|verify} messages.
         * @function encode
         * @memberof CCloud_CommitUGCUpload_Response
         * @static
         * @param {ICCloud_CommitUGCUpload_Response} message CCloud_CommitUGCUpload_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_CommitUGCUpload_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.file_committed != null && message.hasOwnProperty("file_committed"))
                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.file_committed);
            return writer;
        };
    
        /**
         * Encodes the specified CCloud_CommitUGCUpload_Response message, length delimited. Does not implicitly {@link CCloud_CommitUGCUpload_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CCloud_CommitUGCUpload_Response
         * @static
         * @param {ICCloud_CommitUGCUpload_Response} message CCloud_CommitUGCUpload_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_CommitUGCUpload_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CCloud_CommitUGCUpload_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CCloud_CommitUGCUpload_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CCloud_CommitUGCUpload_Response} CCloud_CommitUGCUpload_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_CommitUGCUpload_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CCloud_CommitUGCUpload_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.file_committed = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CCloud_CommitUGCUpload_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CCloud_CommitUGCUpload_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CCloud_CommitUGCUpload_Response} CCloud_CommitUGCUpload_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_CommitUGCUpload_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CCloud_CommitUGCUpload_Response message.
         * @function verify
         * @memberof CCloud_CommitUGCUpload_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CCloud_CommitUGCUpload_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.file_committed != null && message.hasOwnProperty("file_committed"))
                if (typeof message.file_committed !== "boolean")
                    return "file_committed: boolean expected";
            return null;
        };
    
        /**
         * Creates a CCloud_CommitUGCUpload_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CCloud_CommitUGCUpload_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CCloud_CommitUGCUpload_Response} CCloud_CommitUGCUpload_Response
         */
        CCloud_CommitUGCUpload_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CCloud_CommitUGCUpload_Response)
                return object;
            var message = new $root.CCloud_CommitUGCUpload_Response();
            if (object.file_committed != null)
                message.file_committed = Boolean(object.file_committed);
            return message;
        };
    
        /**
         * Creates a plain object from a CCloud_CommitUGCUpload_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CCloud_CommitUGCUpload_Response
         * @static
         * @param {CCloud_CommitUGCUpload_Response} message CCloud_CommitUGCUpload_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CCloud_CommitUGCUpload_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.file_committed = false;
            if (message.file_committed != null && message.hasOwnProperty("file_committed"))
                object.file_committed = message.file_committed;
            return object;
        };
    
        /**
         * Converts this CCloud_CommitUGCUpload_Response to JSON.
         * @function toJSON
         * @memberof CCloud_CommitUGCUpload_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CCloud_CommitUGCUpload_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CCloud_CommitUGCUpload_Response;
    })();
    
    $root.CCloud_GetFileDetails_Request = (function() {
    
        /**
         * Properties of a CCloud_GetFileDetails_Request.
         * @exports ICCloud_GetFileDetails_Request
         * @interface ICCloud_GetFileDetails_Request
         * @property {number|Long|null} [ugcid] CCloud_GetFileDetails_Request ugcid
         * @property {number|null} [appid] CCloud_GetFileDetails_Request appid
         */
    
        /**
         * Constructs a new CCloud_GetFileDetails_Request.
         * @exports CCloud_GetFileDetails_Request
         * @classdesc Represents a CCloud_GetFileDetails_Request.
         * @implements ICCloud_GetFileDetails_Request
         * @constructor
         * @param {ICCloud_GetFileDetails_Request=} [properties] Properties to set
         */
        function CCloud_GetFileDetails_Request(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CCloud_GetFileDetails_Request ugcid.
         * @member {number|Long} ugcid
         * @memberof CCloud_GetFileDetails_Request
         * @instance
         */
        CCloud_GetFileDetails_Request.prototype.ugcid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CCloud_GetFileDetails_Request appid.
         * @member {number} appid
         * @memberof CCloud_GetFileDetails_Request
         * @instance
         */
        CCloud_GetFileDetails_Request.prototype.appid = 0;
    
        /**
         * Creates a new CCloud_GetFileDetails_Request instance using the specified properties.
         * @function create
         * @memberof CCloud_GetFileDetails_Request
         * @static
         * @param {ICCloud_GetFileDetails_Request=} [properties] Properties to set
         * @returns {CCloud_GetFileDetails_Request} CCloud_GetFileDetails_Request instance
         */
        CCloud_GetFileDetails_Request.create = function create(properties) {
            return new CCloud_GetFileDetails_Request(properties);
        };
    
        /**
         * Encodes the specified CCloud_GetFileDetails_Request message. Does not implicitly {@link CCloud_GetFileDetails_Request.verify|verify} messages.
         * @function encode
         * @memberof CCloud_GetFileDetails_Request
         * @static
         * @param {ICCloud_GetFileDetails_Request} message CCloud_GetFileDetails_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_GetFileDetails_Request.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.ugcid != null && message.hasOwnProperty("ugcid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.ugcid);
            if (message.appid != null && message.hasOwnProperty("appid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.appid);
            return writer;
        };
    
        /**
         * Encodes the specified CCloud_GetFileDetails_Request message, length delimited. Does not implicitly {@link CCloud_GetFileDetails_Request.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CCloud_GetFileDetails_Request
         * @static
         * @param {ICCloud_GetFileDetails_Request} message CCloud_GetFileDetails_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_GetFileDetails_Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CCloud_GetFileDetails_Request message from the specified reader or buffer.
         * @function decode
         * @memberof CCloud_GetFileDetails_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CCloud_GetFileDetails_Request} CCloud_GetFileDetails_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_GetFileDetails_Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CCloud_GetFileDetails_Request();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.ugcid = reader.uint64();
                    break;
                case 2:
                    message.appid = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CCloud_GetFileDetails_Request message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CCloud_GetFileDetails_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CCloud_GetFileDetails_Request} CCloud_GetFileDetails_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_GetFileDetails_Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CCloud_GetFileDetails_Request message.
         * @function verify
         * @memberof CCloud_GetFileDetails_Request
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CCloud_GetFileDetails_Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.ugcid != null && message.hasOwnProperty("ugcid"))
                if (!$util.isInteger(message.ugcid) && !(message.ugcid && $util.isInteger(message.ugcid.low) && $util.isInteger(message.ugcid.high)))
                    return "ugcid: integer|Long expected";
            if (message.appid != null && message.hasOwnProperty("appid"))
                if (!$util.isInteger(message.appid))
                    return "appid: integer expected";
            return null;
        };
    
        /**
         * Creates a CCloud_GetFileDetails_Request message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CCloud_GetFileDetails_Request
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CCloud_GetFileDetails_Request} CCloud_GetFileDetails_Request
         */
        CCloud_GetFileDetails_Request.fromObject = function fromObject(object) {
            if (object instanceof $root.CCloud_GetFileDetails_Request)
                return object;
            var message = new $root.CCloud_GetFileDetails_Request();
            if (object.ugcid != null)
                if ($util.Long)
                    (message.ugcid = $util.Long.fromValue(object.ugcid)).unsigned = true;
                else if (typeof object.ugcid === "string")
                    message.ugcid = parseInt(object.ugcid, 10);
                else if (typeof object.ugcid === "number")
                    message.ugcid = object.ugcid;
                else if (typeof object.ugcid === "object")
                    message.ugcid = new $util.LongBits(object.ugcid.low >>> 0, object.ugcid.high >>> 0).toNumber(true);
            if (object.appid != null)
                message.appid = object.appid >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CCloud_GetFileDetails_Request message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CCloud_GetFileDetails_Request
         * @static
         * @param {CCloud_GetFileDetails_Request} message CCloud_GetFileDetails_Request
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CCloud_GetFileDetails_Request.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.ugcid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.ugcid = options.longs === String ? "0" : 0;
                object.appid = 0;
            }
            if (message.ugcid != null && message.hasOwnProperty("ugcid"))
                if (typeof message.ugcid === "number")
                    object.ugcid = options.longs === String ? String(message.ugcid) : message.ugcid;
                else
                    object.ugcid = options.longs === String ? $util.Long.prototype.toString.call(message.ugcid) : options.longs === Number ? new $util.LongBits(message.ugcid.low >>> 0, message.ugcid.high >>> 0).toNumber(true) : message.ugcid;
            if (message.appid != null && message.hasOwnProperty("appid"))
                object.appid = message.appid;
            return object;
        };
    
        /**
         * Converts this CCloud_GetFileDetails_Request to JSON.
         * @function toJSON
         * @memberof CCloud_GetFileDetails_Request
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CCloud_GetFileDetails_Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CCloud_GetFileDetails_Request;
    })();
    
    $root.CCloud_UserFile = (function() {
    
        /**
         * Properties of a CCloud_UserFile.
         * @exports ICCloud_UserFile
         * @interface ICCloud_UserFile
         * @property {number|null} [appid] CCloud_UserFile appid
         * @property {number|Long|null} [ugcid] CCloud_UserFile ugcid
         * @property {string|null} [filename] CCloud_UserFile filename
         * @property {number|Long|null} [timestamp] CCloud_UserFile timestamp
         * @property {number|null} [file_size] CCloud_UserFile file_size
         * @property {string|null} [url] CCloud_UserFile url
         * @property {number|Long|null} [steamid_creator] CCloud_UserFile steamid_creator
         * @property {number|null} [flags] CCloud_UserFile flags
         * @property {Array.<string>|null} [platforms_to_sync] CCloud_UserFile platforms_to_sync
         * @property {string|null} [file_sha] CCloud_UserFile file_sha
         */
    
        /**
         * Constructs a new CCloud_UserFile.
         * @exports CCloud_UserFile
         * @classdesc Represents a CCloud_UserFile.
         * @implements ICCloud_UserFile
         * @constructor
         * @param {ICCloud_UserFile=} [properties] Properties to set
         */
        function CCloud_UserFile(properties) {
            this.platforms_to_sync = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CCloud_UserFile appid.
         * @member {number} appid
         * @memberof CCloud_UserFile
         * @instance
         */
        CCloud_UserFile.prototype.appid = 0;
    
        /**
         * CCloud_UserFile ugcid.
         * @member {number|Long} ugcid
         * @memberof CCloud_UserFile
         * @instance
         */
        CCloud_UserFile.prototype.ugcid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CCloud_UserFile filename.
         * @member {string} filename
         * @memberof CCloud_UserFile
         * @instance
         */
        CCloud_UserFile.prototype.filename = "";
    
        /**
         * CCloud_UserFile timestamp.
         * @member {number|Long} timestamp
         * @memberof CCloud_UserFile
         * @instance
         */
        CCloud_UserFile.prototype.timestamp = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CCloud_UserFile file_size.
         * @member {number} file_size
         * @memberof CCloud_UserFile
         * @instance
         */
        CCloud_UserFile.prototype.file_size = 0;
    
        /**
         * CCloud_UserFile url.
         * @member {string} url
         * @memberof CCloud_UserFile
         * @instance
         */
        CCloud_UserFile.prototype.url = "";
    
        /**
         * CCloud_UserFile steamid_creator.
         * @member {number|Long} steamid_creator
         * @memberof CCloud_UserFile
         * @instance
         */
        CCloud_UserFile.prototype.steamid_creator = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CCloud_UserFile flags.
         * @member {number} flags
         * @memberof CCloud_UserFile
         * @instance
         */
        CCloud_UserFile.prototype.flags = 0;
    
        /**
         * CCloud_UserFile platforms_to_sync.
         * @member {Array.<string>} platforms_to_sync
         * @memberof CCloud_UserFile
         * @instance
         */
        CCloud_UserFile.prototype.platforms_to_sync = $util.emptyArray;
    
        /**
         * CCloud_UserFile file_sha.
         * @member {string} file_sha
         * @memberof CCloud_UserFile
         * @instance
         */
        CCloud_UserFile.prototype.file_sha = "";
    
        /**
         * Creates a new CCloud_UserFile instance using the specified properties.
         * @function create
         * @memberof CCloud_UserFile
         * @static
         * @param {ICCloud_UserFile=} [properties] Properties to set
         * @returns {CCloud_UserFile} CCloud_UserFile instance
         */
        CCloud_UserFile.create = function create(properties) {
            return new CCloud_UserFile(properties);
        };
    
        /**
         * Encodes the specified CCloud_UserFile message. Does not implicitly {@link CCloud_UserFile.verify|verify} messages.
         * @function encode
         * @memberof CCloud_UserFile
         * @static
         * @param {ICCloud_UserFile} message CCloud_UserFile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_UserFile.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.appid != null && message.hasOwnProperty("appid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.appid);
            if (message.ugcid != null && message.hasOwnProperty("ugcid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.ugcid);
            if (message.filename != null && message.hasOwnProperty("filename"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.filename);
            if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.timestamp);
            if (message.file_size != null && message.hasOwnProperty("file_size"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.file_size);
            if (message.url != null && message.hasOwnProperty("url"))
                writer.uint32(/* id 6, wireType 2 =*/50).string(message.url);
            if (message.steamid_creator != null && message.hasOwnProperty("steamid_creator"))
                writer.uint32(/* id 7, wireType 1 =*/57).fixed64(message.steamid_creator);
            if (message.flags != null && message.hasOwnProperty("flags"))
                writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.flags);
            if (message.platforms_to_sync != null && message.platforms_to_sync.length)
                for (var i = 0; i < message.platforms_to_sync.length; ++i)
                    writer.uint32(/* id 9, wireType 2 =*/74).string(message.platforms_to_sync[i]);
            if (message.file_sha != null && message.hasOwnProperty("file_sha"))
                writer.uint32(/* id 10, wireType 2 =*/82).string(message.file_sha);
            return writer;
        };
    
        /**
         * Encodes the specified CCloud_UserFile message, length delimited. Does not implicitly {@link CCloud_UserFile.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CCloud_UserFile
         * @static
         * @param {ICCloud_UserFile} message CCloud_UserFile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_UserFile.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CCloud_UserFile message from the specified reader or buffer.
         * @function decode
         * @memberof CCloud_UserFile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CCloud_UserFile} CCloud_UserFile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_UserFile.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CCloud_UserFile();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.appid = reader.uint32();
                    break;
                case 2:
                    message.ugcid = reader.uint64();
                    break;
                case 3:
                    message.filename = reader.string();
                    break;
                case 4:
                    message.timestamp = reader.uint64();
                    break;
                case 5:
                    message.file_size = reader.uint32();
                    break;
                case 6:
                    message.url = reader.string();
                    break;
                case 7:
                    message.steamid_creator = reader.fixed64();
                    break;
                case 8:
                    message.flags = reader.uint32();
                    break;
                case 9:
                    if (!(message.platforms_to_sync && message.platforms_to_sync.length))
                        message.platforms_to_sync = [];
                    message.platforms_to_sync.push(reader.string());
                    break;
                case 10:
                    message.file_sha = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CCloud_UserFile message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CCloud_UserFile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CCloud_UserFile} CCloud_UserFile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_UserFile.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CCloud_UserFile message.
         * @function verify
         * @memberof CCloud_UserFile
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CCloud_UserFile.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.appid != null && message.hasOwnProperty("appid"))
                if (!$util.isInteger(message.appid))
                    return "appid: integer expected";
            if (message.ugcid != null && message.hasOwnProperty("ugcid"))
                if (!$util.isInteger(message.ugcid) && !(message.ugcid && $util.isInteger(message.ugcid.low) && $util.isInteger(message.ugcid.high)))
                    return "ugcid: integer|Long expected";
            if (message.filename != null && message.hasOwnProperty("filename"))
                if (!$util.isString(message.filename))
                    return "filename: string expected";
            if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                if (!$util.isInteger(message.timestamp) && !(message.timestamp && $util.isInteger(message.timestamp.low) && $util.isInteger(message.timestamp.high)))
                    return "timestamp: integer|Long expected";
            if (message.file_size != null && message.hasOwnProperty("file_size"))
                if (!$util.isInteger(message.file_size))
                    return "file_size: integer expected";
            if (message.url != null && message.hasOwnProperty("url"))
                if (!$util.isString(message.url))
                    return "url: string expected";
            if (message.steamid_creator != null && message.hasOwnProperty("steamid_creator"))
                if (!$util.isInteger(message.steamid_creator) && !(message.steamid_creator && $util.isInteger(message.steamid_creator.low) && $util.isInteger(message.steamid_creator.high)))
                    return "steamid_creator: integer|Long expected";
            if (message.flags != null && message.hasOwnProperty("flags"))
                if (!$util.isInteger(message.flags))
                    return "flags: integer expected";
            if (message.platforms_to_sync != null && message.hasOwnProperty("platforms_to_sync")) {
                if (!Array.isArray(message.platforms_to_sync))
                    return "platforms_to_sync: array expected";
                for (var i = 0; i < message.platforms_to_sync.length; ++i)
                    if (!$util.isString(message.platforms_to_sync[i]))
                        return "platforms_to_sync: string[] expected";
            }
            if (message.file_sha != null && message.hasOwnProperty("file_sha"))
                if (!$util.isString(message.file_sha))
                    return "file_sha: string expected";
            return null;
        };
    
        /**
         * Creates a CCloud_UserFile message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CCloud_UserFile
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CCloud_UserFile} CCloud_UserFile
         */
        CCloud_UserFile.fromObject = function fromObject(object) {
            if (object instanceof $root.CCloud_UserFile)
                return object;
            var message = new $root.CCloud_UserFile();
            if (object.appid != null)
                message.appid = object.appid >>> 0;
            if (object.ugcid != null)
                if ($util.Long)
                    (message.ugcid = $util.Long.fromValue(object.ugcid)).unsigned = true;
                else if (typeof object.ugcid === "string")
                    message.ugcid = parseInt(object.ugcid, 10);
                else if (typeof object.ugcid === "number")
                    message.ugcid = object.ugcid;
                else if (typeof object.ugcid === "object")
                    message.ugcid = new $util.LongBits(object.ugcid.low >>> 0, object.ugcid.high >>> 0).toNumber(true);
            if (object.filename != null)
                message.filename = String(object.filename);
            if (object.timestamp != null)
                if ($util.Long)
                    (message.timestamp = $util.Long.fromValue(object.timestamp)).unsigned = true;
                else if (typeof object.timestamp === "string")
                    message.timestamp = parseInt(object.timestamp, 10);
                else if (typeof object.timestamp === "number")
                    message.timestamp = object.timestamp;
                else if (typeof object.timestamp === "object")
                    message.timestamp = new $util.LongBits(object.timestamp.low >>> 0, object.timestamp.high >>> 0).toNumber(true);
            if (object.file_size != null)
                message.file_size = object.file_size >>> 0;
            if (object.url != null)
                message.url = String(object.url);
            if (object.steamid_creator != null)
                if ($util.Long)
                    (message.steamid_creator = $util.Long.fromValue(object.steamid_creator)).unsigned = false;
                else if (typeof object.steamid_creator === "string")
                    message.steamid_creator = parseInt(object.steamid_creator, 10);
                else if (typeof object.steamid_creator === "number")
                    message.steamid_creator = object.steamid_creator;
                else if (typeof object.steamid_creator === "object")
                    message.steamid_creator = new $util.LongBits(object.steamid_creator.low >>> 0, object.steamid_creator.high >>> 0).toNumber();
            if (object.flags != null)
                message.flags = object.flags >>> 0;
            if (object.platforms_to_sync) {
                if (!Array.isArray(object.platforms_to_sync))
                    throw TypeError(".CCloud_UserFile.platforms_to_sync: array expected");
                message.platforms_to_sync = [];
                for (var i = 0; i < object.platforms_to_sync.length; ++i)
                    message.platforms_to_sync[i] = String(object.platforms_to_sync[i]);
            }
            if (object.file_sha != null)
                message.file_sha = String(object.file_sha);
            return message;
        };
    
        /**
         * Creates a plain object from a CCloud_UserFile message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CCloud_UserFile
         * @static
         * @param {CCloud_UserFile} message CCloud_UserFile
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CCloud_UserFile.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.platforms_to_sync = [];
            if (options.defaults) {
                object.appid = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.ugcid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.ugcid = options.longs === String ? "0" : 0;
                object.filename = "";
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.timestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.timestamp = options.longs === String ? "0" : 0;
                object.file_size = 0;
                object.url = "";
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.steamid_creator = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.steamid_creator = options.longs === String ? "0" : 0;
                object.flags = 0;
                object.file_sha = "";
            }
            if (message.appid != null && message.hasOwnProperty("appid"))
                object.appid = message.appid;
            if (message.ugcid != null && message.hasOwnProperty("ugcid"))
                if (typeof message.ugcid === "number")
                    object.ugcid = options.longs === String ? String(message.ugcid) : message.ugcid;
                else
                    object.ugcid = options.longs === String ? $util.Long.prototype.toString.call(message.ugcid) : options.longs === Number ? new $util.LongBits(message.ugcid.low >>> 0, message.ugcid.high >>> 0).toNumber(true) : message.ugcid;
            if (message.filename != null && message.hasOwnProperty("filename"))
                object.filename = message.filename;
            if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                if (typeof message.timestamp === "number")
                    object.timestamp = options.longs === String ? String(message.timestamp) : message.timestamp;
                else
                    object.timestamp = options.longs === String ? $util.Long.prototype.toString.call(message.timestamp) : options.longs === Number ? new $util.LongBits(message.timestamp.low >>> 0, message.timestamp.high >>> 0).toNumber(true) : message.timestamp;
            if (message.file_size != null && message.hasOwnProperty("file_size"))
                object.file_size = message.file_size;
            if (message.url != null && message.hasOwnProperty("url"))
                object.url = message.url;
            if (message.steamid_creator != null && message.hasOwnProperty("steamid_creator"))
                if (typeof message.steamid_creator === "number")
                    object.steamid_creator = options.longs === String ? String(message.steamid_creator) : message.steamid_creator;
                else
                    object.steamid_creator = options.longs === String ? $util.Long.prototype.toString.call(message.steamid_creator) : options.longs === Number ? new $util.LongBits(message.steamid_creator.low >>> 0, message.steamid_creator.high >>> 0).toNumber() : message.steamid_creator;
            if (message.flags != null && message.hasOwnProperty("flags"))
                object.flags = message.flags;
            if (message.platforms_to_sync && message.platforms_to_sync.length) {
                object.platforms_to_sync = [];
                for (var j = 0; j < message.platforms_to_sync.length; ++j)
                    object.platforms_to_sync[j] = message.platforms_to_sync[j];
            }
            if (message.file_sha != null && message.hasOwnProperty("file_sha"))
                object.file_sha = message.file_sha;
            return object;
        };
    
        /**
         * Converts this CCloud_UserFile to JSON.
         * @function toJSON
         * @memberof CCloud_UserFile
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CCloud_UserFile.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CCloud_UserFile;
    })();
    
    $root.CCloud_GetFileDetails_Response = (function() {
    
        /**
         * Properties of a CCloud_GetFileDetails_Response.
         * @exports ICCloud_GetFileDetails_Response
         * @interface ICCloud_GetFileDetails_Response
         * @property {ICCloud_UserFile|null} [details] CCloud_GetFileDetails_Response details
         */
    
        /**
         * Constructs a new CCloud_GetFileDetails_Response.
         * @exports CCloud_GetFileDetails_Response
         * @classdesc Represents a CCloud_GetFileDetails_Response.
         * @implements ICCloud_GetFileDetails_Response
         * @constructor
         * @param {ICCloud_GetFileDetails_Response=} [properties] Properties to set
         */
        function CCloud_GetFileDetails_Response(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CCloud_GetFileDetails_Response details.
         * @member {ICCloud_UserFile|null|undefined} details
         * @memberof CCloud_GetFileDetails_Response
         * @instance
         */
        CCloud_GetFileDetails_Response.prototype.details = null;
    
        /**
         * Creates a new CCloud_GetFileDetails_Response instance using the specified properties.
         * @function create
         * @memberof CCloud_GetFileDetails_Response
         * @static
         * @param {ICCloud_GetFileDetails_Response=} [properties] Properties to set
         * @returns {CCloud_GetFileDetails_Response} CCloud_GetFileDetails_Response instance
         */
        CCloud_GetFileDetails_Response.create = function create(properties) {
            return new CCloud_GetFileDetails_Response(properties);
        };
    
        /**
         * Encodes the specified CCloud_GetFileDetails_Response message. Does not implicitly {@link CCloud_GetFileDetails_Response.verify|verify} messages.
         * @function encode
         * @memberof CCloud_GetFileDetails_Response
         * @static
         * @param {ICCloud_GetFileDetails_Response} message CCloud_GetFileDetails_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_GetFileDetails_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.details != null && message.hasOwnProperty("details"))
                $root.CCloud_UserFile.encode(message.details, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CCloud_GetFileDetails_Response message, length delimited. Does not implicitly {@link CCloud_GetFileDetails_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CCloud_GetFileDetails_Response
         * @static
         * @param {ICCloud_GetFileDetails_Response} message CCloud_GetFileDetails_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_GetFileDetails_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CCloud_GetFileDetails_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CCloud_GetFileDetails_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CCloud_GetFileDetails_Response} CCloud_GetFileDetails_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_GetFileDetails_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CCloud_GetFileDetails_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.details = $root.CCloud_UserFile.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CCloud_GetFileDetails_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CCloud_GetFileDetails_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CCloud_GetFileDetails_Response} CCloud_GetFileDetails_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_GetFileDetails_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CCloud_GetFileDetails_Response message.
         * @function verify
         * @memberof CCloud_GetFileDetails_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CCloud_GetFileDetails_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.details != null && message.hasOwnProperty("details")) {
                var error = $root.CCloud_UserFile.verify(message.details);
                if (error)
                    return "details." + error;
            }
            return null;
        };
    
        /**
         * Creates a CCloud_GetFileDetails_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CCloud_GetFileDetails_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CCloud_GetFileDetails_Response} CCloud_GetFileDetails_Response
         */
        CCloud_GetFileDetails_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CCloud_GetFileDetails_Response)
                return object;
            var message = new $root.CCloud_GetFileDetails_Response();
            if (object.details != null) {
                if (typeof object.details !== "object")
                    throw TypeError(".CCloud_GetFileDetails_Response.details: object expected");
                message.details = $root.CCloud_UserFile.fromObject(object.details);
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CCloud_GetFileDetails_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CCloud_GetFileDetails_Response
         * @static
         * @param {CCloud_GetFileDetails_Response} message CCloud_GetFileDetails_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CCloud_GetFileDetails_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.details = null;
            if (message.details != null && message.hasOwnProperty("details"))
                object.details = $root.CCloud_UserFile.toObject(message.details, options);
            return object;
        };
    
        /**
         * Converts this CCloud_GetFileDetails_Response to JSON.
         * @function toJSON
         * @memberof CCloud_GetFileDetails_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CCloud_GetFileDetails_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CCloud_GetFileDetails_Response;
    })();
    
    $root.CCloud_EnumerateUserFiles_Request = (function() {
    
        /**
         * Properties of a CCloud_EnumerateUserFiles_Request.
         * @exports ICCloud_EnumerateUserFiles_Request
         * @interface ICCloud_EnumerateUserFiles_Request
         * @property {number|null} [appid] CCloud_EnumerateUserFiles_Request appid
         * @property {boolean|null} [extended_details] CCloud_EnumerateUserFiles_Request extended_details
         * @property {number|null} [count] CCloud_EnumerateUserFiles_Request count
         * @property {number|null} [start_index] CCloud_EnumerateUserFiles_Request start_index
         */
    
        /**
         * Constructs a new CCloud_EnumerateUserFiles_Request.
         * @exports CCloud_EnumerateUserFiles_Request
         * @classdesc Represents a CCloud_EnumerateUserFiles_Request.
         * @implements ICCloud_EnumerateUserFiles_Request
         * @constructor
         * @param {ICCloud_EnumerateUserFiles_Request=} [properties] Properties to set
         */
        function CCloud_EnumerateUserFiles_Request(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CCloud_EnumerateUserFiles_Request appid.
         * @member {number} appid
         * @memberof CCloud_EnumerateUserFiles_Request
         * @instance
         */
        CCloud_EnumerateUserFiles_Request.prototype.appid = 0;
    
        /**
         * CCloud_EnumerateUserFiles_Request extended_details.
         * @member {boolean} extended_details
         * @memberof CCloud_EnumerateUserFiles_Request
         * @instance
         */
        CCloud_EnumerateUserFiles_Request.prototype.extended_details = false;
    
        /**
         * CCloud_EnumerateUserFiles_Request count.
         * @member {number} count
         * @memberof CCloud_EnumerateUserFiles_Request
         * @instance
         */
        CCloud_EnumerateUserFiles_Request.prototype.count = 0;
    
        /**
         * CCloud_EnumerateUserFiles_Request start_index.
         * @member {number} start_index
         * @memberof CCloud_EnumerateUserFiles_Request
         * @instance
         */
        CCloud_EnumerateUserFiles_Request.prototype.start_index = 0;
    
        /**
         * Creates a new CCloud_EnumerateUserFiles_Request instance using the specified properties.
         * @function create
         * @memberof CCloud_EnumerateUserFiles_Request
         * @static
         * @param {ICCloud_EnumerateUserFiles_Request=} [properties] Properties to set
         * @returns {CCloud_EnumerateUserFiles_Request} CCloud_EnumerateUserFiles_Request instance
         */
        CCloud_EnumerateUserFiles_Request.create = function create(properties) {
            return new CCloud_EnumerateUserFiles_Request(properties);
        };
    
        /**
         * Encodes the specified CCloud_EnumerateUserFiles_Request message. Does not implicitly {@link CCloud_EnumerateUserFiles_Request.verify|verify} messages.
         * @function encode
         * @memberof CCloud_EnumerateUserFiles_Request
         * @static
         * @param {ICCloud_EnumerateUserFiles_Request} message CCloud_EnumerateUserFiles_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_EnumerateUserFiles_Request.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.appid != null && message.hasOwnProperty("appid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.appid);
            if (message.extended_details != null && message.hasOwnProperty("extended_details"))
                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.extended_details);
            if (message.count != null && message.hasOwnProperty("count"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.count);
            if (message.start_index != null && message.hasOwnProperty("start_index"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.start_index);
            return writer;
        };
    
        /**
         * Encodes the specified CCloud_EnumerateUserFiles_Request message, length delimited. Does not implicitly {@link CCloud_EnumerateUserFiles_Request.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CCloud_EnumerateUserFiles_Request
         * @static
         * @param {ICCloud_EnumerateUserFiles_Request} message CCloud_EnumerateUserFiles_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_EnumerateUserFiles_Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CCloud_EnumerateUserFiles_Request message from the specified reader or buffer.
         * @function decode
         * @memberof CCloud_EnumerateUserFiles_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CCloud_EnumerateUserFiles_Request} CCloud_EnumerateUserFiles_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_EnumerateUserFiles_Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CCloud_EnumerateUserFiles_Request();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.appid = reader.uint32();
                    break;
                case 2:
                    message.extended_details = reader.bool();
                    break;
                case 3:
                    message.count = reader.uint32();
                    break;
                case 4:
                    message.start_index = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CCloud_EnumerateUserFiles_Request message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CCloud_EnumerateUserFiles_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CCloud_EnumerateUserFiles_Request} CCloud_EnumerateUserFiles_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_EnumerateUserFiles_Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CCloud_EnumerateUserFiles_Request message.
         * @function verify
         * @memberof CCloud_EnumerateUserFiles_Request
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CCloud_EnumerateUserFiles_Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.appid != null && message.hasOwnProperty("appid"))
                if (!$util.isInteger(message.appid))
                    return "appid: integer expected";
            if (message.extended_details != null && message.hasOwnProperty("extended_details"))
                if (typeof message.extended_details !== "boolean")
                    return "extended_details: boolean expected";
            if (message.count != null && message.hasOwnProperty("count"))
                if (!$util.isInteger(message.count))
                    return "count: integer expected";
            if (message.start_index != null && message.hasOwnProperty("start_index"))
                if (!$util.isInteger(message.start_index))
                    return "start_index: integer expected";
            return null;
        };
    
        /**
         * Creates a CCloud_EnumerateUserFiles_Request message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CCloud_EnumerateUserFiles_Request
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CCloud_EnumerateUserFiles_Request} CCloud_EnumerateUserFiles_Request
         */
        CCloud_EnumerateUserFiles_Request.fromObject = function fromObject(object) {
            if (object instanceof $root.CCloud_EnumerateUserFiles_Request)
                return object;
            var message = new $root.CCloud_EnumerateUserFiles_Request();
            if (object.appid != null)
                message.appid = object.appid >>> 0;
            if (object.extended_details != null)
                message.extended_details = Boolean(object.extended_details);
            if (object.count != null)
                message.count = object.count >>> 0;
            if (object.start_index != null)
                message.start_index = object.start_index >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CCloud_EnumerateUserFiles_Request message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CCloud_EnumerateUserFiles_Request
         * @static
         * @param {CCloud_EnumerateUserFiles_Request} message CCloud_EnumerateUserFiles_Request
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CCloud_EnumerateUserFiles_Request.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.appid = 0;
                object.extended_details = false;
                object.count = 0;
                object.start_index = 0;
            }
            if (message.appid != null && message.hasOwnProperty("appid"))
                object.appid = message.appid;
            if (message.extended_details != null && message.hasOwnProperty("extended_details"))
                object.extended_details = message.extended_details;
            if (message.count != null && message.hasOwnProperty("count"))
                object.count = message.count;
            if (message.start_index != null && message.hasOwnProperty("start_index"))
                object.start_index = message.start_index;
            return object;
        };
    
        /**
         * Converts this CCloud_EnumerateUserFiles_Request to JSON.
         * @function toJSON
         * @memberof CCloud_EnumerateUserFiles_Request
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CCloud_EnumerateUserFiles_Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CCloud_EnumerateUserFiles_Request;
    })();
    
    $root.CCloud_EnumerateUserFiles_Response = (function() {
    
        /**
         * Properties of a CCloud_EnumerateUserFiles_Response.
         * @exports ICCloud_EnumerateUserFiles_Response
         * @interface ICCloud_EnumerateUserFiles_Response
         * @property {Array.<ICCloud_UserFile>|null} [files] CCloud_EnumerateUserFiles_Response files
         * @property {number|null} [total_files] CCloud_EnumerateUserFiles_Response total_files
         */
    
        /**
         * Constructs a new CCloud_EnumerateUserFiles_Response.
         * @exports CCloud_EnumerateUserFiles_Response
         * @classdesc Represents a CCloud_EnumerateUserFiles_Response.
         * @implements ICCloud_EnumerateUserFiles_Response
         * @constructor
         * @param {ICCloud_EnumerateUserFiles_Response=} [properties] Properties to set
         */
        function CCloud_EnumerateUserFiles_Response(properties) {
            this.files = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CCloud_EnumerateUserFiles_Response files.
         * @member {Array.<ICCloud_UserFile>} files
         * @memberof CCloud_EnumerateUserFiles_Response
         * @instance
         */
        CCloud_EnumerateUserFiles_Response.prototype.files = $util.emptyArray;
    
        /**
         * CCloud_EnumerateUserFiles_Response total_files.
         * @member {number} total_files
         * @memberof CCloud_EnumerateUserFiles_Response
         * @instance
         */
        CCloud_EnumerateUserFiles_Response.prototype.total_files = 0;
    
        /**
         * Creates a new CCloud_EnumerateUserFiles_Response instance using the specified properties.
         * @function create
         * @memberof CCloud_EnumerateUserFiles_Response
         * @static
         * @param {ICCloud_EnumerateUserFiles_Response=} [properties] Properties to set
         * @returns {CCloud_EnumerateUserFiles_Response} CCloud_EnumerateUserFiles_Response instance
         */
        CCloud_EnumerateUserFiles_Response.create = function create(properties) {
            return new CCloud_EnumerateUserFiles_Response(properties);
        };
    
        /**
         * Encodes the specified CCloud_EnumerateUserFiles_Response message. Does not implicitly {@link CCloud_EnumerateUserFiles_Response.verify|verify} messages.
         * @function encode
         * @memberof CCloud_EnumerateUserFiles_Response
         * @static
         * @param {ICCloud_EnumerateUserFiles_Response} message CCloud_EnumerateUserFiles_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_EnumerateUserFiles_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.files != null && message.files.length)
                for (var i = 0; i < message.files.length; ++i)
                    $root.CCloud_UserFile.encode(message.files[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.total_files != null && message.hasOwnProperty("total_files"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.total_files);
            return writer;
        };
    
        /**
         * Encodes the specified CCloud_EnumerateUserFiles_Response message, length delimited. Does not implicitly {@link CCloud_EnumerateUserFiles_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CCloud_EnumerateUserFiles_Response
         * @static
         * @param {ICCloud_EnumerateUserFiles_Response} message CCloud_EnumerateUserFiles_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_EnumerateUserFiles_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CCloud_EnumerateUserFiles_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CCloud_EnumerateUserFiles_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CCloud_EnumerateUserFiles_Response} CCloud_EnumerateUserFiles_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_EnumerateUserFiles_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CCloud_EnumerateUserFiles_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.files && message.files.length))
                        message.files = [];
                    message.files.push($root.CCloud_UserFile.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.total_files = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CCloud_EnumerateUserFiles_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CCloud_EnumerateUserFiles_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CCloud_EnumerateUserFiles_Response} CCloud_EnumerateUserFiles_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_EnumerateUserFiles_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CCloud_EnumerateUserFiles_Response message.
         * @function verify
         * @memberof CCloud_EnumerateUserFiles_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CCloud_EnumerateUserFiles_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.files != null && message.hasOwnProperty("files")) {
                if (!Array.isArray(message.files))
                    return "files: array expected";
                for (var i = 0; i < message.files.length; ++i) {
                    var error = $root.CCloud_UserFile.verify(message.files[i]);
                    if (error)
                        return "files." + error;
                }
            }
            if (message.total_files != null && message.hasOwnProperty("total_files"))
                if (!$util.isInteger(message.total_files))
                    return "total_files: integer expected";
            return null;
        };
    
        /**
         * Creates a CCloud_EnumerateUserFiles_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CCloud_EnumerateUserFiles_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CCloud_EnumerateUserFiles_Response} CCloud_EnumerateUserFiles_Response
         */
        CCloud_EnumerateUserFiles_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CCloud_EnumerateUserFiles_Response)
                return object;
            var message = new $root.CCloud_EnumerateUserFiles_Response();
            if (object.files) {
                if (!Array.isArray(object.files))
                    throw TypeError(".CCloud_EnumerateUserFiles_Response.files: array expected");
                message.files = [];
                for (var i = 0; i < object.files.length; ++i) {
                    if (typeof object.files[i] !== "object")
                        throw TypeError(".CCloud_EnumerateUserFiles_Response.files: object expected");
                    message.files[i] = $root.CCloud_UserFile.fromObject(object.files[i]);
                }
            }
            if (object.total_files != null)
                message.total_files = object.total_files >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CCloud_EnumerateUserFiles_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CCloud_EnumerateUserFiles_Response
         * @static
         * @param {CCloud_EnumerateUserFiles_Response} message CCloud_EnumerateUserFiles_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CCloud_EnumerateUserFiles_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.files = [];
            if (options.defaults)
                object.total_files = 0;
            if (message.files && message.files.length) {
                object.files = [];
                for (var j = 0; j < message.files.length; ++j)
                    object.files[j] = $root.CCloud_UserFile.toObject(message.files[j], options);
            }
            if (message.total_files != null && message.hasOwnProperty("total_files"))
                object.total_files = message.total_files;
            return object;
        };
    
        /**
         * Converts this CCloud_EnumerateUserFiles_Response to JSON.
         * @function toJSON
         * @memberof CCloud_EnumerateUserFiles_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CCloud_EnumerateUserFiles_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CCloud_EnumerateUserFiles_Response;
    })();
    
    $root.CCloud_Delete_Request = (function() {
    
        /**
         * Properties of a CCloud_Delete_Request.
         * @exports ICCloud_Delete_Request
         * @interface ICCloud_Delete_Request
         * @property {string|null} [filename] CCloud_Delete_Request filename
         * @property {number|null} [appid] CCloud_Delete_Request appid
         * @property {number|Long|null} [upload_batch_id] CCloud_Delete_Request upload_batch_id
         */
    
        /**
         * Constructs a new CCloud_Delete_Request.
         * @exports CCloud_Delete_Request
         * @classdesc Represents a CCloud_Delete_Request.
         * @implements ICCloud_Delete_Request
         * @constructor
         * @param {ICCloud_Delete_Request=} [properties] Properties to set
         */
        function CCloud_Delete_Request(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CCloud_Delete_Request filename.
         * @member {string} filename
         * @memberof CCloud_Delete_Request
         * @instance
         */
        CCloud_Delete_Request.prototype.filename = "";
    
        /**
         * CCloud_Delete_Request appid.
         * @member {number} appid
         * @memberof CCloud_Delete_Request
         * @instance
         */
        CCloud_Delete_Request.prototype.appid = 0;
    
        /**
         * CCloud_Delete_Request upload_batch_id.
         * @member {number|Long} upload_batch_id
         * @memberof CCloud_Delete_Request
         * @instance
         */
        CCloud_Delete_Request.prototype.upload_batch_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * Creates a new CCloud_Delete_Request instance using the specified properties.
         * @function create
         * @memberof CCloud_Delete_Request
         * @static
         * @param {ICCloud_Delete_Request=} [properties] Properties to set
         * @returns {CCloud_Delete_Request} CCloud_Delete_Request instance
         */
        CCloud_Delete_Request.create = function create(properties) {
            return new CCloud_Delete_Request(properties);
        };
    
        /**
         * Encodes the specified CCloud_Delete_Request message. Does not implicitly {@link CCloud_Delete_Request.verify|verify} messages.
         * @function encode
         * @memberof CCloud_Delete_Request
         * @static
         * @param {ICCloud_Delete_Request} message CCloud_Delete_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_Delete_Request.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.filename != null && message.hasOwnProperty("filename"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.filename);
            if (message.appid != null && message.hasOwnProperty("appid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.appid);
            if (message.upload_batch_id != null && message.hasOwnProperty("upload_batch_id"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.upload_batch_id);
            return writer;
        };
    
        /**
         * Encodes the specified CCloud_Delete_Request message, length delimited. Does not implicitly {@link CCloud_Delete_Request.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CCloud_Delete_Request
         * @static
         * @param {ICCloud_Delete_Request} message CCloud_Delete_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_Delete_Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CCloud_Delete_Request message from the specified reader or buffer.
         * @function decode
         * @memberof CCloud_Delete_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CCloud_Delete_Request} CCloud_Delete_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_Delete_Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CCloud_Delete_Request();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.filename = reader.string();
                    break;
                case 2:
                    message.appid = reader.uint32();
                    break;
                case 3:
                    message.upload_batch_id = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CCloud_Delete_Request message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CCloud_Delete_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CCloud_Delete_Request} CCloud_Delete_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_Delete_Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CCloud_Delete_Request message.
         * @function verify
         * @memberof CCloud_Delete_Request
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CCloud_Delete_Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.filename != null && message.hasOwnProperty("filename"))
                if (!$util.isString(message.filename))
                    return "filename: string expected";
            if (message.appid != null && message.hasOwnProperty("appid"))
                if (!$util.isInteger(message.appid))
                    return "appid: integer expected";
            if (message.upload_batch_id != null && message.hasOwnProperty("upload_batch_id"))
                if (!$util.isInteger(message.upload_batch_id) && !(message.upload_batch_id && $util.isInteger(message.upload_batch_id.low) && $util.isInteger(message.upload_batch_id.high)))
                    return "upload_batch_id: integer|Long expected";
            return null;
        };
    
        /**
         * Creates a CCloud_Delete_Request message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CCloud_Delete_Request
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CCloud_Delete_Request} CCloud_Delete_Request
         */
        CCloud_Delete_Request.fromObject = function fromObject(object) {
            if (object instanceof $root.CCloud_Delete_Request)
                return object;
            var message = new $root.CCloud_Delete_Request();
            if (object.filename != null)
                message.filename = String(object.filename);
            if (object.appid != null)
                message.appid = object.appid >>> 0;
            if (object.upload_batch_id != null)
                if ($util.Long)
                    (message.upload_batch_id = $util.Long.fromValue(object.upload_batch_id)).unsigned = true;
                else if (typeof object.upload_batch_id === "string")
                    message.upload_batch_id = parseInt(object.upload_batch_id, 10);
                else if (typeof object.upload_batch_id === "number")
                    message.upload_batch_id = object.upload_batch_id;
                else if (typeof object.upload_batch_id === "object")
                    message.upload_batch_id = new $util.LongBits(object.upload_batch_id.low >>> 0, object.upload_batch_id.high >>> 0).toNumber(true);
            return message;
        };
    
        /**
         * Creates a plain object from a CCloud_Delete_Request message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CCloud_Delete_Request
         * @static
         * @param {CCloud_Delete_Request} message CCloud_Delete_Request
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CCloud_Delete_Request.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.filename = "";
                object.appid = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.upload_batch_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.upload_batch_id = options.longs === String ? "0" : 0;
            }
            if (message.filename != null && message.hasOwnProperty("filename"))
                object.filename = message.filename;
            if (message.appid != null && message.hasOwnProperty("appid"))
                object.appid = message.appid;
            if (message.upload_batch_id != null && message.hasOwnProperty("upload_batch_id"))
                if (typeof message.upload_batch_id === "number")
                    object.upload_batch_id = options.longs === String ? String(message.upload_batch_id) : message.upload_batch_id;
                else
                    object.upload_batch_id = options.longs === String ? $util.Long.prototype.toString.call(message.upload_batch_id) : options.longs === Number ? new $util.LongBits(message.upload_batch_id.low >>> 0, message.upload_batch_id.high >>> 0).toNumber(true) : message.upload_batch_id;
            return object;
        };
    
        /**
         * Converts this CCloud_Delete_Request to JSON.
         * @function toJSON
         * @memberof CCloud_Delete_Request
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CCloud_Delete_Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CCloud_Delete_Request;
    })();
    
    $root.CCloud_Delete_Response = (function() {
    
        /**
         * Properties of a CCloud_Delete_Response.
         * @exports ICCloud_Delete_Response
         * @interface ICCloud_Delete_Response
         */
    
        /**
         * Constructs a new CCloud_Delete_Response.
         * @exports CCloud_Delete_Response
         * @classdesc Represents a CCloud_Delete_Response.
         * @implements ICCloud_Delete_Response
         * @constructor
         * @param {ICCloud_Delete_Response=} [properties] Properties to set
         */
        function CCloud_Delete_Response(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * Creates a new CCloud_Delete_Response instance using the specified properties.
         * @function create
         * @memberof CCloud_Delete_Response
         * @static
         * @param {ICCloud_Delete_Response=} [properties] Properties to set
         * @returns {CCloud_Delete_Response} CCloud_Delete_Response instance
         */
        CCloud_Delete_Response.create = function create(properties) {
            return new CCloud_Delete_Response(properties);
        };
    
        /**
         * Encodes the specified CCloud_Delete_Response message. Does not implicitly {@link CCloud_Delete_Response.verify|verify} messages.
         * @function encode
         * @memberof CCloud_Delete_Response
         * @static
         * @param {ICCloud_Delete_Response} message CCloud_Delete_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_Delete_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };
    
        /**
         * Encodes the specified CCloud_Delete_Response message, length delimited. Does not implicitly {@link CCloud_Delete_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CCloud_Delete_Response
         * @static
         * @param {ICCloud_Delete_Response} message CCloud_Delete_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_Delete_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CCloud_Delete_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CCloud_Delete_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CCloud_Delete_Response} CCloud_Delete_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_Delete_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CCloud_Delete_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CCloud_Delete_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CCloud_Delete_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CCloud_Delete_Response} CCloud_Delete_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_Delete_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CCloud_Delete_Response message.
         * @function verify
         * @memberof CCloud_Delete_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CCloud_Delete_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };
    
        /**
         * Creates a CCloud_Delete_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CCloud_Delete_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CCloud_Delete_Response} CCloud_Delete_Response
         */
        CCloud_Delete_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CCloud_Delete_Response)
                return object;
            return new $root.CCloud_Delete_Response();
        };
    
        /**
         * Creates a plain object from a CCloud_Delete_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CCloud_Delete_Response
         * @static
         * @param {CCloud_Delete_Response} message CCloud_Delete_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CCloud_Delete_Response.toObject = function toObject() {
            return {};
        };
    
        /**
         * Converts this CCloud_Delete_Response to JSON.
         * @function toJSON
         * @memberof CCloud_Delete_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CCloud_Delete_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CCloud_Delete_Response;
    })();
    
    $root.CCloud_GetClientEncryptionKey_Request = (function() {
    
        /**
         * Properties of a CCloud_GetClientEncryptionKey_Request.
         * @exports ICCloud_GetClientEncryptionKey_Request
         * @interface ICCloud_GetClientEncryptionKey_Request
         */
    
        /**
         * Constructs a new CCloud_GetClientEncryptionKey_Request.
         * @exports CCloud_GetClientEncryptionKey_Request
         * @classdesc Represents a CCloud_GetClientEncryptionKey_Request.
         * @implements ICCloud_GetClientEncryptionKey_Request
         * @constructor
         * @param {ICCloud_GetClientEncryptionKey_Request=} [properties] Properties to set
         */
        function CCloud_GetClientEncryptionKey_Request(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * Creates a new CCloud_GetClientEncryptionKey_Request instance using the specified properties.
         * @function create
         * @memberof CCloud_GetClientEncryptionKey_Request
         * @static
         * @param {ICCloud_GetClientEncryptionKey_Request=} [properties] Properties to set
         * @returns {CCloud_GetClientEncryptionKey_Request} CCloud_GetClientEncryptionKey_Request instance
         */
        CCloud_GetClientEncryptionKey_Request.create = function create(properties) {
            return new CCloud_GetClientEncryptionKey_Request(properties);
        };
    
        /**
         * Encodes the specified CCloud_GetClientEncryptionKey_Request message. Does not implicitly {@link CCloud_GetClientEncryptionKey_Request.verify|verify} messages.
         * @function encode
         * @memberof CCloud_GetClientEncryptionKey_Request
         * @static
         * @param {ICCloud_GetClientEncryptionKey_Request} message CCloud_GetClientEncryptionKey_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_GetClientEncryptionKey_Request.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };
    
        /**
         * Encodes the specified CCloud_GetClientEncryptionKey_Request message, length delimited. Does not implicitly {@link CCloud_GetClientEncryptionKey_Request.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CCloud_GetClientEncryptionKey_Request
         * @static
         * @param {ICCloud_GetClientEncryptionKey_Request} message CCloud_GetClientEncryptionKey_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_GetClientEncryptionKey_Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CCloud_GetClientEncryptionKey_Request message from the specified reader or buffer.
         * @function decode
         * @memberof CCloud_GetClientEncryptionKey_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CCloud_GetClientEncryptionKey_Request} CCloud_GetClientEncryptionKey_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_GetClientEncryptionKey_Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CCloud_GetClientEncryptionKey_Request();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CCloud_GetClientEncryptionKey_Request message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CCloud_GetClientEncryptionKey_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CCloud_GetClientEncryptionKey_Request} CCloud_GetClientEncryptionKey_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_GetClientEncryptionKey_Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CCloud_GetClientEncryptionKey_Request message.
         * @function verify
         * @memberof CCloud_GetClientEncryptionKey_Request
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CCloud_GetClientEncryptionKey_Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };
    
        /**
         * Creates a CCloud_GetClientEncryptionKey_Request message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CCloud_GetClientEncryptionKey_Request
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CCloud_GetClientEncryptionKey_Request} CCloud_GetClientEncryptionKey_Request
         */
        CCloud_GetClientEncryptionKey_Request.fromObject = function fromObject(object) {
            if (object instanceof $root.CCloud_GetClientEncryptionKey_Request)
                return object;
            return new $root.CCloud_GetClientEncryptionKey_Request();
        };
    
        /**
         * Creates a plain object from a CCloud_GetClientEncryptionKey_Request message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CCloud_GetClientEncryptionKey_Request
         * @static
         * @param {CCloud_GetClientEncryptionKey_Request} message CCloud_GetClientEncryptionKey_Request
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CCloud_GetClientEncryptionKey_Request.toObject = function toObject() {
            return {};
        };
    
        /**
         * Converts this CCloud_GetClientEncryptionKey_Request to JSON.
         * @function toJSON
         * @memberof CCloud_GetClientEncryptionKey_Request
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CCloud_GetClientEncryptionKey_Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CCloud_GetClientEncryptionKey_Request;
    })();
    
    $root.CCloud_GetClientEncryptionKey_Response = (function() {
    
        /**
         * Properties of a CCloud_GetClientEncryptionKey_Response.
         * @exports ICCloud_GetClientEncryptionKey_Response
         * @interface ICCloud_GetClientEncryptionKey_Response
         * @property {Uint8Array|null} [key] CCloud_GetClientEncryptionKey_Response key
         * @property {number|null} [crc] CCloud_GetClientEncryptionKey_Response crc
         */
    
        /**
         * Constructs a new CCloud_GetClientEncryptionKey_Response.
         * @exports CCloud_GetClientEncryptionKey_Response
         * @classdesc Represents a CCloud_GetClientEncryptionKey_Response.
         * @implements ICCloud_GetClientEncryptionKey_Response
         * @constructor
         * @param {ICCloud_GetClientEncryptionKey_Response=} [properties] Properties to set
         */
        function CCloud_GetClientEncryptionKey_Response(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CCloud_GetClientEncryptionKey_Response key.
         * @member {Uint8Array} key
         * @memberof CCloud_GetClientEncryptionKey_Response
         * @instance
         */
        CCloud_GetClientEncryptionKey_Response.prototype.key = $util.newBuffer([]);
    
        /**
         * CCloud_GetClientEncryptionKey_Response crc.
         * @member {number} crc
         * @memberof CCloud_GetClientEncryptionKey_Response
         * @instance
         */
        CCloud_GetClientEncryptionKey_Response.prototype.crc = 0;
    
        /**
         * Creates a new CCloud_GetClientEncryptionKey_Response instance using the specified properties.
         * @function create
         * @memberof CCloud_GetClientEncryptionKey_Response
         * @static
         * @param {ICCloud_GetClientEncryptionKey_Response=} [properties] Properties to set
         * @returns {CCloud_GetClientEncryptionKey_Response} CCloud_GetClientEncryptionKey_Response instance
         */
        CCloud_GetClientEncryptionKey_Response.create = function create(properties) {
            return new CCloud_GetClientEncryptionKey_Response(properties);
        };
    
        /**
         * Encodes the specified CCloud_GetClientEncryptionKey_Response message. Does not implicitly {@link CCloud_GetClientEncryptionKey_Response.verify|verify} messages.
         * @function encode
         * @memberof CCloud_GetClientEncryptionKey_Response
         * @static
         * @param {ICCloud_GetClientEncryptionKey_Response} message CCloud_GetClientEncryptionKey_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_GetClientEncryptionKey_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.key != null && message.hasOwnProperty("key"))
                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.key);
            if (message.crc != null && message.hasOwnProperty("crc"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.crc);
            return writer;
        };
    
        /**
         * Encodes the specified CCloud_GetClientEncryptionKey_Response message, length delimited. Does not implicitly {@link CCloud_GetClientEncryptionKey_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CCloud_GetClientEncryptionKey_Response
         * @static
         * @param {ICCloud_GetClientEncryptionKey_Response} message CCloud_GetClientEncryptionKey_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_GetClientEncryptionKey_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CCloud_GetClientEncryptionKey_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CCloud_GetClientEncryptionKey_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CCloud_GetClientEncryptionKey_Response} CCloud_GetClientEncryptionKey_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_GetClientEncryptionKey_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CCloud_GetClientEncryptionKey_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.key = reader.bytes();
                    break;
                case 2:
                    message.crc = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CCloud_GetClientEncryptionKey_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CCloud_GetClientEncryptionKey_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CCloud_GetClientEncryptionKey_Response} CCloud_GetClientEncryptionKey_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_GetClientEncryptionKey_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CCloud_GetClientEncryptionKey_Response message.
         * @function verify
         * @memberof CCloud_GetClientEncryptionKey_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CCloud_GetClientEncryptionKey_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.key != null && message.hasOwnProperty("key"))
                if (!(message.key && typeof message.key.length === "number" || $util.isString(message.key)))
                    return "key: buffer expected";
            if (message.crc != null && message.hasOwnProperty("crc"))
                if (!$util.isInteger(message.crc))
                    return "crc: integer expected";
            return null;
        };
    
        /**
         * Creates a CCloud_GetClientEncryptionKey_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CCloud_GetClientEncryptionKey_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CCloud_GetClientEncryptionKey_Response} CCloud_GetClientEncryptionKey_Response
         */
        CCloud_GetClientEncryptionKey_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CCloud_GetClientEncryptionKey_Response)
                return object;
            var message = new $root.CCloud_GetClientEncryptionKey_Response();
            if (object.key != null)
                if (typeof object.key === "string")
                    $util.base64.decode(object.key, message.key = $util.newBuffer($util.base64.length(object.key)), 0);
                else if (object.key.length)
                    message.key = object.key;
            if (object.crc != null)
                message.crc = object.crc | 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CCloud_GetClientEncryptionKey_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CCloud_GetClientEncryptionKey_Response
         * @static
         * @param {CCloud_GetClientEncryptionKey_Response} message CCloud_GetClientEncryptionKey_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CCloud_GetClientEncryptionKey_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if (options.bytes === String)
                    object.key = "";
                else {
                    object.key = [];
                    if (options.bytes !== Array)
                        object.key = $util.newBuffer(object.key);
                }
                object.crc = 0;
            }
            if (message.key != null && message.hasOwnProperty("key"))
                object.key = options.bytes === String ? $util.base64.encode(message.key, 0, message.key.length) : options.bytes === Array ? Array.prototype.slice.call(message.key) : message.key;
            if (message.crc != null && message.hasOwnProperty("crc"))
                object.crc = message.crc;
            return object;
        };
    
        /**
         * Converts this CCloud_GetClientEncryptionKey_Response to JSON.
         * @function toJSON
         * @memberof CCloud_GetClientEncryptionKey_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CCloud_GetClientEncryptionKey_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CCloud_GetClientEncryptionKey_Response;
    })();
    
    $root.CCloud_CDNReport_Notification = (function() {
    
        /**
         * Properties of a CCloud_CDNReport_Notification.
         * @exports ICCloud_CDNReport_Notification
         * @interface ICCloud_CDNReport_Notification
         * @property {number|Long|null} [steamid] CCloud_CDNReport_Notification steamid
         * @property {string|null} [url] CCloud_CDNReport_Notification url
         * @property {boolean|null} [success] CCloud_CDNReport_Notification success
         * @property {number|null} [http_status_code] CCloud_CDNReport_Notification http_status_code
         * @property {number|Long|null} [expected_bytes] CCloud_CDNReport_Notification expected_bytes
         * @property {number|Long|null} [received_bytes] CCloud_CDNReport_Notification received_bytes
         * @property {number|null} [duration] CCloud_CDNReport_Notification duration
         */
    
        /**
         * Constructs a new CCloud_CDNReport_Notification.
         * @exports CCloud_CDNReport_Notification
         * @classdesc Represents a CCloud_CDNReport_Notification.
         * @implements ICCloud_CDNReport_Notification
         * @constructor
         * @param {ICCloud_CDNReport_Notification=} [properties] Properties to set
         */
        function CCloud_CDNReport_Notification(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CCloud_CDNReport_Notification steamid.
         * @member {number|Long} steamid
         * @memberof CCloud_CDNReport_Notification
         * @instance
         */
        CCloud_CDNReport_Notification.prototype.steamid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CCloud_CDNReport_Notification url.
         * @member {string} url
         * @memberof CCloud_CDNReport_Notification
         * @instance
         */
        CCloud_CDNReport_Notification.prototype.url = "";
    
        /**
         * CCloud_CDNReport_Notification success.
         * @member {boolean} success
         * @memberof CCloud_CDNReport_Notification
         * @instance
         */
        CCloud_CDNReport_Notification.prototype.success = false;
    
        /**
         * CCloud_CDNReport_Notification http_status_code.
         * @member {number} http_status_code
         * @memberof CCloud_CDNReport_Notification
         * @instance
         */
        CCloud_CDNReport_Notification.prototype.http_status_code = 0;
    
        /**
         * CCloud_CDNReport_Notification expected_bytes.
         * @member {number|Long} expected_bytes
         * @memberof CCloud_CDNReport_Notification
         * @instance
         */
        CCloud_CDNReport_Notification.prototype.expected_bytes = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CCloud_CDNReport_Notification received_bytes.
         * @member {number|Long} received_bytes
         * @memberof CCloud_CDNReport_Notification
         * @instance
         */
        CCloud_CDNReport_Notification.prototype.received_bytes = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CCloud_CDNReport_Notification duration.
         * @member {number} duration
         * @memberof CCloud_CDNReport_Notification
         * @instance
         */
        CCloud_CDNReport_Notification.prototype.duration = 0;
    
        /**
         * Creates a new CCloud_CDNReport_Notification instance using the specified properties.
         * @function create
         * @memberof CCloud_CDNReport_Notification
         * @static
         * @param {ICCloud_CDNReport_Notification=} [properties] Properties to set
         * @returns {CCloud_CDNReport_Notification} CCloud_CDNReport_Notification instance
         */
        CCloud_CDNReport_Notification.create = function create(properties) {
            return new CCloud_CDNReport_Notification(properties);
        };
    
        /**
         * Encodes the specified CCloud_CDNReport_Notification message. Does not implicitly {@link CCloud_CDNReport_Notification.verify|verify} messages.
         * @function encode
         * @memberof CCloud_CDNReport_Notification
         * @static
         * @param {ICCloud_CDNReport_Notification} message CCloud_CDNReport_Notification message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_CDNReport_Notification.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.steamid);
            if (message.url != null && message.hasOwnProperty("url"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.url);
            if (message.success != null && message.hasOwnProperty("success"))
                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.success);
            if (message.http_status_code != null && message.hasOwnProperty("http_status_code"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.http_status_code);
            if (message.expected_bytes != null && message.hasOwnProperty("expected_bytes"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.expected_bytes);
            if (message.received_bytes != null && message.hasOwnProperty("received_bytes"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint64(message.received_bytes);
            if (message.duration != null && message.hasOwnProperty("duration"))
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.duration);
            return writer;
        };
    
        /**
         * Encodes the specified CCloud_CDNReport_Notification message, length delimited. Does not implicitly {@link CCloud_CDNReport_Notification.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CCloud_CDNReport_Notification
         * @static
         * @param {ICCloud_CDNReport_Notification} message CCloud_CDNReport_Notification message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_CDNReport_Notification.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CCloud_CDNReport_Notification message from the specified reader or buffer.
         * @function decode
         * @memberof CCloud_CDNReport_Notification
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CCloud_CDNReport_Notification} CCloud_CDNReport_Notification
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_CDNReport_Notification.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CCloud_CDNReport_Notification();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.steamid = reader.fixed64();
                    break;
                case 2:
                    message.url = reader.string();
                    break;
                case 3:
                    message.success = reader.bool();
                    break;
                case 4:
                    message.http_status_code = reader.uint32();
                    break;
                case 5:
                    message.expected_bytes = reader.uint64();
                    break;
                case 6:
                    message.received_bytes = reader.uint64();
                    break;
                case 7:
                    message.duration = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CCloud_CDNReport_Notification message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CCloud_CDNReport_Notification
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CCloud_CDNReport_Notification} CCloud_CDNReport_Notification
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_CDNReport_Notification.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CCloud_CDNReport_Notification message.
         * @function verify
         * @memberof CCloud_CDNReport_Notification
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CCloud_CDNReport_Notification.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                if (!$util.isInteger(message.steamid) && !(message.steamid && $util.isInteger(message.steamid.low) && $util.isInteger(message.steamid.high)))
                    return "steamid: integer|Long expected";
            if (message.url != null && message.hasOwnProperty("url"))
                if (!$util.isString(message.url))
                    return "url: string expected";
            if (message.success != null && message.hasOwnProperty("success"))
                if (typeof message.success !== "boolean")
                    return "success: boolean expected";
            if (message.http_status_code != null && message.hasOwnProperty("http_status_code"))
                if (!$util.isInteger(message.http_status_code))
                    return "http_status_code: integer expected";
            if (message.expected_bytes != null && message.hasOwnProperty("expected_bytes"))
                if (!$util.isInteger(message.expected_bytes) && !(message.expected_bytes && $util.isInteger(message.expected_bytes.low) && $util.isInteger(message.expected_bytes.high)))
                    return "expected_bytes: integer|Long expected";
            if (message.received_bytes != null && message.hasOwnProperty("received_bytes"))
                if (!$util.isInteger(message.received_bytes) && !(message.received_bytes && $util.isInteger(message.received_bytes.low) && $util.isInteger(message.received_bytes.high)))
                    return "received_bytes: integer|Long expected";
            if (message.duration != null && message.hasOwnProperty("duration"))
                if (!$util.isInteger(message.duration))
                    return "duration: integer expected";
            return null;
        };
    
        /**
         * Creates a CCloud_CDNReport_Notification message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CCloud_CDNReport_Notification
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CCloud_CDNReport_Notification} CCloud_CDNReport_Notification
         */
        CCloud_CDNReport_Notification.fromObject = function fromObject(object) {
            if (object instanceof $root.CCloud_CDNReport_Notification)
                return object;
            var message = new $root.CCloud_CDNReport_Notification();
            if (object.steamid != null)
                if ($util.Long)
                    (message.steamid = $util.Long.fromValue(object.steamid)).unsigned = false;
                else if (typeof object.steamid === "string")
                    message.steamid = parseInt(object.steamid, 10);
                else if (typeof object.steamid === "number")
                    message.steamid = object.steamid;
                else if (typeof object.steamid === "object")
                    message.steamid = new $util.LongBits(object.steamid.low >>> 0, object.steamid.high >>> 0).toNumber();
            if (object.url != null)
                message.url = String(object.url);
            if (object.success != null)
                message.success = Boolean(object.success);
            if (object.http_status_code != null)
                message.http_status_code = object.http_status_code >>> 0;
            if (object.expected_bytes != null)
                if ($util.Long)
                    (message.expected_bytes = $util.Long.fromValue(object.expected_bytes)).unsigned = true;
                else if (typeof object.expected_bytes === "string")
                    message.expected_bytes = parseInt(object.expected_bytes, 10);
                else if (typeof object.expected_bytes === "number")
                    message.expected_bytes = object.expected_bytes;
                else if (typeof object.expected_bytes === "object")
                    message.expected_bytes = new $util.LongBits(object.expected_bytes.low >>> 0, object.expected_bytes.high >>> 0).toNumber(true);
            if (object.received_bytes != null)
                if ($util.Long)
                    (message.received_bytes = $util.Long.fromValue(object.received_bytes)).unsigned = true;
                else if (typeof object.received_bytes === "string")
                    message.received_bytes = parseInt(object.received_bytes, 10);
                else if (typeof object.received_bytes === "number")
                    message.received_bytes = object.received_bytes;
                else if (typeof object.received_bytes === "object")
                    message.received_bytes = new $util.LongBits(object.received_bytes.low >>> 0, object.received_bytes.high >>> 0).toNumber(true);
            if (object.duration != null)
                message.duration = object.duration >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CCloud_CDNReport_Notification message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CCloud_CDNReport_Notification
         * @static
         * @param {CCloud_CDNReport_Notification} message CCloud_CDNReport_Notification
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CCloud_CDNReport_Notification.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.steamid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.steamid = options.longs === String ? "0" : 0;
                object.url = "";
                object.success = false;
                object.http_status_code = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.expected_bytes = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.expected_bytes = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.received_bytes = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.received_bytes = options.longs === String ? "0" : 0;
                object.duration = 0;
            }
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                if (typeof message.steamid === "number")
                    object.steamid = options.longs === String ? String(message.steamid) : message.steamid;
                else
                    object.steamid = options.longs === String ? $util.Long.prototype.toString.call(message.steamid) : options.longs === Number ? new $util.LongBits(message.steamid.low >>> 0, message.steamid.high >>> 0).toNumber() : message.steamid;
            if (message.url != null && message.hasOwnProperty("url"))
                object.url = message.url;
            if (message.success != null && message.hasOwnProperty("success"))
                object.success = message.success;
            if (message.http_status_code != null && message.hasOwnProperty("http_status_code"))
                object.http_status_code = message.http_status_code;
            if (message.expected_bytes != null && message.hasOwnProperty("expected_bytes"))
                if (typeof message.expected_bytes === "number")
                    object.expected_bytes = options.longs === String ? String(message.expected_bytes) : message.expected_bytes;
                else
                    object.expected_bytes = options.longs === String ? $util.Long.prototype.toString.call(message.expected_bytes) : options.longs === Number ? new $util.LongBits(message.expected_bytes.low >>> 0, message.expected_bytes.high >>> 0).toNumber(true) : message.expected_bytes;
            if (message.received_bytes != null && message.hasOwnProperty("received_bytes"))
                if (typeof message.received_bytes === "number")
                    object.received_bytes = options.longs === String ? String(message.received_bytes) : message.received_bytes;
                else
                    object.received_bytes = options.longs === String ? $util.Long.prototype.toString.call(message.received_bytes) : options.longs === Number ? new $util.LongBits(message.received_bytes.low >>> 0, message.received_bytes.high >>> 0).toNumber(true) : message.received_bytes;
            if (message.duration != null && message.hasOwnProperty("duration"))
                object.duration = message.duration;
            return object;
        };
    
        /**
         * Converts this CCloud_CDNReport_Notification to JSON.
         * @function toJSON
         * @memberof CCloud_CDNReport_Notification
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CCloud_CDNReport_Notification.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CCloud_CDNReport_Notification;
    })();
    
    $root.CCloud_ExternalStorageTransferReport_Notification = (function() {
    
        /**
         * Properties of a CCloud_ExternalStorageTransferReport_Notification.
         * @exports ICCloud_ExternalStorageTransferReport_Notification
         * @interface ICCloud_ExternalStorageTransferReport_Notification
         * @property {string|null} [host] CCloud_ExternalStorageTransferReport_Notification host
         * @property {string|null} [path] CCloud_ExternalStorageTransferReport_Notification path
         * @property {boolean|null} [is_upload] CCloud_ExternalStorageTransferReport_Notification is_upload
         * @property {boolean|null} [success] CCloud_ExternalStorageTransferReport_Notification success
         * @property {number|null} [http_status_code] CCloud_ExternalStorageTransferReport_Notification http_status_code
         * @property {number|Long|null} [bytes_expected] CCloud_ExternalStorageTransferReport_Notification bytes_expected
         * @property {number|Long|null} [bytes_actual] CCloud_ExternalStorageTransferReport_Notification bytes_actual
         * @property {number|null} [duration_ms] CCloud_ExternalStorageTransferReport_Notification duration_ms
         * @property {number|null} [cellid] CCloud_ExternalStorageTransferReport_Notification cellid
         * @property {boolean|null} [proxied] CCloud_ExternalStorageTransferReport_Notification proxied
         * @property {boolean|null} [ipv6_local] CCloud_ExternalStorageTransferReport_Notification ipv6_local
         * @property {boolean|null} [ipv6_remote] CCloud_ExternalStorageTransferReport_Notification ipv6_remote
         */
    
        /**
         * Constructs a new CCloud_ExternalStorageTransferReport_Notification.
         * @exports CCloud_ExternalStorageTransferReport_Notification
         * @classdesc Represents a CCloud_ExternalStorageTransferReport_Notification.
         * @implements ICCloud_ExternalStorageTransferReport_Notification
         * @constructor
         * @param {ICCloud_ExternalStorageTransferReport_Notification=} [properties] Properties to set
         */
        function CCloud_ExternalStorageTransferReport_Notification(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CCloud_ExternalStorageTransferReport_Notification host.
         * @member {string} host
         * @memberof CCloud_ExternalStorageTransferReport_Notification
         * @instance
         */
        CCloud_ExternalStorageTransferReport_Notification.prototype.host = "";
    
        /**
         * CCloud_ExternalStorageTransferReport_Notification path.
         * @member {string} path
         * @memberof CCloud_ExternalStorageTransferReport_Notification
         * @instance
         */
        CCloud_ExternalStorageTransferReport_Notification.prototype.path = "";
    
        /**
         * CCloud_ExternalStorageTransferReport_Notification is_upload.
         * @member {boolean} is_upload
         * @memberof CCloud_ExternalStorageTransferReport_Notification
         * @instance
         */
        CCloud_ExternalStorageTransferReport_Notification.prototype.is_upload = false;
    
        /**
         * CCloud_ExternalStorageTransferReport_Notification success.
         * @member {boolean} success
         * @memberof CCloud_ExternalStorageTransferReport_Notification
         * @instance
         */
        CCloud_ExternalStorageTransferReport_Notification.prototype.success = false;
    
        /**
         * CCloud_ExternalStorageTransferReport_Notification http_status_code.
         * @member {number} http_status_code
         * @memberof CCloud_ExternalStorageTransferReport_Notification
         * @instance
         */
        CCloud_ExternalStorageTransferReport_Notification.prototype.http_status_code = 0;
    
        /**
         * CCloud_ExternalStorageTransferReport_Notification bytes_expected.
         * @member {number|Long} bytes_expected
         * @memberof CCloud_ExternalStorageTransferReport_Notification
         * @instance
         */
        CCloud_ExternalStorageTransferReport_Notification.prototype.bytes_expected = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CCloud_ExternalStorageTransferReport_Notification bytes_actual.
         * @member {number|Long} bytes_actual
         * @memberof CCloud_ExternalStorageTransferReport_Notification
         * @instance
         */
        CCloud_ExternalStorageTransferReport_Notification.prototype.bytes_actual = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CCloud_ExternalStorageTransferReport_Notification duration_ms.
         * @member {number} duration_ms
         * @memberof CCloud_ExternalStorageTransferReport_Notification
         * @instance
         */
        CCloud_ExternalStorageTransferReport_Notification.prototype.duration_ms = 0;
    
        /**
         * CCloud_ExternalStorageTransferReport_Notification cellid.
         * @member {number} cellid
         * @memberof CCloud_ExternalStorageTransferReport_Notification
         * @instance
         */
        CCloud_ExternalStorageTransferReport_Notification.prototype.cellid = 0;
    
        /**
         * CCloud_ExternalStorageTransferReport_Notification proxied.
         * @member {boolean} proxied
         * @memberof CCloud_ExternalStorageTransferReport_Notification
         * @instance
         */
        CCloud_ExternalStorageTransferReport_Notification.prototype.proxied = false;
    
        /**
         * CCloud_ExternalStorageTransferReport_Notification ipv6_local.
         * @member {boolean} ipv6_local
         * @memberof CCloud_ExternalStorageTransferReport_Notification
         * @instance
         */
        CCloud_ExternalStorageTransferReport_Notification.prototype.ipv6_local = false;
    
        /**
         * CCloud_ExternalStorageTransferReport_Notification ipv6_remote.
         * @member {boolean} ipv6_remote
         * @memberof CCloud_ExternalStorageTransferReport_Notification
         * @instance
         */
        CCloud_ExternalStorageTransferReport_Notification.prototype.ipv6_remote = false;
    
        /**
         * Creates a new CCloud_ExternalStorageTransferReport_Notification instance using the specified properties.
         * @function create
         * @memberof CCloud_ExternalStorageTransferReport_Notification
         * @static
         * @param {ICCloud_ExternalStorageTransferReport_Notification=} [properties] Properties to set
         * @returns {CCloud_ExternalStorageTransferReport_Notification} CCloud_ExternalStorageTransferReport_Notification instance
         */
        CCloud_ExternalStorageTransferReport_Notification.create = function create(properties) {
            return new CCloud_ExternalStorageTransferReport_Notification(properties);
        };
    
        /**
         * Encodes the specified CCloud_ExternalStorageTransferReport_Notification message. Does not implicitly {@link CCloud_ExternalStorageTransferReport_Notification.verify|verify} messages.
         * @function encode
         * @memberof CCloud_ExternalStorageTransferReport_Notification
         * @static
         * @param {ICCloud_ExternalStorageTransferReport_Notification} message CCloud_ExternalStorageTransferReport_Notification message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_ExternalStorageTransferReport_Notification.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.host != null && message.hasOwnProperty("host"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.host);
            if (message.path != null && message.hasOwnProperty("path"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.path);
            if (message.is_upload != null && message.hasOwnProperty("is_upload"))
                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.is_upload);
            if (message.success != null && message.hasOwnProperty("success"))
                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.success);
            if (message.http_status_code != null && message.hasOwnProperty("http_status_code"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.http_status_code);
            if (message.bytes_expected != null && message.hasOwnProperty("bytes_expected"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint64(message.bytes_expected);
            if (message.bytes_actual != null && message.hasOwnProperty("bytes_actual"))
                writer.uint32(/* id 7, wireType 0 =*/56).uint64(message.bytes_actual);
            if (message.duration_ms != null && message.hasOwnProperty("duration_ms"))
                writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.duration_ms);
            if (message.cellid != null && message.hasOwnProperty("cellid"))
                writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.cellid);
            if (message.proxied != null && message.hasOwnProperty("proxied"))
                writer.uint32(/* id 10, wireType 0 =*/80).bool(message.proxied);
            if (message.ipv6_local != null && message.hasOwnProperty("ipv6_local"))
                writer.uint32(/* id 11, wireType 0 =*/88).bool(message.ipv6_local);
            if (message.ipv6_remote != null && message.hasOwnProperty("ipv6_remote"))
                writer.uint32(/* id 12, wireType 0 =*/96).bool(message.ipv6_remote);
            return writer;
        };
    
        /**
         * Encodes the specified CCloud_ExternalStorageTransferReport_Notification message, length delimited. Does not implicitly {@link CCloud_ExternalStorageTransferReport_Notification.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CCloud_ExternalStorageTransferReport_Notification
         * @static
         * @param {ICCloud_ExternalStorageTransferReport_Notification} message CCloud_ExternalStorageTransferReport_Notification message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_ExternalStorageTransferReport_Notification.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CCloud_ExternalStorageTransferReport_Notification message from the specified reader or buffer.
         * @function decode
         * @memberof CCloud_ExternalStorageTransferReport_Notification
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CCloud_ExternalStorageTransferReport_Notification} CCloud_ExternalStorageTransferReport_Notification
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_ExternalStorageTransferReport_Notification.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CCloud_ExternalStorageTransferReport_Notification();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.host = reader.string();
                    break;
                case 2:
                    message.path = reader.string();
                    break;
                case 3:
                    message.is_upload = reader.bool();
                    break;
                case 4:
                    message.success = reader.bool();
                    break;
                case 5:
                    message.http_status_code = reader.uint32();
                    break;
                case 6:
                    message.bytes_expected = reader.uint64();
                    break;
                case 7:
                    message.bytes_actual = reader.uint64();
                    break;
                case 8:
                    message.duration_ms = reader.uint32();
                    break;
                case 9:
                    message.cellid = reader.uint32();
                    break;
                case 10:
                    message.proxied = reader.bool();
                    break;
                case 11:
                    message.ipv6_local = reader.bool();
                    break;
                case 12:
                    message.ipv6_remote = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CCloud_ExternalStorageTransferReport_Notification message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CCloud_ExternalStorageTransferReport_Notification
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CCloud_ExternalStorageTransferReport_Notification} CCloud_ExternalStorageTransferReport_Notification
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_ExternalStorageTransferReport_Notification.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CCloud_ExternalStorageTransferReport_Notification message.
         * @function verify
         * @memberof CCloud_ExternalStorageTransferReport_Notification
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CCloud_ExternalStorageTransferReport_Notification.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.host != null && message.hasOwnProperty("host"))
                if (!$util.isString(message.host))
                    return "host: string expected";
            if (message.path != null && message.hasOwnProperty("path"))
                if (!$util.isString(message.path))
                    return "path: string expected";
            if (message.is_upload != null && message.hasOwnProperty("is_upload"))
                if (typeof message.is_upload !== "boolean")
                    return "is_upload: boolean expected";
            if (message.success != null && message.hasOwnProperty("success"))
                if (typeof message.success !== "boolean")
                    return "success: boolean expected";
            if (message.http_status_code != null && message.hasOwnProperty("http_status_code"))
                if (!$util.isInteger(message.http_status_code))
                    return "http_status_code: integer expected";
            if (message.bytes_expected != null && message.hasOwnProperty("bytes_expected"))
                if (!$util.isInteger(message.bytes_expected) && !(message.bytes_expected && $util.isInteger(message.bytes_expected.low) && $util.isInteger(message.bytes_expected.high)))
                    return "bytes_expected: integer|Long expected";
            if (message.bytes_actual != null && message.hasOwnProperty("bytes_actual"))
                if (!$util.isInteger(message.bytes_actual) && !(message.bytes_actual && $util.isInteger(message.bytes_actual.low) && $util.isInteger(message.bytes_actual.high)))
                    return "bytes_actual: integer|Long expected";
            if (message.duration_ms != null && message.hasOwnProperty("duration_ms"))
                if (!$util.isInteger(message.duration_ms))
                    return "duration_ms: integer expected";
            if (message.cellid != null && message.hasOwnProperty("cellid"))
                if (!$util.isInteger(message.cellid))
                    return "cellid: integer expected";
            if (message.proxied != null && message.hasOwnProperty("proxied"))
                if (typeof message.proxied !== "boolean")
                    return "proxied: boolean expected";
            if (message.ipv6_local != null && message.hasOwnProperty("ipv6_local"))
                if (typeof message.ipv6_local !== "boolean")
                    return "ipv6_local: boolean expected";
            if (message.ipv6_remote != null && message.hasOwnProperty("ipv6_remote"))
                if (typeof message.ipv6_remote !== "boolean")
                    return "ipv6_remote: boolean expected";
            return null;
        };
    
        /**
         * Creates a CCloud_ExternalStorageTransferReport_Notification message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CCloud_ExternalStorageTransferReport_Notification
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CCloud_ExternalStorageTransferReport_Notification} CCloud_ExternalStorageTransferReport_Notification
         */
        CCloud_ExternalStorageTransferReport_Notification.fromObject = function fromObject(object) {
            if (object instanceof $root.CCloud_ExternalStorageTransferReport_Notification)
                return object;
            var message = new $root.CCloud_ExternalStorageTransferReport_Notification();
            if (object.host != null)
                message.host = String(object.host);
            if (object.path != null)
                message.path = String(object.path);
            if (object.is_upload != null)
                message.is_upload = Boolean(object.is_upload);
            if (object.success != null)
                message.success = Boolean(object.success);
            if (object.http_status_code != null)
                message.http_status_code = object.http_status_code >>> 0;
            if (object.bytes_expected != null)
                if ($util.Long)
                    (message.bytes_expected = $util.Long.fromValue(object.bytes_expected)).unsigned = true;
                else if (typeof object.bytes_expected === "string")
                    message.bytes_expected = parseInt(object.bytes_expected, 10);
                else if (typeof object.bytes_expected === "number")
                    message.bytes_expected = object.bytes_expected;
                else if (typeof object.bytes_expected === "object")
                    message.bytes_expected = new $util.LongBits(object.bytes_expected.low >>> 0, object.bytes_expected.high >>> 0).toNumber(true);
            if (object.bytes_actual != null)
                if ($util.Long)
                    (message.bytes_actual = $util.Long.fromValue(object.bytes_actual)).unsigned = true;
                else if (typeof object.bytes_actual === "string")
                    message.bytes_actual = parseInt(object.bytes_actual, 10);
                else if (typeof object.bytes_actual === "number")
                    message.bytes_actual = object.bytes_actual;
                else if (typeof object.bytes_actual === "object")
                    message.bytes_actual = new $util.LongBits(object.bytes_actual.low >>> 0, object.bytes_actual.high >>> 0).toNumber(true);
            if (object.duration_ms != null)
                message.duration_ms = object.duration_ms >>> 0;
            if (object.cellid != null)
                message.cellid = object.cellid >>> 0;
            if (object.proxied != null)
                message.proxied = Boolean(object.proxied);
            if (object.ipv6_local != null)
                message.ipv6_local = Boolean(object.ipv6_local);
            if (object.ipv6_remote != null)
                message.ipv6_remote = Boolean(object.ipv6_remote);
            return message;
        };
    
        /**
         * Creates a plain object from a CCloud_ExternalStorageTransferReport_Notification message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CCloud_ExternalStorageTransferReport_Notification
         * @static
         * @param {CCloud_ExternalStorageTransferReport_Notification} message CCloud_ExternalStorageTransferReport_Notification
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CCloud_ExternalStorageTransferReport_Notification.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.host = "";
                object.path = "";
                object.is_upload = false;
                object.success = false;
                object.http_status_code = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.bytes_expected = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.bytes_expected = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.bytes_actual = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.bytes_actual = options.longs === String ? "0" : 0;
                object.duration_ms = 0;
                object.cellid = 0;
                object.proxied = false;
                object.ipv6_local = false;
                object.ipv6_remote = false;
            }
            if (message.host != null && message.hasOwnProperty("host"))
                object.host = message.host;
            if (message.path != null && message.hasOwnProperty("path"))
                object.path = message.path;
            if (message.is_upload != null && message.hasOwnProperty("is_upload"))
                object.is_upload = message.is_upload;
            if (message.success != null && message.hasOwnProperty("success"))
                object.success = message.success;
            if (message.http_status_code != null && message.hasOwnProperty("http_status_code"))
                object.http_status_code = message.http_status_code;
            if (message.bytes_expected != null && message.hasOwnProperty("bytes_expected"))
                if (typeof message.bytes_expected === "number")
                    object.bytes_expected = options.longs === String ? String(message.bytes_expected) : message.bytes_expected;
                else
                    object.bytes_expected = options.longs === String ? $util.Long.prototype.toString.call(message.bytes_expected) : options.longs === Number ? new $util.LongBits(message.bytes_expected.low >>> 0, message.bytes_expected.high >>> 0).toNumber(true) : message.bytes_expected;
            if (message.bytes_actual != null && message.hasOwnProperty("bytes_actual"))
                if (typeof message.bytes_actual === "number")
                    object.bytes_actual = options.longs === String ? String(message.bytes_actual) : message.bytes_actual;
                else
                    object.bytes_actual = options.longs === String ? $util.Long.prototype.toString.call(message.bytes_actual) : options.longs === Number ? new $util.LongBits(message.bytes_actual.low >>> 0, message.bytes_actual.high >>> 0).toNumber(true) : message.bytes_actual;
            if (message.duration_ms != null && message.hasOwnProperty("duration_ms"))
                object.duration_ms = message.duration_ms;
            if (message.cellid != null && message.hasOwnProperty("cellid"))
                object.cellid = message.cellid;
            if (message.proxied != null && message.hasOwnProperty("proxied"))
                object.proxied = message.proxied;
            if (message.ipv6_local != null && message.hasOwnProperty("ipv6_local"))
                object.ipv6_local = message.ipv6_local;
            if (message.ipv6_remote != null && message.hasOwnProperty("ipv6_remote"))
                object.ipv6_remote = message.ipv6_remote;
            return object;
        };
    
        /**
         * Converts this CCloud_ExternalStorageTransferReport_Notification to JSON.
         * @function toJSON
         * @memberof CCloud_ExternalStorageTransferReport_Notification
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CCloud_ExternalStorageTransferReport_Notification.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CCloud_ExternalStorageTransferReport_Notification;
    })();
    
    $root.CCloud_BeginAppUploadBatch_Request = (function() {
    
        /**
         * Properties of a CCloud_BeginAppUploadBatch_Request.
         * @exports ICCloud_BeginAppUploadBatch_Request
         * @interface ICCloud_BeginAppUploadBatch_Request
         * @property {number|null} [appid] CCloud_BeginAppUploadBatch_Request appid
         * @property {string|null} [machine_name] CCloud_BeginAppUploadBatch_Request machine_name
         * @property {Array.<string>|null} [files_to_upload] CCloud_BeginAppUploadBatch_Request files_to_upload
         * @property {Array.<string>|null} [files_to_delete] CCloud_BeginAppUploadBatch_Request files_to_delete
         * @property {number|Long|null} [client_id] CCloud_BeginAppUploadBatch_Request client_id
         */
    
        /**
         * Constructs a new CCloud_BeginAppUploadBatch_Request.
         * @exports CCloud_BeginAppUploadBatch_Request
         * @classdesc Represents a CCloud_BeginAppUploadBatch_Request.
         * @implements ICCloud_BeginAppUploadBatch_Request
         * @constructor
         * @param {ICCloud_BeginAppUploadBatch_Request=} [properties] Properties to set
         */
        function CCloud_BeginAppUploadBatch_Request(properties) {
            this.files_to_upload = [];
            this.files_to_delete = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CCloud_BeginAppUploadBatch_Request appid.
         * @member {number} appid
         * @memberof CCloud_BeginAppUploadBatch_Request
         * @instance
         */
        CCloud_BeginAppUploadBatch_Request.prototype.appid = 0;
    
        /**
         * CCloud_BeginAppUploadBatch_Request machine_name.
         * @member {string} machine_name
         * @memberof CCloud_BeginAppUploadBatch_Request
         * @instance
         */
        CCloud_BeginAppUploadBatch_Request.prototype.machine_name = "";
    
        /**
         * CCloud_BeginAppUploadBatch_Request files_to_upload.
         * @member {Array.<string>} files_to_upload
         * @memberof CCloud_BeginAppUploadBatch_Request
         * @instance
         */
        CCloud_BeginAppUploadBatch_Request.prototype.files_to_upload = $util.emptyArray;
    
        /**
         * CCloud_BeginAppUploadBatch_Request files_to_delete.
         * @member {Array.<string>} files_to_delete
         * @memberof CCloud_BeginAppUploadBatch_Request
         * @instance
         */
        CCloud_BeginAppUploadBatch_Request.prototype.files_to_delete = $util.emptyArray;
    
        /**
         * CCloud_BeginAppUploadBatch_Request client_id.
         * @member {number|Long} client_id
         * @memberof CCloud_BeginAppUploadBatch_Request
         * @instance
         */
        CCloud_BeginAppUploadBatch_Request.prototype.client_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * Creates a new CCloud_BeginAppUploadBatch_Request instance using the specified properties.
         * @function create
         * @memberof CCloud_BeginAppUploadBatch_Request
         * @static
         * @param {ICCloud_BeginAppUploadBatch_Request=} [properties] Properties to set
         * @returns {CCloud_BeginAppUploadBatch_Request} CCloud_BeginAppUploadBatch_Request instance
         */
        CCloud_BeginAppUploadBatch_Request.create = function create(properties) {
            return new CCloud_BeginAppUploadBatch_Request(properties);
        };
    
        /**
         * Encodes the specified CCloud_BeginAppUploadBatch_Request message. Does not implicitly {@link CCloud_BeginAppUploadBatch_Request.verify|verify} messages.
         * @function encode
         * @memberof CCloud_BeginAppUploadBatch_Request
         * @static
         * @param {ICCloud_BeginAppUploadBatch_Request} message CCloud_BeginAppUploadBatch_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_BeginAppUploadBatch_Request.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.appid != null && message.hasOwnProperty("appid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.appid);
            if (message.machine_name != null && message.hasOwnProperty("machine_name"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.machine_name);
            if (message.files_to_upload != null && message.files_to_upload.length)
                for (var i = 0; i < message.files_to_upload.length; ++i)
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.files_to_upload[i]);
            if (message.files_to_delete != null && message.files_to_delete.length)
                for (var i = 0; i < message.files_to_delete.length; ++i)
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.files_to_delete[i]);
            if (message.client_id != null && message.hasOwnProperty("client_id"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.client_id);
            return writer;
        };
    
        /**
         * Encodes the specified CCloud_BeginAppUploadBatch_Request message, length delimited. Does not implicitly {@link CCloud_BeginAppUploadBatch_Request.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CCloud_BeginAppUploadBatch_Request
         * @static
         * @param {ICCloud_BeginAppUploadBatch_Request} message CCloud_BeginAppUploadBatch_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_BeginAppUploadBatch_Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CCloud_BeginAppUploadBatch_Request message from the specified reader or buffer.
         * @function decode
         * @memberof CCloud_BeginAppUploadBatch_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CCloud_BeginAppUploadBatch_Request} CCloud_BeginAppUploadBatch_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_BeginAppUploadBatch_Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CCloud_BeginAppUploadBatch_Request();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.appid = reader.uint32();
                    break;
                case 2:
                    message.machine_name = reader.string();
                    break;
                case 3:
                    if (!(message.files_to_upload && message.files_to_upload.length))
                        message.files_to_upload = [];
                    message.files_to_upload.push(reader.string());
                    break;
                case 4:
                    if (!(message.files_to_delete && message.files_to_delete.length))
                        message.files_to_delete = [];
                    message.files_to_delete.push(reader.string());
                    break;
                case 5:
                    message.client_id = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CCloud_BeginAppUploadBatch_Request message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CCloud_BeginAppUploadBatch_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CCloud_BeginAppUploadBatch_Request} CCloud_BeginAppUploadBatch_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_BeginAppUploadBatch_Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CCloud_BeginAppUploadBatch_Request message.
         * @function verify
         * @memberof CCloud_BeginAppUploadBatch_Request
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CCloud_BeginAppUploadBatch_Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.appid != null && message.hasOwnProperty("appid"))
                if (!$util.isInteger(message.appid))
                    return "appid: integer expected";
            if (message.machine_name != null && message.hasOwnProperty("machine_name"))
                if (!$util.isString(message.machine_name))
                    return "machine_name: string expected";
            if (message.files_to_upload != null && message.hasOwnProperty("files_to_upload")) {
                if (!Array.isArray(message.files_to_upload))
                    return "files_to_upload: array expected";
                for (var i = 0; i < message.files_to_upload.length; ++i)
                    if (!$util.isString(message.files_to_upload[i]))
                        return "files_to_upload: string[] expected";
            }
            if (message.files_to_delete != null && message.hasOwnProperty("files_to_delete")) {
                if (!Array.isArray(message.files_to_delete))
                    return "files_to_delete: array expected";
                for (var i = 0; i < message.files_to_delete.length; ++i)
                    if (!$util.isString(message.files_to_delete[i]))
                        return "files_to_delete: string[] expected";
            }
            if (message.client_id != null && message.hasOwnProperty("client_id"))
                if (!$util.isInteger(message.client_id) && !(message.client_id && $util.isInteger(message.client_id.low) && $util.isInteger(message.client_id.high)))
                    return "client_id: integer|Long expected";
            return null;
        };
    
        /**
         * Creates a CCloud_BeginAppUploadBatch_Request message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CCloud_BeginAppUploadBatch_Request
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CCloud_BeginAppUploadBatch_Request} CCloud_BeginAppUploadBatch_Request
         */
        CCloud_BeginAppUploadBatch_Request.fromObject = function fromObject(object) {
            if (object instanceof $root.CCloud_BeginAppUploadBatch_Request)
                return object;
            var message = new $root.CCloud_BeginAppUploadBatch_Request();
            if (object.appid != null)
                message.appid = object.appid >>> 0;
            if (object.machine_name != null)
                message.machine_name = String(object.machine_name);
            if (object.files_to_upload) {
                if (!Array.isArray(object.files_to_upload))
                    throw TypeError(".CCloud_BeginAppUploadBatch_Request.files_to_upload: array expected");
                message.files_to_upload = [];
                for (var i = 0; i < object.files_to_upload.length; ++i)
                    message.files_to_upload[i] = String(object.files_to_upload[i]);
            }
            if (object.files_to_delete) {
                if (!Array.isArray(object.files_to_delete))
                    throw TypeError(".CCloud_BeginAppUploadBatch_Request.files_to_delete: array expected");
                message.files_to_delete = [];
                for (var i = 0; i < object.files_to_delete.length; ++i)
                    message.files_to_delete[i] = String(object.files_to_delete[i]);
            }
            if (object.client_id != null)
                if ($util.Long)
                    (message.client_id = $util.Long.fromValue(object.client_id)).unsigned = true;
                else if (typeof object.client_id === "string")
                    message.client_id = parseInt(object.client_id, 10);
                else if (typeof object.client_id === "number")
                    message.client_id = object.client_id;
                else if (typeof object.client_id === "object")
                    message.client_id = new $util.LongBits(object.client_id.low >>> 0, object.client_id.high >>> 0).toNumber(true);
            return message;
        };
    
        /**
         * Creates a plain object from a CCloud_BeginAppUploadBatch_Request message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CCloud_BeginAppUploadBatch_Request
         * @static
         * @param {CCloud_BeginAppUploadBatch_Request} message CCloud_BeginAppUploadBatch_Request
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CCloud_BeginAppUploadBatch_Request.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.files_to_upload = [];
                object.files_to_delete = [];
            }
            if (options.defaults) {
                object.appid = 0;
                object.machine_name = "";
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.client_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.client_id = options.longs === String ? "0" : 0;
            }
            if (message.appid != null && message.hasOwnProperty("appid"))
                object.appid = message.appid;
            if (message.machine_name != null && message.hasOwnProperty("machine_name"))
                object.machine_name = message.machine_name;
            if (message.files_to_upload && message.files_to_upload.length) {
                object.files_to_upload = [];
                for (var j = 0; j < message.files_to_upload.length; ++j)
                    object.files_to_upload[j] = message.files_to_upload[j];
            }
            if (message.files_to_delete && message.files_to_delete.length) {
                object.files_to_delete = [];
                for (var j = 0; j < message.files_to_delete.length; ++j)
                    object.files_to_delete[j] = message.files_to_delete[j];
            }
            if (message.client_id != null && message.hasOwnProperty("client_id"))
                if (typeof message.client_id === "number")
                    object.client_id = options.longs === String ? String(message.client_id) : message.client_id;
                else
                    object.client_id = options.longs === String ? $util.Long.prototype.toString.call(message.client_id) : options.longs === Number ? new $util.LongBits(message.client_id.low >>> 0, message.client_id.high >>> 0).toNumber(true) : message.client_id;
            return object;
        };
    
        /**
         * Converts this CCloud_BeginAppUploadBatch_Request to JSON.
         * @function toJSON
         * @memberof CCloud_BeginAppUploadBatch_Request
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CCloud_BeginAppUploadBatch_Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CCloud_BeginAppUploadBatch_Request;
    })();
    
    $root.CCloud_BeginAppUploadBatch_Response = (function() {
    
        /**
         * Properties of a CCloud_BeginAppUploadBatch_Response.
         * @exports ICCloud_BeginAppUploadBatch_Response
         * @interface ICCloud_BeginAppUploadBatch_Response
         * @property {number|Long|null} [batch_id] CCloud_BeginAppUploadBatch_Response batch_id
         * @property {number|Long|null} [app_change_number] CCloud_BeginAppUploadBatch_Response app_change_number
         */
    
        /**
         * Constructs a new CCloud_BeginAppUploadBatch_Response.
         * @exports CCloud_BeginAppUploadBatch_Response
         * @classdesc Represents a CCloud_BeginAppUploadBatch_Response.
         * @implements ICCloud_BeginAppUploadBatch_Response
         * @constructor
         * @param {ICCloud_BeginAppUploadBatch_Response=} [properties] Properties to set
         */
        function CCloud_BeginAppUploadBatch_Response(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CCloud_BeginAppUploadBatch_Response batch_id.
         * @member {number|Long} batch_id
         * @memberof CCloud_BeginAppUploadBatch_Response
         * @instance
         */
        CCloud_BeginAppUploadBatch_Response.prototype.batch_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CCloud_BeginAppUploadBatch_Response app_change_number.
         * @member {number|Long} app_change_number
         * @memberof CCloud_BeginAppUploadBatch_Response
         * @instance
         */
        CCloud_BeginAppUploadBatch_Response.prototype.app_change_number = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * Creates a new CCloud_BeginAppUploadBatch_Response instance using the specified properties.
         * @function create
         * @memberof CCloud_BeginAppUploadBatch_Response
         * @static
         * @param {ICCloud_BeginAppUploadBatch_Response=} [properties] Properties to set
         * @returns {CCloud_BeginAppUploadBatch_Response} CCloud_BeginAppUploadBatch_Response instance
         */
        CCloud_BeginAppUploadBatch_Response.create = function create(properties) {
            return new CCloud_BeginAppUploadBatch_Response(properties);
        };
    
        /**
         * Encodes the specified CCloud_BeginAppUploadBatch_Response message. Does not implicitly {@link CCloud_BeginAppUploadBatch_Response.verify|verify} messages.
         * @function encode
         * @memberof CCloud_BeginAppUploadBatch_Response
         * @static
         * @param {ICCloud_BeginAppUploadBatch_Response} message CCloud_BeginAppUploadBatch_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_BeginAppUploadBatch_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.batch_id != null && message.hasOwnProperty("batch_id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.batch_id);
            if (message.app_change_number != null && message.hasOwnProperty("app_change_number"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.app_change_number);
            return writer;
        };
    
        /**
         * Encodes the specified CCloud_BeginAppUploadBatch_Response message, length delimited. Does not implicitly {@link CCloud_BeginAppUploadBatch_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CCloud_BeginAppUploadBatch_Response
         * @static
         * @param {ICCloud_BeginAppUploadBatch_Response} message CCloud_BeginAppUploadBatch_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_BeginAppUploadBatch_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CCloud_BeginAppUploadBatch_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CCloud_BeginAppUploadBatch_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CCloud_BeginAppUploadBatch_Response} CCloud_BeginAppUploadBatch_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_BeginAppUploadBatch_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CCloud_BeginAppUploadBatch_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.batch_id = reader.uint64();
                    break;
                case 4:
                    message.app_change_number = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CCloud_BeginAppUploadBatch_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CCloud_BeginAppUploadBatch_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CCloud_BeginAppUploadBatch_Response} CCloud_BeginAppUploadBatch_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_BeginAppUploadBatch_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CCloud_BeginAppUploadBatch_Response message.
         * @function verify
         * @memberof CCloud_BeginAppUploadBatch_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CCloud_BeginAppUploadBatch_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.batch_id != null && message.hasOwnProperty("batch_id"))
                if (!$util.isInteger(message.batch_id) && !(message.batch_id && $util.isInteger(message.batch_id.low) && $util.isInteger(message.batch_id.high)))
                    return "batch_id: integer|Long expected";
            if (message.app_change_number != null && message.hasOwnProperty("app_change_number"))
                if (!$util.isInteger(message.app_change_number) && !(message.app_change_number && $util.isInteger(message.app_change_number.low) && $util.isInteger(message.app_change_number.high)))
                    return "app_change_number: integer|Long expected";
            return null;
        };
    
        /**
         * Creates a CCloud_BeginAppUploadBatch_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CCloud_BeginAppUploadBatch_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CCloud_BeginAppUploadBatch_Response} CCloud_BeginAppUploadBatch_Response
         */
        CCloud_BeginAppUploadBatch_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CCloud_BeginAppUploadBatch_Response)
                return object;
            var message = new $root.CCloud_BeginAppUploadBatch_Response();
            if (object.batch_id != null)
                if ($util.Long)
                    (message.batch_id = $util.Long.fromValue(object.batch_id)).unsigned = true;
                else if (typeof object.batch_id === "string")
                    message.batch_id = parseInt(object.batch_id, 10);
                else if (typeof object.batch_id === "number")
                    message.batch_id = object.batch_id;
                else if (typeof object.batch_id === "object")
                    message.batch_id = new $util.LongBits(object.batch_id.low >>> 0, object.batch_id.high >>> 0).toNumber(true);
            if (object.app_change_number != null)
                if ($util.Long)
                    (message.app_change_number = $util.Long.fromValue(object.app_change_number)).unsigned = true;
                else if (typeof object.app_change_number === "string")
                    message.app_change_number = parseInt(object.app_change_number, 10);
                else if (typeof object.app_change_number === "number")
                    message.app_change_number = object.app_change_number;
                else if (typeof object.app_change_number === "object")
                    message.app_change_number = new $util.LongBits(object.app_change_number.low >>> 0, object.app_change_number.high >>> 0).toNumber(true);
            return message;
        };
    
        /**
         * Creates a plain object from a CCloud_BeginAppUploadBatch_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CCloud_BeginAppUploadBatch_Response
         * @static
         * @param {CCloud_BeginAppUploadBatch_Response} message CCloud_BeginAppUploadBatch_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CCloud_BeginAppUploadBatch_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.batch_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.batch_id = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.app_change_number = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.app_change_number = options.longs === String ? "0" : 0;
            }
            if (message.batch_id != null && message.hasOwnProperty("batch_id"))
                if (typeof message.batch_id === "number")
                    object.batch_id = options.longs === String ? String(message.batch_id) : message.batch_id;
                else
                    object.batch_id = options.longs === String ? $util.Long.prototype.toString.call(message.batch_id) : options.longs === Number ? new $util.LongBits(message.batch_id.low >>> 0, message.batch_id.high >>> 0).toNumber(true) : message.batch_id;
            if (message.app_change_number != null && message.hasOwnProperty("app_change_number"))
                if (typeof message.app_change_number === "number")
                    object.app_change_number = options.longs === String ? String(message.app_change_number) : message.app_change_number;
                else
                    object.app_change_number = options.longs === String ? $util.Long.prototype.toString.call(message.app_change_number) : options.longs === Number ? new $util.LongBits(message.app_change_number.low >>> 0, message.app_change_number.high >>> 0).toNumber(true) : message.app_change_number;
            return object;
        };
    
        /**
         * Converts this CCloud_BeginAppUploadBatch_Response to JSON.
         * @function toJSON
         * @memberof CCloud_BeginAppUploadBatch_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CCloud_BeginAppUploadBatch_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CCloud_BeginAppUploadBatch_Response;
    })();
    
    $root.CCloud_CompleteAppUploadBatch_Notification = (function() {
    
        /**
         * Properties of a CCloud_CompleteAppUploadBatch_Notification.
         * @exports ICCloud_CompleteAppUploadBatch_Notification
         * @interface ICCloud_CompleteAppUploadBatch_Notification
         * @property {number|null} [appid] CCloud_CompleteAppUploadBatch_Notification appid
         * @property {number|Long|null} [batch_id] CCloud_CompleteAppUploadBatch_Notification batch_id
         * @property {number|null} [batch_eresult] CCloud_CompleteAppUploadBatch_Notification batch_eresult
         */
    
        /**
         * Constructs a new CCloud_CompleteAppUploadBatch_Notification.
         * @exports CCloud_CompleteAppUploadBatch_Notification
         * @classdesc Represents a CCloud_CompleteAppUploadBatch_Notification.
         * @implements ICCloud_CompleteAppUploadBatch_Notification
         * @constructor
         * @param {ICCloud_CompleteAppUploadBatch_Notification=} [properties] Properties to set
         */
        function CCloud_CompleteAppUploadBatch_Notification(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CCloud_CompleteAppUploadBatch_Notification appid.
         * @member {number} appid
         * @memberof CCloud_CompleteAppUploadBatch_Notification
         * @instance
         */
        CCloud_CompleteAppUploadBatch_Notification.prototype.appid = 0;
    
        /**
         * CCloud_CompleteAppUploadBatch_Notification batch_id.
         * @member {number|Long} batch_id
         * @memberof CCloud_CompleteAppUploadBatch_Notification
         * @instance
         */
        CCloud_CompleteAppUploadBatch_Notification.prototype.batch_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CCloud_CompleteAppUploadBatch_Notification batch_eresult.
         * @member {number} batch_eresult
         * @memberof CCloud_CompleteAppUploadBatch_Notification
         * @instance
         */
        CCloud_CompleteAppUploadBatch_Notification.prototype.batch_eresult = 0;
    
        /**
         * Creates a new CCloud_CompleteAppUploadBatch_Notification instance using the specified properties.
         * @function create
         * @memberof CCloud_CompleteAppUploadBatch_Notification
         * @static
         * @param {ICCloud_CompleteAppUploadBatch_Notification=} [properties] Properties to set
         * @returns {CCloud_CompleteAppUploadBatch_Notification} CCloud_CompleteAppUploadBatch_Notification instance
         */
        CCloud_CompleteAppUploadBatch_Notification.create = function create(properties) {
            return new CCloud_CompleteAppUploadBatch_Notification(properties);
        };
    
        /**
         * Encodes the specified CCloud_CompleteAppUploadBatch_Notification message. Does not implicitly {@link CCloud_CompleteAppUploadBatch_Notification.verify|verify} messages.
         * @function encode
         * @memberof CCloud_CompleteAppUploadBatch_Notification
         * @static
         * @param {ICCloud_CompleteAppUploadBatch_Notification} message CCloud_CompleteAppUploadBatch_Notification message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_CompleteAppUploadBatch_Notification.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.appid != null && message.hasOwnProperty("appid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.appid);
            if (message.batch_id != null && message.hasOwnProperty("batch_id"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.batch_id);
            if (message.batch_eresult != null && message.hasOwnProperty("batch_eresult"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.batch_eresult);
            return writer;
        };
    
        /**
         * Encodes the specified CCloud_CompleteAppUploadBatch_Notification message, length delimited. Does not implicitly {@link CCloud_CompleteAppUploadBatch_Notification.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CCloud_CompleteAppUploadBatch_Notification
         * @static
         * @param {ICCloud_CompleteAppUploadBatch_Notification} message CCloud_CompleteAppUploadBatch_Notification message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_CompleteAppUploadBatch_Notification.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CCloud_CompleteAppUploadBatch_Notification message from the specified reader or buffer.
         * @function decode
         * @memberof CCloud_CompleteAppUploadBatch_Notification
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CCloud_CompleteAppUploadBatch_Notification} CCloud_CompleteAppUploadBatch_Notification
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_CompleteAppUploadBatch_Notification.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CCloud_CompleteAppUploadBatch_Notification();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.appid = reader.uint32();
                    break;
                case 2:
                    message.batch_id = reader.uint64();
                    break;
                case 3:
                    message.batch_eresult = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CCloud_CompleteAppUploadBatch_Notification message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CCloud_CompleteAppUploadBatch_Notification
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CCloud_CompleteAppUploadBatch_Notification} CCloud_CompleteAppUploadBatch_Notification
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_CompleteAppUploadBatch_Notification.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CCloud_CompleteAppUploadBatch_Notification message.
         * @function verify
         * @memberof CCloud_CompleteAppUploadBatch_Notification
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CCloud_CompleteAppUploadBatch_Notification.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.appid != null && message.hasOwnProperty("appid"))
                if (!$util.isInteger(message.appid))
                    return "appid: integer expected";
            if (message.batch_id != null && message.hasOwnProperty("batch_id"))
                if (!$util.isInteger(message.batch_id) && !(message.batch_id && $util.isInteger(message.batch_id.low) && $util.isInteger(message.batch_id.high)))
                    return "batch_id: integer|Long expected";
            if (message.batch_eresult != null && message.hasOwnProperty("batch_eresult"))
                if (!$util.isInteger(message.batch_eresult))
                    return "batch_eresult: integer expected";
            return null;
        };
    
        /**
         * Creates a CCloud_CompleteAppUploadBatch_Notification message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CCloud_CompleteAppUploadBatch_Notification
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CCloud_CompleteAppUploadBatch_Notification} CCloud_CompleteAppUploadBatch_Notification
         */
        CCloud_CompleteAppUploadBatch_Notification.fromObject = function fromObject(object) {
            if (object instanceof $root.CCloud_CompleteAppUploadBatch_Notification)
                return object;
            var message = new $root.CCloud_CompleteAppUploadBatch_Notification();
            if (object.appid != null)
                message.appid = object.appid >>> 0;
            if (object.batch_id != null)
                if ($util.Long)
                    (message.batch_id = $util.Long.fromValue(object.batch_id)).unsigned = true;
                else if (typeof object.batch_id === "string")
                    message.batch_id = parseInt(object.batch_id, 10);
                else if (typeof object.batch_id === "number")
                    message.batch_id = object.batch_id;
                else if (typeof object.batch_id === "object")
                    message.batch_id = new $util.LongBits(object.batch_id.low >>> 0, object.batch_id.high >>> 0).toNumber(true);
            if (object.batch_eresult != null)
                message.batch_eresult = object.batch_eresult >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CCloud_CompleteAppUploadBatch_Notification message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CCloud_CompleteAppUploadBatch_Notification
         * @static
         * @param {CCloud_CompleteAppUploadBatch_Notification} message CCloud_CompleteAppUploadBatch_Notification
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CCloud_CompleteAppUploadBatch_Notification.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.appid = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.batch_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.batch_id = options.longs === String ? "0" : 0;
                object.batch_eresult = 0;
            }
            if (message.appid != null && message.hasOwnProperty("appid"))
                object.appid = message.appid;
            if (message.batch_id != null && message.hasOwnProperty("batch_id"))
                if (typeof message.batch_id === "number")
                    object.batch_id = options.longs === String ? String(message.batch_id) : message.batch_id;
                else
                    object.batch_id = options.longs === String ? $util.Long.prototype.toString.call(message.batch_id) : options.longs === Number ? new $util.LongBits(message.batch_id.low >>> 0, message.batch_id.high >>> 0).toNumber(true) : message.batch_id;
            if (message.batch_eresult != null && message.hasOwnProperty("batch_eresult"))
                object.batch_eresult = message.batch_eresult;
            return object;
        };
    
        /**
         * Converts this CCloud_CompleteAppUploadBatch_Notification to JSON.
         * @function toJSON
         * @memberof CCloud_CompleteAppUploadBatch_Notification
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CCloud_CompleteAppUploadBatch_Notification.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CCloud_CompleteAppUploadBatch_Notification;
    })();
    
    $root.CCloud_CompleteAppUploadBatch_Request = (function() {
    
        /**
         * Properties of a CCloud_CompleteAppUploadBatch_Request.
         * @exports ICCloud_CompleteAppUploadBatch_Request
         * @interface ICCloud_CompleteAppUploadBatch_Request
         * @property {number|null} [appid] CCloud_CompleteAppUploadBatch_Request appid
         * @property {number|Long|null} [batch_id] CCloud_CompleteAppUploadBatch_Request batch_id
         * @property {number|null} [batch_eresult] CCloud_CompleteAppUploadBatch_Request batch_eresult
         */
    
        /**
         * Constructs a new CCloud_CompleteAppUploadBatch_Request.
         * @exports CCloud_CompleteAppUploadBatch_Request
         * @classdesc Represents a CCloud_CompleteAppUploadBatch_Request.
         * @implements ICCloud_CompleteAppUploadBatch_Request
         * @constructor
         * @param {ICCloud_CompleteAppUploadBatch_Request=} [properties] Properties to set
         */
        function CCloud_CompleteAppUploadBatch_Request(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CCloud_CompleteAppUploadBatch_Request appid.
         * @member {number} appid
         * @memberof CCloud_CompleteAppUploadBatch_Request
         * @instance
         */
        CCloud_CompleteAppUploadBatch_Request.prototype.appid = 0;
    
        /**
         * CCloud_CompleteAppUploadBatch_Request batch_id.
         * @member {number|Long} batch_id
         * @memberof CCloud_CompleteAppUploadBatch_Request
         * @instance
         */
        CCloud_CompleteAppUploadBatch_Request.prototype.batch_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CCloud_CompleteAppUploadBatch_Request batch_eresult.
         * @member {number} batch_eresult
         * @memberof CCloud_CompleteAppUploadBatch_Request
         * @instance
         */
        CCloud_CompleteAppUploadBatch_Request.prototype.batch_eresult = 0;
    
        /**
         * Creates a new CCloud_CompleteAppUploadBatch_Request instance using the specified properties.
         * @function create
         * @memberof CCloud_CompleteAppUploadBatch_Request
         * @static
         * @param {ICCloud_CompleteAppUploadBatch_Request=} [properties] Properties to set
         * @returns {CCloud_CompleteAppUploadBatch_Request} CCloud_CompleteAppUploadBatch_Request instance
         */
        CCloud_CompleteAppUploadBatch_Request.create = function create(properties) {
            return new CCloud_CompleteAppUploadBatch_Request(properties);
        };
    
        /**
         * Encodes the specified CCloud_CompleteAppUploadBatch_Request message. Does not implicitly {@link CCloud_CompleteAppUploadBatch_Request.verify|verify} messages.
         * @function encode
         * @memberof CCloud_CompleteAppUploadBatch_Request
         * @static
         * @param {ICCloud_CompleteAppUploadBatch_Request} message CCloud_CompleteAppUploadBatch_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_CompleteAppUploadBatch_Request.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.appid != null && message.hasOwnProperty("appid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.appid);
            if (message.batch_id != null && message.hasOwnProperty("batch_id"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.batch_id);
            if (message.batch_eresult != null && message.hasOwnProperty("batch_eresult"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.batch_eresult);
            return writer;
        };
    
        /**
         * Encodes the specified CCloud_CompleteAppUploadBatch_Request message, length delimited. Does not implicitly {@link CCloud_CompleteAppUploadBatch_Request.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CCloud_CompleteAppUploadBatch_Request
         * @static
         * @param {ICCloud_CompleteAppUploadBatch_Request} message CCloud_CompleteAppUploadBatch_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_CompleteAppUploadBatch_Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CCloud_CompleteAppUploadBatch_Request message from the specified reader or buffer.
         * @function decode
         * @memberof CCloud_CompleteAppUploadBatch_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CCloud_CompleteAppUploadBatch_Request} CCloud_CompleteAppUploadBatch_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_CompleteAppUploadBatch_Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CCloud_CompleteAppUploadBatch_Request();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.appid = reader.uint32();
                    break;
                case 2:
                    message.batch_id = reader.uint64();
                    break;
                case 3:
                    message.batch_eresult = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CCloud_CompleteAppUploadBatch_Request message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CCloud_CompleteAppUploadBatch_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CCloud_CompleteAppUploadBatch_Request} CCloud_CompleteAppUploadBatch_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_CompleteAppUploadBatch_Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CCloud_CompleteAppUploadBatch_Request message.
         * @function verify
         * @memberof CCloud_CompleteAppUploadBatch_Request
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CCloud_CompleteAppUploadBatch_Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.appid != null && message.hasOwnProperty("appid"))
                if (!$util.isInteger(message.appid))
                    return "appid: integer expected";
            if (message.batch_id != null && message.hasOwnProperty("batch_id"))
                if (!$util.isInteger(message.batch_id) && !(message.batch_id && $util.isInteger(message.batch_id.low) && $util.isInteger(message.batch_id.high)))
                    return "batch_id: integer|Long expected";
            if (message.batch_eresult != null && message.hasOwnProperty("batch_eresult"))
                if (!$util.isInteger(message.batch_eresult))
                    return "batch_eresult: integer expected";
            return null;
        };
    
        /**
         * Creates a CCloud_CompleteAppUploadBatch_Request message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CCloud_CompleteAppUploadBatch_Request
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CCloud_CompleteAppUploadBatch_Request} CCloud_CompleteAppUploadBatch_Request
         */
        CCloud_CompleteAppUploadBatch_Request.fromObject = function fromObject(object) {
            if (object instanceof $root.CCloud_CompleteAppUploadBatch_Request)
                return object;
            var message = new $root.CCloud_CompleteAppUploadBatch_Request();
            if (object.appid != null)
                message.appid = object.appid >>> 0;
            if (object.batch_id != null)
                if ($util.Long)
                    (message.batch_id = $util.Long.fromValue(object.batch_id)).unsigned = true;
                else if (typeof object.batch_id === "string")
                    message.batch_id = parseInt(object.batch_id, 10);
                else if (typeof object.batch_id === "number")
                    message.batch_id = object.batch_id;
                else if (typeof object.batch_id === "object")
                    message.batch_id = new $util.LongBits(object.batch_id.low >>> 0, object.batch_id.high >>> 0).toNumber(true);
            if (object.batch_eresult != null)
                message.batch_eresult = object.batch_eresult >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CCloud_CompleteAppUploadBatch_Request message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CCloud_CompleteAppUploadBatch_Request
         * @static
         * @param {CCloud_CompleteAppUploadBatch_Request} message CCloud_CompleteAppUploadBatch_Request
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CCloud_CompleteAppUploadBatch_Request.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.appid = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.batch_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.batch_id = options.longs === String ? "0" : 0;
                object.batch_eresult = 0;
            }
            if (message.appid != null && message.hasOwnProperty("appid"))
                object.appid = message.appid;
            if (message.batch_id != null && message.hasOwnProperty("batch_id"))
                if (typeof message.batch_id === "number")
                    object.batch_id = options.longs === String ? String(message.batch_id) : message.batch_id;
                else
                    object.batch_id = options.longs === String ? $util.Long.prototype.toString.call(message.batch_id) : options.longs === Number ? new $util.LongBits(message.batch_id.low >>> 0, message.batch_id.high >>> 0).toNumber(true) : message.batch_id;
            if (message.batch_eresult != null && message.hasOwnProperty("batch_eresult"))
                object.batch_eresult = message.batch_eresult;
            return object;
        };
    
        /**
         * Converts this CCloud_CompleteAppUploadBatch_Request to JSON.
         * @function toJSON
         * @memberof CCloud_CompleteAppUploadBatch_Request
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CCloud_CompleteAppUploadBatch_Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CCloud_CompleteAppUploadBatch_Request;
    })();
    
    $root.CCloud_CompleteAppUploadBatch_Response = (function() {
    
        /**
         * Properties of a CCloud_CompleteAppUploadBatch_Response.
         * @exports ICCloud_CompleteAppUploadBatch_Response
         * @interface ICCloud_CompleteAppUploadBatch_Response
         */
    
        /**
         * Constructs a new CCloud_CompleteAppUploadBatch_Response.
         * @exports CCloud_CompleteAppUploadBatch_Response
         * @classdesc Represents a CCloud_CompleteAppUploadBatch_Response.
         * @implements ICCloud_CompleteAppUploadBatch_Response
         * @constructor
         * @param {ICCloud_CompleteAppUploadBatch_Response=} [properties] Properties to set
         */
        function CCloud_CompleteAppUploadBatch_Response(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * Creates a new CCloud_CompleteAppUploadBatch_Response instance using the specified properties.
         * @function create
         * @memberof CCloud_CompleteAppUploadBatch_Response
         * @static
         * @param {ICCloud_CompleteAppUploadBatch_Response=} [properties] Properties to set
         * @returns {CCloud_CompleteAppUploadBatch_Response} CCloud_CompleteAppUploadBatch_Response instance
         */
        CCloud_CompleteAppUploadBatch_Response.create = function create(properties) {
            return new CCloud_CompleteAppUploadBatch_Response(properties);
        };
    
        /**
         * Encodes the specified CCloud_CompleteAppUploadBatch_Response message. Does not implicitly {@link CCloud_CompleteAppUploadBatch_Response.verify|verify} messages.
         * @function encode
         * @memberof CCloud_CompleteAppUploadBatch_Response
         * @static
         * @param {ICCloud_CompleteAppUploadBatch_Response} message CCloud_CompleteAppUploadBatch_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_CompleteAppUploadBatch_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };
    
        /**
         * Encodes the specified CCloud_CompleteAppUploadBatch_Response message, length delimited. Does not implicitly {@link CCloud_CompleteAppUploadBatch_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CCloud_CompleteAppUploadBatch_Response
         * @static
         * @param {ICCloud_CompleteAppUploadBatch_Response} message CCloud_CompleteAppUploadBatch_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_CompleteAppUploadBatch_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CCloud_CompleteAppUploadBatch_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CCloud_CompleteAppUploadBatch_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CCloud_CompleteAppUploadBatch_Response} CCloud_CompleteAppUploadBatch_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_CompleteAppUploadBatch_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CCloud_CompleteAppUploadBatch_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CCloud_CompleteAppUploadBatch_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CCloud_CompleteAppUploadBatch_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CCloud_CompleteAppUploadBatch_Response} CCloud_CompleteAppUploadBatch_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_CompleteAppUploadBatch_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CCloud_CompleteAppUploadBatch_Response message.
         * @function verify
         * @memberof CCloud_CompleteAppUploadBatch_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CCloud_CompleteAppUploadBatch_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };
    
        /**
         * Creates a CCloud_CompleteAppUploadBatch_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CCloud_CompleteAppUploadBatch_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CCloud_CompleteAppUploadBatch_Response} CCloud_CompleteAppUploadBatch_Response
         */
        CCloud_CompleteAppUploadBatch_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CCloud_CompleteAppUploadBatch_Response)
                return object;
            return new $root.CCloud_CompleteAppUploadBatch_Response();
        };
    
        /**
         * Creates a plain object from a CCloud_CompleteAppUploadBatch_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CCloud_CompleteAppUploadBatch_Response
         * @static
         * @param {CCloud_CompleteAppUploadBatch_Response} message CCloud_CompleteAppUploadBatch_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CCloud_CompleteAppUploadBatch_Response.toObject = function toObject() {
            return {};
        };
    
        /**
         * Converts this CCloud_CompleteAppUploadBatch_Response to JSON.
         * @function toJSON
         * @memberof CCloud_CompleteAppUploadBatch_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CCloud_CompleteAppUploadBatch_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CCloud_CompleteAppUploadBatch_Response;
    })();
    
    $root.CCloud_ClientBeginFileUpload_Request = (function() {
    
        /**
         * Properties of a CCloud_ClientBeginFileUpload_Request.
         * @exports ICCloud_ClientBeginFileUpload_Request
         * @interface ICCloud_ClientBeginFileUpload_Request
         * @property {number|null} [appid] CCloud_ClientBeginFileUpload_Request appid
         * @property {number|null} [file_size] CCloud_ClientBeginFileUpload_Request file_size
         * @property {number|null} [raw_file_size] CCloud_ClientBeginFileUpload_Request raw_file_size
         * @property {Uint8Array|null} [file_sha] CCloud_ClientBeginFileUpload_Request file_sha
         * @property {number|Long|null} [time_stamp] CCloud_ClientBeginFileUpload_Request time_stamp
         * @property {string|null} [filename] CCloud_ClientBeginFileUpload_Request filename
         * @property {number|null} [platforms_to_sync] CCloud_ClientBeginFileUpload_Request platforms_to_sync
         * @property {number|null} [cell_id] CCloud_ClientBeginFileUpload_Request cell_id
         * @property {boolean|null} [can_encrypt] CCloud_ClientBeginFileUpload_Request can_encrypt
         * @property {boolean|null} [is_shared_file] CCloud_ClientBeginFileUpload_Request is_shared_file
         * @property {number|null} [deprecated_realm] CCloud_ClientBeginFileUpload_Request deprecated_realm
         * @property {number|Long|null} [upload_batch_id] CCloud_ClientBeginFileUpload_Request upload_batch_id
         */
    
        /**
         * Constructs a new CCloud_ClientBeginFileUpload_Request.
         * @exports CCloud_ClientBeginFileUpload_Request
         * @classdesc Represents a CCloud_ClientBeginFileUpload_Request.
         * @implements ICCloud_ClientBeginFileUpload_Request
         * @constructor
         * @param {ICCloud_ClientBeginFileUpload_Request=} [properties] Properties to set
         */
        function CCloud_ClientBeginFileUpload_Request(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CCloud_ClientBeginFileUpload_Request appid.
         * @member {number} appid
         * @memberof CCloud_ClientBeginFileUpload_Request
         * @instance
         */
        CCloud_ClientBeginFileUpload_Request.prototype.appid = 0;
    
        /**
         * CCloud_ClientBeginFileUpload_Request file_size.
         * @member {number} file_size
         * @memberof CCloud_ClientBeginFileUpload_Request
         * @instance
         */
        CCloud_ClientBeginFileUpload_Request.prototype.file_size = 0;
    
        /**
         * CCloud_ClientBeginFileUpload_Request raw_file_size.
         * @member {number} raw_file_size
         * @memberof CCloud_ClientBeginFileUpload_Request
         * @instance
         */
        CCloud_ClientBeginFileUpload_Request.prototype.raw_file_size = 0;
    
        /**
         * CCloud_ClientBeginFileUpload_Request file_sha.
         * @member {Uint8Array} file_sha
         * @memberof CCloud_ClientBeginFileUpload_Request
         * @instance
         */
        CCloud_ClientBeginFileUpload_Request.prototype.file_sha = $util.newBuffer([]);
    
        /**
         * CCloud_ClientBeginFileUpload_Request time_stamp.
         * @member {number|Long} time_stamp
         * @memberof CCloud_ClientBeginFileUpload_Request
         * @instance
         */
        CCloud_ClientBeginFileUpload_Request.prototype.time_stamp = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CCloud_ClientBeginFileUpload_Request filename.
         * @member {string} filename
         * @memberof CCloud_ClientBeginFileUpload_Request
         * @instance
         */
        CCloud_ClientBeginFileUpload_Request.prototype.filename = "";
    
        /**
         * CCloud_ClientBeginFileUpload_Request platforms_to_sync.
         * @member {number} platforms_to_sync
         * @memberof CCloud_ClientBeginFileUpload_Request
         * @instance
         */
        CCloud_ClientBeginFileUpload_Request.prototype.platforms_to_sync = 4294967295;
    
        /**
         * CCloud_ClientBeginFileUpload_Request cell_id.
         * @member {number} cell_id
         * @memberof CCloud_ClientBeginFileUpload_Request
         * @instance
         */
        CCloud_ClientBeginFileUpload_Request.prototype.cell_id = 0;
    
        /**
         * CCloud_ClientBeginFileUpload_Request can_encrypt.
         * @member {boolean} can_encrypt
         * @memberof CCloud_ClientBeginFileUpload_Request
         * @instance
         */
        CCloud_ClientBeginFileUpload_Request.prototype.can_encrypt = false;
    
        /**
         * CCloud_ClientBeginFileUpload_Request is_shared_file.
         * @member {boolean} is_shared_file
         * @memberof CCloud_ClientBeginFileUpload_Request
         * @instance
         */
        CCloud_ClientBeginFileUpload_Request.prototype.is_shared_file = false;
    
        /**
         * CCloud_ClientBeginFileUpload_Request deprecated_realm.
         * @member {number} deprecated_realm
         * @memberof CCloud_ClientBeginFileUpload_Request
         * @instance
         */
        CCloud_ClientBeginFileUpload_Request.prototype.deprecated_realm = 0;
    
        /**
         * CCloud_ClientBeginFileUpload_Request upload_batch_id.
         * @member {number|Long} upload_batch_id
         * @memberof CCloud_ClientBeginFileUpload_Request
         * @instance
         */
        CCloud_ClientBeginFileUpload_Request.prototype.upload_batch_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * Creates a new CCloud_ClientBeginFileUpload_Request instance using the specified properties.
         * @function create
         * @memberof CCloud_ClientBeginFileUpload_Request
         * @static
         * @param {ICCloud_ClientBeginFileUpload_Request=} [properties] Properties to set
         * @returns {CCloud_ClientBeginFileUpload_Request} CCloud_ClientBeginFileUpload_Request instance
         */
        CCloud_ClientBeginFileUpload_Request.create = function create(properties) {
            return new CCloud_ClientBeginFileUpload_Request(properties);
        };
    
        /**
         * Encodes the specified CCloud_ClientBeginFileUpload_Request message. Does not implicitly {@link CCloud_ClientBeginFileUpload_Request.verify|verify} messages.
         * @function encode
         * @memberof CCloud_ClientBeginFileUpload_Request
         * @static
         * @param {ICCloud_ClientBeginFileUpload_Request} message CCloud_ClientBeginFileUpload_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_ClientBeginFileUpload_Request.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.appid != null && message.hasOwnProperty("appid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.appid);
            if (message.file_size != null && message.hasOwnProperty("file_size"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.file_size);
            if (message.raw_file_size != null && message.hasOwnProperty("raw_file_size"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.raw_file_size);
            if (message.file_sha != null && message.hasOwnProperty("file_sha"))
                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.file_sha);
            if (message.time_stamp != null && message.hasOwnProperty("time_stamp"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.time_stamp);
            if (message.filename != null && message.hasOwnProperty("filename"))
                writer.uint32(/* id 6, wireType 2 =*/50).string(message.filename);
            if (message.platforms_to_sync != null && message.hasOwnProperty("platforms_to_sync"))
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.platforms_to_sync);
            if (message.cell_id != null && message.hasOwnProperty("cell_id"))
                writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.cell_id);
            if (message.can_encrypt != null && message.hasOwnProperty("can_encrypt"))
                writer.uint32(/* id 10, wireType 0 =*/80).bool(message.can_encrypt);
            if (message.is_shared_file != null && message.hasOwnProperty("is_shared_file"))
                writer.uint32(/* id 11, wireType 0 =*/88).bool(message.is_shared_file);
            if (message.deprecated_realm != null && message.hasOwnProperty("deprecated_realm"))
                writer.uint32(/* id 12, wireType 0 =*/96).uint32(message.deprecated_realm);
            if (message.upload_batch_id != null && message.hasOwnProperty("upload_batch_id"))
                writer.uint32(/* id 13, wireType 0 =*/104).uint64(message.upload_batch_id);
            return writer;
        };
    
        /**
         * Encodes the specified CCloud_ClientBeginFileUpload_Request message, length delimited. Does not implicitly {@link CCloud_ClientBeginFileUpload_Request.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CCloud_ClientBeginFileUpload_Request
         * @static
         * @param {ICCloud_ClientBeginFileUpload_Request} message CCloud_ClientBeginFileUpload_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_ClientBeginFileUpload_Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CCloud_ClientBeginFileUpload_Request message from the specified reader or buffer.
         * @function decode
         * @memberof CCloud_ClientBeginFileUpload_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CCloud_ClientBeginFileUpload_Request} CCloud_ClientBeginFileUpload_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_ClientBeginFileUpload_Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CCloud_ClientBeginFileUpload_Request();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.appid = reader.uint32();
                    break;
                case 2:
                    message.file_size = reader.uint32();
                    break;
                case 3:
                    message.raw_file_size = reader.uint32();
                    break;
                case 4:
                    message.file_sha = reader.bytes();
                    break;
                case 5:
                    message.time_stamp = reader.uint64();
                    break;
                case 6:
                    message.filename = reader.string();
                    break;
                case 7:
                    message.platforms_to_sync = reader.uint32();
                    break;
                case 9:
                    message.cell_id = reader.uint32();
                    break;
                case 10:
                    message.can_encrypt = reader.bool();
                    break;
                case 11:
                    message.is_shared_file = reader.bool();
                    break;
                case 12:
                    message.deprecated_realm = reader.uint32();
                    break;
                case 13:
                    message.upload_batch_id = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CCloud_ClientBeginFileUpload_Request message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CCloud_ClientBeginFileUpload_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CCloud_ClientBeginFileUpload_Request} CCloud_ClientBeginFileUpload_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_ClientBeginFileUpload_Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CCloud_ClientBeginFileUpload_Request message.
         * @function verify
         * @memberof CCloud_ClientBeginFileUpload_Request
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CCloud_ClientBeginFileUpload_Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.appid != null && message.hasOwnProperty("appid"))
                if (!$util.isInteger(message.appid))
                    return "appid: integer expected";
            if (message.file_size != null && message.hasOwnProperty("file_size"))
                if (!$util.isInteger(message.file_size))
                    return "file_size: integer expected";
            if (message.raw_file_size != null && message.hasOwnProperty("raw_file_size"))
                if (!$util.isInteger(message.raw_file_size))
                    return "raw_file_size: integer expected";
            if (message.file_sha != null && message.hasOwnProperty("file_sha"))
                if (!(message.file_sha && typeof message.file_sha.length === "number" || $util.isString(message.file_sha)))
                    return "file_sha: buffer expected";
            if (message.time_stamp != null && message.hasOwnProperty("time_stamp"))
                if (!$util.isInteger(message.time_stamp) && !(message.time_stamp && $util.isInteger(message.time_stamp.low) && $util.isInteger(message.time_stamp.high)))
                    return "time_stamp: integer|Long expected";
            if (message.filename != null && message.hasOwnProperty("filename"))
                if (!$util.isString(message.filename))
                    return "filename: string expected";
            if (message.platforms_to_sync != null && message.hasOwnProperty("platforms_to_sync"))
                if (!$util.isInteger(message.platforms_to_sync))
                    return "platforms_to_sync: integer expected";
            if (message.cell_id != null && message.hasOwnProperty("cell_id"))
                if (!$util.isInteger(message.cell_id))
                    return "cell_id: integer expected";
            if (message.can_encrypt != null && message.hasOwnProperty("can_encrypt"))
                if (typeof message.can_encrypt !== "boolean")
                    return "can_encrypt: boolean expected";
            if (message.is_shared_file != null && message.hasOwnProperty("is_shared_file"))
                if (typeof message.is_shared_file !== "boolean")
                    return "is_shared_file: boolean expected";
            if (message.deprecated_realm != null && message.hasOwnProperty("deprecated_realm"))
                if (!$util.isInteger(message.deprecated_realm))
                    return "deprecated_realm: integer expected";
            if (message.upload_batch_id != null && message.hasOwnProperty("upload_batch_id"))
                if (!$util.isInteger(message.upload_batch_id) && !(message.upload_batch_id && $util.isInteger(message.upload_batch_id.low) && $util.isInteger(message.upload_batch_id.high)))
                    return "upload_batch_id: integer|Long expected";
            return null;
        };
    
        /**
         * Creates a CCloud_ClientBeginFileUpload_Request message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CCloud_ClientBeginFileUpload_Request
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CCloud_ClientBeginFileUpload_Request} CCloud_ClientBeginFileUpload_Request
         */
        CCloud_ClientBeginFileUpload_Request.fromObject = function fromObject(object) {
            if (object instanceof $root.CCloud_ClientBeginFileUpload_Request)
                return object;
            var message = new $root.CCloud_ClientBeginFileUpload_Request();
            if (object.appid != null)
                message.appid = object.appid >>> 0;
            if (object.file_size != null)
                message.file_size = object.file_size >>> 0;
            if (object.raw_file_size != null)
                message.raw_file_size = object.raw_file_size >>> 0;
            if (object.file_sha != null)
                if (typeof object.file_sha === "string")
                    $util.base64.decode(object.file_sha, message.file_sha = $util.newBuffer($util.base64.length(object.file_sha)), 0);
                else if (object.file_sha.length)
                    message.file_sha = object.file_sha;
            if (object.time_stamp != null)
                if ($util.Long)
                    (message.time_stamp = $util.Long.fromValue(object.time_stamp)).unsigned = true;
                else if (typeof object.time_stamp === "string")
                    message.time_stamp = parseInt(object.time_stamp, 10);
                else if (typeof object.time_stamp === "number")
                    message.time_stamp = object.time_stamp;
                else if (typeof object.time_stamp === "object")
                    message.time_stamp = new $util.LongBits(object.time_stamp.low >>> 0, object.time_stamp.high >>> 0).toNumber(true);
            if (object.filename != null)
                message.filename = String(object.filename);
            if (object.platforms_to_sync != null)
                message.platforms_to_sync = object.platforms_to_sync >>> 0;
            if (object.cell_id != null)
                message.cell_id = object.cell_id >>> 0;
            if (object.can_encrypt != null)
                message.can_encrypt = Boolean(object.can_encrypt);
            if (object.is_shared_file != null)
                message.is_shared_file = Boolean(object.is_shared_file);
            if (object.deprecated_realm != null)
                message.deprecated_realm = object.deprecated_realm >>> 0;
            if (object.upload_batch_id != null)
                if ($util.Long)
                    (message.upload_batch_id = $util.Long.fromValue(object.upload_batch_id)).unsigned = true;
                else if (typeof object.upload_batch_id === "string")
                    message.upload_batch_id = parseInt(object.upload_batch_id, 10);
                else if (typeof object.upload_batch_id === "number")
                    message.upload_batch_id = object.upload_batch_id;
                else if (typeof object.upload_batch_id === "object")
                    message.upload_batch_id = new $util.LongBits(object.upload_batch_id.low >>> 0, object.upload_batch_id.high >>> 0).toNumber(true);
            return message;
        };
    
        /**
         * Creates a plain object from a CCloud_ClientBeginFileUpload_Request message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CCloud_ClientBeginFileUpload_Request
         * @static
         * @param {CCloud_ClientBeginFileUpload_Request} message CCloud_ClientBeginFileUpload_Request
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CCloud_ClientBeginFileUpload_Request.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.appid = 0;
                object.file_size = 0;
                object.raw_file_size = 0;
                if (options.bytes === String)
                    object.file_sha = "";
                else {
                    object.file_sha = [];
                    if (options.bytes !== Array)
                        object.file_sha = $util.newBuffer(object.file_sha);
                }
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.time_stamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.time_stamp = options.longs === String ? "0" : 0;
                object.filename = "";
                object.platforms_to_sync = 4294967295;
                object.cell_id = 0;
                object.can_encrypt = false;
                object.is_shared_file = false;
                object.deprecated_realm = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.upload_batch_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.upload_batch_id = options.longs === String ? "0" : 0;
            }
            if (message.appid != null && message.hasOwnProperty("appid"))
                object.appid = message.appid;
            if (message.file_size != null && message.hasOwnProperty("file_size"))
                object.file_size = message.file_size;
            if (message.raw_file_size != null && message.hasOwnProperty("raw_file_size"))
                object.raw_file_size = message.raw_file_size;
            if (message.file_sha != null && message.hasOwnProperty("file_sha"))
                object.file_sha = options.bytes === String ? $util.base64.encode(message.file_sha, 0, message.file_sha.length) : options.bytes === Array ? Array.prototype.slice.call(message.file_sha) : message.file_sha;
            if (message.time_stamp != null && message.hasOwnProperty("time_stamp"))
                if (typeof message.time_stamp === "number")
                    object.time_stamp = options.longs === String ? String(message.time_stamp) : message.time_stamp;
                else
                    object.time_stamp = options.longs === String ? $util.Long.prototype.toString.call(message.time_stamp) : options.longs === Number ? new $util.LongBits(message.time_stamp.low >>> 0, message.time_stamp.high >>> 0).toNumber(true) : message.time_stamp;
            if (message.filename != null && message.hasOwnProperty("filename"))
                object.filename = message.filename;
            if (message.platforms_to_sync != null && message.hasOwnProperty("platforms_to_sync"))
                object.platforms_to_sync = message.platforms_to_sync;
            if (message.cell_id != null && message.hasOwnProperty("cell_id"))
                object.cell_id = message.cell_id;
            if (message.can_encrypt != null && message.hasOwnProperty("can_encrypt"))
                object.can_encrypt = message.can_encrypt;
            if (message.is_shared_file != null && message.hasOwnProperty("is_shared_file"))
                object.is_shared_file = message.is_shared_file;
            if (message.deprecated_realm != null && message.hasOwnProperty("deprecated_realm"))
                object.deprecated_realm = message.deprecated_realm;
            if (message.upload_batch_id != null && message.hasOwnProperty("upload_batch_id"))
                if (typeof message.upload_batch_id === "number")
                    object.upload_batch_id = options.longs === String ? String(message.upload_batch_id) : message.upload_batch_id;
                else
                    object.upload_batch_id = options.longs === String ? $util.Long.prototype.toString.call(message.upload_batch_id) : options.longs === Number ? new $util.LongBits(message.upload_batch_id.low >>> 0, message.upload_batch_id.high >>> 0).toNumber(true) : message.upload_batch_id;
            return object;
        };
    
        /**
         * Converts this CCloud_ClientBeginFileUpload_Request to JSON.
         * @function toJSON
         * @memberof CCloud_ClientBeginFileUpload_Request
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CCloud_ClientBeginFileUpload_Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CCloud_ClientBeginFileUpload_Request;
    })();
    
    $root.ClientCloudFileUploadBlockDetails = (function() {
    
        /**
         * Properties of a ClientCloudFileUploadBlockDetails.
         * @exports IClientCloudFileUploadBlockDetails
         * @interface IClientCloudFileUploadBlockDetails
         * @property {string|null} [url_host] ClientCloudFileUploadBlockDetails url_host
         * @property {string|null} [url_path] ClientCloudFileUploadBlockDetails url_path
         * @property {boolean|null} [use_https] ClientCloudFileUploadBlockDetails use_https
         * @property {number|null} [http_method] ClientCloudFileUploadBlockDetails http_method
         * @property {Array.<ClientCloudFileUploadBlockDetails.IHTTPHeaders>|null} [request_headers] ClientCloudFileUploadBlockDetails request_headers
         * @property {number|Long|null} [block_offset] ClientCloudFileUploadBlockDetails block_offset
         * @property {number|null} [block_length] ClientCloudFileUploadBlockDetails block_length
         * @property {Uint8Array|null} [explicit_body_data] ClientCloudFileUploadBlockDetails explicit_body_data
         * @property {boolean|null} [may_parallelize] ClientCloudFileUploadBlockDetails may_parallelize
         */
    
        /**
         * Constructs a new ClientCloudFileUploadBlockDetails.
         * @exports ClientCloudFileUploadBlockDetails
         * @classdesc Represents a ClientCloudFileUploadBlockDetails.
         * @implements IClientCloudFileUploadBlockDetails
         * @constructor
         * @param {IClientCloudFileUploadBlockDetails=} [properties] Properties to set
         */
        function ClientCloudFileUploadBlockDetails(properties) {
            this.request_headers = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * ClientCloudFileUploadBlockDetails url_host.
         * @member {string} url_host
         * @memberof ClientCloudFileUploadBlockDetails
         * @instance
         */
        ClientCloudFileUploadBlockDetails.prototype.url_host = "";
    
        /**
         * ClientCloudFileUploadBlockDetails url_path.
         * @member {string} url_path
         * @memberof ClientCloudFileUploadBlockDetails
         * @instance
         */
        ClientCloudFileUploadBlockDetails.prototype.url_path = "";
    
        /**
         * ClientCloudFileUploadBlockDetails use_https.
         * @member {boolean} use_https
         * @memberof ClientCloudFileUploadBlockDetails
         * @instance
         */
        ClientCloudFileUploadBlockDetails.prototype.use_https = false;
    
        /**
         * ClientCloudFileUploadBlockDetails http_method.
         * @member {number} http_method
         * @memberof ClientCloudFileUploadBlockDetails
         * @instance
         */
        ClientCloudFileUploadBlockDetails.prototype.http_method = 0;
    
        /**
         * ClientCloudFileUploadBlockDetails request_headers.
         * @member {Array.<ClientCloudFileUploadBlockDetails.IHTTPHeaders>} request_headers
         * @memberof ClientCloudFileUploadBlockDetails
         * @instance
         */
        ClientCloudFileUploadBlockDetails.prototype.request_headers = $util.emptyArray;
    
        /**
         * ClientCloudFileUploadBlockDetails block_offset.
         * @member {number|Long} block_offset
         * @memberof ClientCloudFileUploadBlockDetails
         * @instance
         */
        ClientCloudFileUploadBlockDetails.prototype.block_offset = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * ClientCloudFileUploadBlockDetails block_length.
         * @member {number} block_length
         * @memberof ClientCloudFileUploadBlockDetails
         * @instance
         */
        ClientCloudFileUploadBlockDetails.prototype.block_length = 0;
    
        /**
         * ClientCloudFileUploadBlockDetails explicit_body_data.
         * @member {Uint8Array} explicit_body_data
         * @memberof ClientCloudFileUploadBlockDetails
         * @instance
         */
        ClientCloudFileUploadBlockDetails.prototype.explicit_body_data = $util.newBuffer([]);
    
        /**
         * ClientCloudFileUploadBlockDetails may_parallelize.
         * @member {boolean} may_parallelize
         * @memberof ClientCloudFileUploadBlockDetails
         * @instance
         */
        ClientCloudFileUploadBlockDetails.prototype.may_parallelize = false;
    
        /**
         * Creates a new ClientCloudFileUploadBlockDetails instance using the specified properties.
         * @function create
         * @memberof ClientCloudFileUploadBlockDetails
         * @static
         * @param {IClientCloudFileUploadBlockDetails=} [properties] Properties to set
         * @returns {ClientCloudFileUploadBlockDetails} ClientCloudFileUploadBlockDetails instance
         */
        ClientCloudFileUploadBlockDetails.create = function create(properties) {
            return new ClientCloudFileUploadBlockDetails(properties);
        };
    
        /**
         * Encodes the specified ClientCloudFileUploadBlockDetails message. Does not implicitly {@link ClientCloudFileUploadBlockDetails.verify|verify} messages.
         * @function encode
         * @memberof ClientCloudFileUploadBlockDetails
         * @static
         * @param {IClientCloudFileUploadBlockDetails} message ClientCloudFileUploadBlockDetails message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ClientCloudFileUploadBlockDetails.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.url_host != null && message.hasOwnProperty("url_host"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.url_host);
            if (message.url_path != null && message.hasOwnProperty("url_path"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.url_path);
            if (message.use_https != null && message.hasOwnProperty("use_https"))
                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.use_https);
            if (message.http_method != null && message.hasOwnProperty("http_method"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.http_method);
            if (message.request_headers != null && message.request_headers.length)
                for (var i = 0; i < message.request_headers.length; ++i)
                    $root.ClientCloudFileUploadBlockDetails.HTTPHeaders.encode(message.request_headers[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            if (message.block_offset != null && message.hasOwnProperty("block_offset"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint64(message.block_offset);
            if (message.block_length != null && message.hasOwnProperty("block_length"))
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.block_length);
            if (message.explicit_body_data != null && message.hasOwnProperty("explicit_body_data"))
                writer.uint32(/* id 8, wireType 2 =*/66).bytes(message.explicit_body_data);
            if (message.may_parallelize != null && message.hasOwnProperty("may_parallelize"))
                writer.uint32(/* id 9, wireType 0 =*/72).bool(message.may_parallelize);
            return writer;
        };
    
        /**
         * Encodes the specified ClientCloudFileUploadBlockDetails message, length delimited. Does not implicitly {@link ClientCloudFileUploadBlockDetails.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ClientCloudFileUploadBlockDetails
         * @static
         * @param {IClientCloudFileUploadBlockDetails} message ClientCloudFileUploadBlockDetails message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ClientCloudFileUploadBlockDetails.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a ClientCloudFileUploadBlockDetails message from the specified reader or buffer.
         * @function decode
         * @memberof ClientCloudFileUploadBlockDetails
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ClientCloudFileUploadBlockDetails} ClientCloudFileUploadBlockDetails
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ClientCloudFileUploadBlockDetails.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ClientCloudFileUploadBlockDetails();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.url_host = reader.string();
                    break;
                case 2:
                    message.url_path = reader.string();
                    break;
                case 3:
                    message.use_https = reader.bool();
                    break;
                case 4:
                    message.http_method = reader.int32();
                    break;
                case 5:
                    if (!(message.request_headers && message.request_headers.length))
                        message.request_headers = [];
                    message.request_headers.push($root.ClientCloudFileUploadBlockDetails.HTTPHeaders.decode(reader, reader.uint32()));
                    break;
                case 6:
                    message.block_offset = reader.uint64();
                    break;
                case 7:
                    message.block_length = reader.uint32();
                    break;
                case 8:
                    message.explicit_body_data = reader.bytes();
                    break;
                case 9:
                    message.may_parallelize = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a ClientCloudFileUploadBlockDetails message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ClientCloudFileUploadBlockDetails
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ClientCloudFileUploadBlockDetails} ClientCloudFileUploadBlockDetails
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ClientCloudFileUploadBlockDetails.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a ClientCloudFileUploadBlockDetails message.
         * @function verify
         * @memberof ClientCloudFileUploadBlockDetails
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ClientCloudFileUploadBlockDetails.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.url_host != null && message.hasOwnProperty("url_host"))
                if (!$util.isString(message.url_host))
                    return "url_host: string expected";
            if (message.url_path != null && message.hasOwnProperty("url_path"))
                if (!$util.isString(message.url_path))
                    return "url_path: string expected";
            if (message.use_https != null && message.hasOwnProperty("use_https"))
                if (typeof message.use_https !== "boolean")
                    return "use_https: boolean expected";
            if (message.http_method != null && message.hasOwnProperty("http_method"))
                if (!$util.isInteger(message.http_method))
                    return "http_method: integer expected";
            if (message.request_headers != null && message.hasOwnProperty("request_headers")) {
                if (!Array.isArray(message.request_headers))
                    return "request_headers: array expected";
                for (var i = 0; i < message.request_headers.length; ++i) {
                    var error = $root.ClientCloudFileUploadBlockDetails.HTTPHeaders.verify(message.request_headers[i]);
                    if (error)
                        return "request_headers." + error;
                }
            }
            if (message.block_offset != null && message.hasOwnProperty("block_offset"))
                if (!$util.isInteger(message.block_offset) && !(message.block_offset && $util.isInteger(message.block_offset.low) && $util.isInteger(message.block_offset.high)))
                    return "block_offset: integer|Long expected";
            if (message.block_length != null && message.hasOwnProperty("block_length"))
                if (!$util.isInteger(message.block_length))
                    return "block_length: integer expected";
            if (message.explicit_body_data != null && message.hasOwnProperty("explicit_body_data"))
                if (!(message.explicit_body_data && typeof message.explicit_body_data.length === "number" || $util.isString(message.explicit_body_data)))
                    return "explicit_body_data: buffer expected";
            if (message.may_parallelize != null && message.hasOwnProperty("may_parallelize"))
                if (typeof message.may_parallelize !== "boolean")
                    return "may_parallelize: boolean expected";
            return null;
        };
    
        /**
         * Creates a ClientCloudFileUploadBlockDetails message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ClientCloudFileUploadBlockDetails
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ClientCloudFileUploadBlockDetails} ClientCloudFileUploadBlockDetails
         */
        ClientCloudFileUploadBlockDetails.fromObject = function fromObject(object) {
            if (object instanceof $root.ClientCloudFileUploadBlockDetails)
                return object;
            var message = new $root.ClientCloudFileUploadBlockDetails();
            if (object.url_host != null)
                message.url_host = String(object.url_host);
            if (object.url_path != null)
                message.url_path = String(object.url_path);
            if (object.use_https != null)
                message.use_https = Boolean(object.use_https);
            if (object.http_method != null)
                message.http_method = object.http_method | 0;
            if (object.request_headers) {
                if (!Array.isArray(object.request_headers))
                    throw TypeError(".ClientCloudFileUploadBlockDetails.request_headers: array expected");
                message.request_headers = [];
                for (var i = 0; i < object.request_headers.length; ++i) {
                    if (typeof object.request_headers[i] !== "object")
                        throw TypeError(".ClientCloudFileUploadBlockDetails.request_headers: object expected");
                    message.request_headers[i] = $root.ClientCloudFileUploadBlockDetails.HTTPHeaders.fromObject(object.request_headers[i]);
                }
            }
            if (object.block_offset != null)
                if ($util.Long)
                    (message.block_offset = $util.Long.fromValue(object.block_offset)).unsigned = true;
                else if (typeof object.block_offset === "string")
                    message.block_offset = parseInt(object.block_offset, 10);
                else if (typeof object.block_offset === "number")
                    message.block_offset = object.block_offset;
                else if (typeof object.block_offset === "object")
                    message.block_offset = new $util.LongBits(object.block_offset.low >>> 0, object.block_offset.high >>> 0).toNumber(true);
            if (object.block_length != null)
                message.block_length = object.block_length >>> 0;
            if (object.explicit_body_data != null)
                if (typeof object.explicit_body_data === "string")
                    $util.base64.decode(object.explicit_body_data, message.explicit_body_data = $util.newBuffer($util.base64.length(object.explicit_body_data)), 0);
                else if (object.explicit_body_data.length)
                    message.explicit_body_data = object.explicit_body_data;
            if (object.may_parallelize != null)
                message.may_parallelize = Boolean(object.may_parallelize);
            return message;
        };
    
        /**
         * Creates a plain object from a ClientCloudFileUploadBlockDetails message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ClientCloudFileUploadBlockDetails
         * @static
         * @param {ClientCloudFileUploadBlockDetails} message ClientCloudFileUploadBlockDetails
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ClientCloudFileUploadBlockDetails.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.request_headers = [];
            if (options.defaults) {
                object.url_host = "";
                object.url_path = "";
                object.use_https = false;
                object.http_method = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.block_offset = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.block_offset = options.longs === String ? "0" : 0;
                object.block_length = 0;
                if (options.bytes === String)
                    object.explicit_body_data = "";
                else {
                    object.explicit_body_data = [];
                    if (options.bytes !== Array)
                        object.explicit_body_data = $util.newBuffer(object.explicit_body_data);
                }
                object.may_parallelize = false;
            }
            if (message.url_host != null && message.hasOwnProperty("url_host"))
                object.url_host = message.url_host;
            if (message.url_path != null && message.hasOwnProperty("url_path"))
                object.url_path = message.url_path;
            if (message.use_https != null && message.hasOwnProperty("use_https"))
                object.use_https = message.use_https;
            if (message.http_method != null && message.hasOwnProperty("http_method"))
                object.http_method = message.http_method;
            if (message.request_headers && message.request_headers.length) {
                object.request_headers = [];
                for (var j = 0; j < message.request_headers.length; ++j)
                    object.request_headers[j] = $root.ClientCloudFileUploadBlockDetails.HTTPHeaders.toObject(message.request_headers[j], options);
            }
            if (message.block_offset != null && message.hasOwnProperty("block_offset"))
                if (typeof message.block_offset === "number")
                    object.block_offset = options.longs === String ? String(message.block_offset) : message.block_offset;
                else
                    object.block_offset = options.longs === String ? $util.Long.prototype.toString.call(message.block_offset) : options.longs === Number ? new $util.LongBits(message.block_offset.low >>> 0, message.block_offset.high >>> 0).toNumber(true) : message.block_offset;
            if (message.block_length != null && message.hasOwnProperty("block_length"))
                object.block_length = message.block_length;
            if (message.explicit_body_data != null && message.hasOwnProperty("explicit_body_data"))
                object.explicit_body_data = options.bytes === String ? $util.base64.encode(message.explicit_body_data, 0, message.explicit_body_data.length) : options.bytes === Array ? Array.prototype.slice.call(message.explicit_body_data) : message.explicit_body_data;
            if (message.may_parallelize != null && message.hasOwnProperty("may_parallelize"))
                object.may_parallelize = message.may_parallelize;
            return object;
        };
    
        /**
         * Converts this ClientCloudFileUploadBlockDetails to JSON.
         * @function toJSON
         * @memberof ClientCloudFileUploadBlockDetails
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ClientCloudFileUploadBlockDetails.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        ClientCloudFileUploadBlockDetails.HTTPHeaders = (function() {
    
            /**
             * Properties of a HTTPHeaders.
             * @memberof ClientCloudFileUploadBlockDetails
             * @interface IHTTPHeaders
             * @property {string|null} [name] HTTPHeaders name
             * @property {string|null} [value] HTTPHeaders value
             */
    
            /**
             * Constructs a new HTTPHeaders.
             * @memberof ClientCloudFileUploadBlockDetails
             * @classdesc Represents a HTTPHeaders.
             * @implements IHTTPHeaders
             * @constructor
             * @param {ClientCloudFileUploadBlockDetails.IHTTPHeaders=} [properties] Properties to set
             */
            function HTTPHeaders(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * HTTPHeaders name.
             * @member {string} name
             * @memberof ClientCloudFileUploadBlockDetails.HTTPHeaders
             * @instance
             */
            HTTPHeaders.prototype.name = "";
    
            /**
             * HTTPHeaders value.
             * @member {string} value
             * @memberof ClientCloudFileUploadBlockDetails.HTTPHeaders
             * @instance
             */
            HTTPHeaders.prototype.value = "";
    
            /**
             * Creates a new HTTPHeaders instance using the specified properties.
             * @function create
             * @memberof ClientCloudFileUploadBlockDetails.HTTPHeaders
             * @static
             * @param {ClientCloudFileUploadBlockDetails.IHTTPHeaders=} [properties] Properties to set
             * @returns {ClientCloudFileUploadBlockDetails.HTTPHeaders} HTTPHeaders instance
             */
            HTTPHeaders.create = function create(properties) {
                return new HTTPHeaders(properties);
            };
    
            /**
             * Encodes the specified HTTPHeaders message. Does not implicitly {@link ClientCloudFileUploadBlockDetails.HTTPHeaders.verify|verify} messages.
             * @function encode
             * @memberof ClientCloudFileUploadBlockDetails.HTTPHeaders
             * @static
             * @param {ClientCloudFileUploadBlockDetails.IHTTPHeaders} message HTTPHeaders message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            HTTPHeaders.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && message.hasOwnProperty("name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.value != null && message.hasOwnProperty("value"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);
                return writer;
            };
    
            /**
             * Encodes the specified HTTPHeaders message, length delimited. Does not implicitly {@link ClientCloudFileUploadBlockDetails.HTTPHeaders.verify|verify} messages.
             * @function encodeDelimited
             * @memberof ClientCloudFileUploadBlockDetails.HTTPHeaders
             * @static
             * @param {ClientCloudFileUploadBlockDetails.IHTTPHeaders} message HTTPHeaders message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            HTTPHeaders.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a HTTPHeaders message from the specified reader or buffer.
             * @function decode
             * @memberof ClientCloudFileUploadBlockDetails.HTTPHeaders
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {ClientCloudFileUploadBlockDetails.HTTPHeaders} HTTPHeaders
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            HTTPHeaders.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ClientCloudFileUploadBlockDetails.HTTPHeaders();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        message.value = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a HTTPHeaders message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof ClientCloudFileUploadBlockDetails.HTTPHeaders
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {ClientCloudFileUploadBlockDetails.HTTPHeaders} HTTPHeaders
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            HTTPHeaders.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a HTTPHeaders message.
             * @function verify
             * @memberof ClientCloudFileUploadBlockDetails.HTTPHeaders
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            HTTPHeaders.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.value != null && message.hasOwnProperty("value"))
                    if (!$util.isString(message.value))
                        return "value: string expected";
                return null;
            };
    
            /**
             * Creates a HTTPHeaders message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof ClientCloudFileUploadBlockDetails.HTTPHeaders
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {ClientCloudFileUploadBlockDetails.HTTPHeaders} HTTPHeaders
             */
            HTTPHeaders.fromObject = function fromObject(object) {
                if (object instanceof $root.ClientCloudFileUploadBlockDetails.HTTPHeaders)
                    return object;
                var message = new $root.ClientCloudFileUploadBlockDetails.HTTPHeaders();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.value != null)
                    message.value = String(object.value);
                return message;
            };
    
            /**
             * Creates a plain object from a HTTPHeaders message. Also converts values to other types if specified.
             * @function toObject
             * @memberof ClientCloudFileUploadBlockDetails.HTTPHeaders
             * @static
             * @param {ClientCloudFileUploadBlockDetails.HTTPHeaders} message HTTPHeaders
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            HTTPHeaders.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.name = "";
                    object.value = "";
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.value != null && message.hasOwnProperty("value"))
                    object.value = message.value;
                return object;
            };
    
            /**
             * Converts this HTTPHeaders to JSON.
             * @function toJSON
             * @memberof ClientCloudFileUploadBlockDetails.HTTPHeaders
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            HTTPHeaders.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return HTTPHeaders;
        })();
    
        return ClientCloudFileUploadBlockDetails;
    })();
    
    $root.CCloud_ClientBeginFileUpload_Response = (function() {
    
        /**
         * Properties of a CCloud_ClientBeginFileUpload_Response.
         * @exports ICCloud_ClientBeginFileUpload_Response
         * @interface ICCloud_ClientBeginFileUpload_Response
         * @property {boolean|null} [encrypt_file] CCloud_ClientBeginFileUpload_Response encrypt_file
         * @property {Array.<IClientCloudFileUploadBlockDetails>|null} [block_requests] CCloud_ClientBeginFileUpload_Response block_requests
         */
    
        /**
         * Constructs a new CCloud_ClientBeginFileUpload_Response.
         * @exports CCloud_ClientBeginFileUpload_Response
         * @classdesc Represents a CCloud_ClientBeginFileUpload_Response.
         * @implements ICCloud_ClientBeginFileUpload_Response
         * @constructor
         * @param {ICCloud_ClientBeginFileUpload_Response=} [properties] Properties to set
         */
        function CCloud_ClientBeginFileUpload_Response(properties) {
            this.block_requests = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CCloud_ClientBeginFileUpload_Response encrypt_file.
         * @member {boolean} encrypt_file
         * @memberof CCloud_ClientBeginFileUpload_Response
         * @instance
         */
        CCloud_ClientBeginFileUpload_Response.prototype.encrypt_file = false;
    
        /**
         * CCloud_ClientBeginFileUpload_Response block_requests.
         * @member {Array.<IClientCloudFileUploadBlockDetails>} block_requests
         * @memberof CCloud_ClientBeginFileUpload_Response
         * @instance
         */
        CCloud_ClientBeginFileUpload_Response.prototype.block_requests = $util.emptyArray;
    
        /**
         * Creates a new CCloud_ClientBeginFileUpload_Response instance using the specified properties.
         * @function create
         * @memberof CCloud_ClientBeginFileUpload_Response
         * @static
         * @param {ICCloud_ClientBeginFileUpload_Response=} [properties] Properties to set
         * @returns {CCloud_ClientBeginFileUpload_Response} CCloud_ClientBeginFileUpload_Response instance
         */
        CCloud_ClientBeginFileUpload_Response.create = function create(properties) {
            return new CCloud_ClientBeginFileUpload_Response(properties);
        };
    
        /**
         * Encodes the specified CCloud_ClientBeginFileUpload_Response message. Does not implicitly {@link CCloud_ClientBeginFileUpload_Response.verify|verify} messages.
         * @function encode
         * @memberof CCloud_ClientBeginFileUpload_Response
         * @static
         * @param {ICCloud_ClientBeginFileUpload_Response} message CCloud_ClientBeginFileUpload_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_ClientBeginFileUpload_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.encrypt_file != null && message.hasOwnProperty("encrypt_file"))
                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.encrypt_file);
            if (message.block_requests != null && message.block_requests.length)
                for (var i = 0; i < message.block_requests.length; ++i)
                    $root.ClientCloudFileUploadBlockDetails.encode(message.block_requests[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CCloud_ClientBeginFileUpload_Response message, length delimited. Does not implicitly {@link CCloud_ClientBeginFileUpload_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CCloud_ClientBeginFileUpload_Response
         * @static
         * @param {ICCloud_ClientBeginFileUpload_Response} message CCloud_ClientBeginFileUpload_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_ClientBeginFileUpload_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CCloud_ClientBeginFileUpload_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CCloud_ClientBeginFileUpload_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CCloud_ClientBeginFileUpload_Response} CCloud_ClientBeginFileUpload_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_ClientBeginFileUpload_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CCloud_ClientBeginFileUpload_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.encrypt_file = reader.bool();
                    break;
                case 2:
                    if (!(message.block_requests && message.block_requests.length))
                        message.block_requests = [];
                    message.block_requests.push($root.ClientCloudFileUploadBlockDetails.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CCloud_ClientBeginFileUpload_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CCloud_ClientBeginFileUpload_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CCloud_ClientBeginFileUpload_Response} CCloud_ClientBeginFileUpload_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_ClientBeginFileUpload_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CCloud_ClientBeginFileUpload_Response message.
         * @function verify
         * @memberof CCloud_ClientBeginFileUpload_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CCloud_ClientBeginFileUpload_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.encrypt_file != null && message.hasOwnProperty("encrypt_file"))
                if (typeof message.encrypt_file !== "boolean")
                    return "encrypt_file: boolean expected";
            if (message.block_requests != null && message.hasOwnProperty("block_requests")) {
                if (!Array.isArray(message.block_requests))
                    return "block_requests: array expected";
                for (var i = 0; i < message.block_requests.length; ++i) {
                    var error = $root.ClientCloudFileUploadBlockDetails.verify(message.block_requests[i]);
                    if (error)
                        return "block_requests." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CCloud_ClientBeginFileUpload_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CCloud_ClientBeginFileUpload_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CCloud_ClientBeginFileUpload_Response} CCloud_ClientBeginFileUpload_Response
         */
        CCloud_ClientBeginFileUpload_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CCloud_ClientBeginFileUpload_Response)
                return object;
            var message = new $root.CCloud_ClientBeginFileUpload_Response();
            if (object.encrypt_file != null)
                message.encrypt_file = Boolean(object.encrypt_file);
            if (object.block_requests) {
                if (!Array.isArray(object.block_requests))
                    throw TypeError(".CCloud_ClientBeginFileUpload_Response.block_requests: array expected");
                message.block_requests = [];
                for (var i = 0; i < object.block_requests.length; ++i) {
                    if (typeof object.block_requests[i] !== "object")
                        throw TypeError(".CCloud_ClientBeginFileUpload_Response.block_requests: object expected");
                    message.block_requests[i] = $root.ClientCloudFileUploadBlockDetails.fromObject(object.block_requests[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CCloud_ClientBeginFileUpload_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CCloud_ClientBeginFileUpload_Response
         * @static
         * @param {CCloud_ClientBeginFileUpload_Response} message CCloud_ClientBeginFileUpload_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CCloud_ClientBeginFileUpload_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.block_requests = [];
            if (options.defaults)
                object.encrypt_file = false;
            if (message.encrypt_file != null && message.hasOwnProperty("encrypt_file"))
                object.encrypt_file = message.encrypt_file;
            if (message.block_requests && message.block_requests.length) {
                object.block_requests = [];
                for (var j = 0; j < message.block_requests.length; ++j)
                    object.block_requests[j] = $root.ClientCloudFileUploadBlockDetails.toObject(message.block_requests[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CCloud_ClientBeginFileUpload_Response to JSON.
         * @function toJSON
         * @memberof CCloud_ClientBeginFileUpload_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CCloud_ClientBeginFileUpload_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CCloud_ClientBeginFileUpload_Response;
    })();
    
    $root.CCloud_ClientCommitFileUpload_Request = (function() {
    
        /**
         * Properties of a CCloud_ClientCommitFileUpload_Request.
         * @exports ICCloud_ClientCommitFileUpload_Request
         * @interface ICCloud_ClientCommitFileUpload_Request
         * @property {boolean|null} [transfer_succeeded] CCloud_ClientCommitFileUpload_Request transfer_succeeded
         * @property {number|null} [appid] CCloud_ClientCommitFileUpload_Request appid
         * @property {Uint8Array|null} [file_sha] CCloud_ClientCommitFileUpload_Request file_sha
         * @property {string|null} [filename] CCloud_ClientCommitFileUpload_Request filename
         */
    
        /**
         * Constructs a new CCloud_ClientCommitFileUpload_Request.
         * @exports CCloud_ClientCommitFileUpload_Request
         * @classdesc Represents a CCloud_ClientCommitFileUpload_Request.
         * @implements ICCloud_ClientCommitFileUpload_Request
         * @constructor
         * @param {ICCloud_ClientCommitFileUpload_Request=} [properties] Properties to set
         */
        function CCloud_ClientCommitFileUpload_Request(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CCloud_ClientCommitFileUpload_Request transfer_succeeded.
         * @member {boolean} transfer_succeeded
         * @memberof CCloud_ClientCommitFileUpload_Request
         * @instance
         */
        CCloud_ClientCommitFileUpload_Request.prototype.transfer_succeeded = false;
    
        /**
         * CCloud_ClientCommitFileUpload_Request appid.
         * @member {number} appid
         * @memberof CCloud_ClientCommitFileUpload_Request
         * @instance
         */
        CCloud_ClientCommitFileUpload_Request.prototype.appid = 0;
    
        /**
         * CCloud_ClientCommitFileUpload_Request file_sha.
         * @member {Uint8Array} file_sha
         * @memberof CCloud_ClientCommitFileUpload_Request
         * @instance
         */
        CCloud_ClientCommitFileUpload_Request.prototype.file_sha = $util.newBuffer([]);
    
        /**
         * CCloud_ClientCommitFileUpload_Request filename.
         * @member {string} filename
         * @memberof CCloud_ClientCommitFileUpload_Request
         * @instance
         */
        CCloud_ClientCommitFileUpload_Request.prototype.filename = "";
    
        /**
         * Creates a new CCloud_ClientCommitFileUpload_Request instance using the specified properties.
         * @function create
         * @memberof CCloud_ClientCommitFileUpload_Request
         * @static
         * @param {ICCloud_ClientCommitFileUpload_Request=} [properties] Properties to set
         * @returns {CCloud_ClientCommitFileUpload_Request} CCloud_ClientCommitFileUpload_Request instance
         */
        CCloud_ClientCommitFileUpload_Request.create = function create(properties) {
            return new CCloud_ClientCommitFileUpload_Request(properties);
        };
    
        /**
         * Encodes the specified CCloud_ClientCommitFileUpload_Request message. Does not implicitly {@link CCloud_ClientCommitFileUpload_Request.verify|verify} messages.
         * @function encode
         * @memberof CCloud_ClientCommitFileUpload_Request
         * @static
         * @param {ICCloud_ClientCommitFileUpload_Request} message CCloud_ClientCommitFileUpload_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_ClientCommitFileUpload_Request.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.transfer_succeeded != null && message.hasOwnProperty("transfer_succeeded"))
                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.transfer_succeeded);
            if (message.appid != null && message.hasOwnProperty("appid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.appid);
            if (message.file_sha != null && message.hasOwnProperty("file_sha"))
                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.file_sha);
            if (message.filename != null && message.hasOwnProperty("filename"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.filename);
            return writer;
        };
    
        /**
         * Encodes the specified CCloud_ClientCommitFileUpload_Request message, length delimited. Does not implicitly {@link CCloud_ClientCommitFileUpload_Request.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CCloud_ClientCommitFileUpload_Request
         * @static
         * @param {ICCloud_ClientCommitFileUpload_Request} message CCloud_ClientCommitFileUpload_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_ClientCommitFileUpload_Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CCloud_ClientCommitFileUpload_Request message from the specified reader or buffer.
         * @function decode
         * @memberof CCloud_ClientCommitFileUpload_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CCloud_ClientCommitFileUpload_Request} CCloud_ClientCommitFileUpload_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_ClientCommitFileUpload_Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CCloud_ClientCommitFileUpload_Request();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.transfer_succeeded = reader.bool();
                    break;
                case 2:
                    message.appid = reader.uint32();
                    break;
                case 3:
                    message.file_sha = reader.bytes();
                    break;
                case 4:
                    message.filename = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CCloud_ClientCommitFileUpload_Request message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CCloud_ClientCommitFileUpload_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CCloud_ClientCommitFileUpload_Request} CCloud_ClientCommitFileUpload_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_ClientCommitFileUpload_Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CCloud_ClientCommitFileUpload_Request message.
         * @function verify
         * @memberof CCloud_ClientCommitFileUpload_Request
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CCloud_ClientCommitFileUpload_Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.transfer_succeeded != null && message.hasOwnProperty("transfer_succeeded"))
                if (typeof message.transfer_succeeded !== "boolean")
                    return "transfer_succeeded: boolean expected";
            if (message.appid != null && message.hasOwnProperty("appid"))
                if (!$util.isInteger(message.appid))
                    return "appid: integer expected";
            if (message.file_sha != null && message.hasOwnProperty("file_sha"))
                if (!(message.file_sha && typeof message.file_sha.length === "number" || $util.isString(message.file_sha)))
                    return "file_sha: buffer expected";
            if (message.filename != null && message.hasOwnProperty("filename"))
                if (!$util.isString(message.filename))
                    return "filename: string expected";
            return null;
        };
    
        /**
         * Creates a CCloud_ClientCommitFileUpload_Request message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CCloud_ClientCommitFileUpload_Request
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CCloud_ClientCommitFileUpload_Request} CCloud_ClientCommitFileUpload_Request
         */
        CCloud_ClientCommitFileUpload_Request.fromObject = function fromObject(object) {
            if (object instanceof $root.CCloud_ClientCommitFileUpload_Request)
                return object;
            var message = new $root.CCloud_ClientCommitFileUpload_Request();
            if (object.transfer_succeeded != null)
                message.transfer_succeeded = Boolean(object.transfer_succeeded);
            if (object.appid != null)
                message.appid = object.appid >>> 0;
            if (object.file_sha != null)
                if (typeof object.file_sha === "string")
                    $util.base64.decode(object.file_sha, message.file_sha = $util.newBuffer($util.base64.length(object.file_sha)), 0);
                else if (object.file_sha.length)
                    message.file_sha = object.file_sha;
            if (object.filename != null)
                message.filename = String(object.filename);
            return message;
        };
    
        /**
         * Creates a plain object from a CCloud_ClientCommitFileUpload_Request message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CCloud_ClientCommitFileUpload_Request
         * @static
         * @param {CCloud_ClientCommitFileUpload_Request} message CCloud_ClientCommitFileUpload_Request
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CCloud_ClientCommitFileUpload_Request.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.transfer_succeeded = false;
                object.appid = 0;
                if (options.bytes === String)
                    object.file_sha = "";
                else {
                    object.file_sha = [];
                    if (options.bytes !== Array)
                        object.file_sha = $util.newBuffer(object.file_sha);
                }
                object.filename = "";
            }
            if (message.transfer_succeeded != null && message.hasOwnProperty("transfer_succeeded"))
                object.transfer_succeeded = message.transfer_succeeded;
            if (message.appid != null && message.hasOwnProperty("appid"))
                object.appid = message.appid;
            if (message.file_sha != null && message.hasOwnProperty("file_sha"))
                object.file_sha = options.bytes === String ? $util.base64.encode(message.file_sha, 0, message.file_sha.length) : options.bytes === Array ? Array.prototype.slice.call(message.file_sha) : message.file_sha;
            if (message.filename != null && message.hasOwnProperty("filename"))
                object.filename = message.filename;
            return object;
        };
    
        /**
         * Converts this CCloud_ClientCommitFileUpload_Request to JSON.
         * @function toJSON
         * @memberof CCloud_ClientCommitFileUpload_Request
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CCloud_ClientCommitFileUpload_Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CCloud_ClientCommitFileUpload_Request;
    })();
    
    $root.CCloud_ClientCommitFileUpload_Response = (function() {
    
        /**
         * Properties of a CCloud_ClientCommitFileUpload_Response.
         * @exports ICCloud_ClientCommitFileUpload_Response
         * @interface ICCloud_ClientCommitFileUpload_Response
         * @property {boolean|null} [file_committed] CCloud_ClientCommitFileUpload_Response file_committed
         */
    
        /**
         * Constructs a new CCloud_ClientCommitFileUpload_Response.
         * @exports CCloud_ClientCommitFileUpload_Response
         * @classdesc Represents a CCloud_ClientCommitFileUpload_Response.
         * @implements ICCloud_ClientCommitFileUpload_Response
         * @constructor
         * @param {ICCloud_ClientCommitFileUpload_Response=} [properties] Properties to set
         */
        function CCloud_ClientCommitFileUpload_Response(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CCloud_ClientCommitFileUpload_Response file_committed.
         * @member {boolean} file_committed
         * @memberof CCloud_ClientCommitFileUpload_Response
         * @instance
         */
        CCloud_ClientCommitFileUpload_Response.prototype.file_committed = false;
    
        /**
         * Creates a new CCloud_ClientCommitFileUpload_Response instance using the specified properties.
         * @function create
         * @memberof CCloud_ClientCommitFileUpload_Response
         * @static
         * @param {ICCloud_ClientCommitFileUpload_Response=} [properties] Properties to set
         * @returns {CCloud_ClientCommitFileUpload_Response} CCloud_ClientCommitFileUpload_Response instance
         */
        CCloud_ClientCommitFileUpload_Response.create = function create(properties) {
            return new CCloud_ClientCommitFileUpload_Response(properties);
        };
    
        /**
         * Encodes the specified CCloud_ClientCommitFileUpload_Response message. Does not implicitly {@link CCloud_ClientCommitFileUpload_Response.verify|verify} messages.
         * @function encode
         * @memberof CCloud_ClientCommitFileUpload_Response
         * @static
         * @param {ICCloud_ClientCommitFileUpload_Response} message CCloud_ClientCommitFileUpload_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_ClientCommitFileUpload_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.file_committed != null && message.hasOwnProperty("file_committed"))
                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.file_committed);
            return writer;
        };
    
        /**
         * Encodes the specified CCloud_ClientCommitFileUpload_Response message, length delimited. Does not implicitly {@link CCloud_ClientCommitFileUpload_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CCloud_ClientCommitFileUpload_Response
         * @static
         * @param {ICCloud_ClientCommitFileUpload_Response} message CCloud_ClientCommitFileUpload_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_ClientCommitFileUpload_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CCloud_ClientCommitFileUpload_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CCloud_ClientCommitFileUpload_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CCloud_ClientCommitFileUpload_Response} CCloud_ClientCommitFileUpload_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_ClientCommitFileUpload_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CCloud_ClientCommitFileUpload_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.file_committed = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CCloud_ClientCommitFileUpload_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CCloud_ClientCommitFileUpload_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CCloud_ClientCommitFileUpload_Response} CCloud_ClientCommitFileUpload_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_ClientCommitFileUpload_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CCloud_ClientCommitFileUpload_Response message.
         * @function verify
         * @memberof CCloud_ClientCommitFileUpload_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CCloud_ClientCommitFileUpload_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.file_committed != null && message.hasOwnProperty("file_committed"))
                if (typeof message.file_committed !== "boolean")
                    return "file_committed: boolean expected";
            return null;
        };
    
        /**
         * Creates a CCloud_ClientCommitFileUpload_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CCloud_ClientCommitFileUpload_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CCloud_ClientCommitFileUpload_Response} CCloud_ClientCommitFileUpload_Response
         */
        CCloud_ClientCommitFileUpload_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CCloud_ClientCommitFileUpload_Response)
                return object;
            var message = new $root.CCloud_ClientCommitFileUpload_Response();
            if (object.file_committed != null)
                message.file_committed = Boolean(object.file_committed);
            return message;
        };
    
        /**
         * Creates a plain object from a CCloud_ClientCommitFileUpload_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CCloud_ClientCommitFileUpload_Response
         * @static
         * @param {CCloud_ClientCommitFileUpload_Response} message CCloud_ClientCommitFileUpload_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CCloud_ClientCommitFileUpload_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.file_committed = false;
            if (message.file_committed != null && message.hasOwnProperty("file_committed"))
                object.file_committed = message.file_committed;
            return object;
        };
    
        /**
         * Converts this CCloud_ClientCommitFileUpload_Response to JSON.
         * @function toJSON
         * @memberof CCloud_ClientCommitFileUpload_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CCloud_ClientCommitFileUpload_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CCloud_ClientCommitFileUpload_Response;
    })();
    
    $root.CCloud_ClientFileDownload_Request = (function() {
    
        /**
         * Properties of a CCloud_ClientFileDownload_Request.
         * @exports ICCloud_ClientFileDownload_Request
         * @interface ICCloud_ClientFileDownload_Request
         * @property {number|null} [appid] CCloud_ClientFileDownload_Request appid
         * @property {string|null} [filename] CCloud_ClientFileDownload_Request filename
         * @property {number|null} [realm] CCloud_ClientFileDownload_Request realm
         */
    
        /**
         * Constructs a new CCloud_ClientFileDownload_Request.
         * @exports CCloud_ClientFileDownload_Request
         * @classdesc Represents a CCloud_ClientFileDownload_Request.
         * @implements ICCloud_ClientFileDownload_Request
         * @constructor
         * @param {ICCloud_ClientFileDownload_Request=} [properties] Properties to set
         */
        function CCloud_ClientFileDownload_Request(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CCloud_ClientFileDownload_Request appid.
         * @member {number} appid
         * @memberof CCloud_ClientFileDownload_Request
         * @instance
         */
        CCloud_ClientFileDownload_Request.prototype.appid = 0;
    
        /**
         * CCloud_ClientFileDownload_Request filename.
         * @member {string} filename
         * @memberof CCloud_ClientFileDownload_Request
         * @instance
         */
        CCloud_ClientFileDownload_Request.prototype.filename = "";
    
        /**
         * CCloud_ClientFileDownload_Request realm.
         * @member {number} realm
         * @memberof CCloud_ClientFileDownload_Request
         * @instance
         */
        CCloud_ClientFileDownload_Request.prototype.realm = 0;
    
        /**
         * Creates a new CCloud_ClientFileDownload_Request instance using the specified properties.
         * @function create
         * @memberof CCloud_ClientFileDownload_Request
         * @static
         * @param {ICCloud_ClientFileDownload_Request=} [properties] Properties to set
         * @returns {CCloud_ClientFileDownload_Request} CCloud_ClientFileDownload_Request instance
         */
        CCloud_ClientFileDownload_Request.create = function create(properties) {
            return new CCloud_ClientFileDownload_Request(properties);
        };
    
        /**
         * Encodes the specified CCloud_ClientFileDownload_Request message. Does not implicitly {@link CCloud_ClientFileDownload_Request.verify|verify} messages.
         * @function encode
         * @memberof CCloud_ClientFileDownload_Request
         * @static
         * @param {ICCloud_ClientFileDownload_Request} message CCloud_ClientFileDownload_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_ClientFileDownload_Request.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.appid != null && message.hasOwnProperty("appid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.appid);
            if (message.filename != null && message.hasOwnProperty("filename"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.filename);
            if (message.realm != null && message.hasOwnProperty("realm"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.realm);
            return writer;
        };
    
        /**
         * Encodes the specified CCloud_ClientFileDownload_Request message, length delimited. Does not implicitly {@link CCloud_ClientFileDownload_Request.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CCloud_ClientFileDownload_Request
         * @static
         * @param {ICCloud_ClientFileDownload_Request} message CCloud_ClientFileDownload_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_ClientFileDownload_Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CCloud_ClientFileDownload_Request message from the specified reader or buffer.
         * @function decode
         * @memberof CCloud_ClientFileDownload_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CCloud_ClientFileDownload_Request} CCloud_ClientFileDownload_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_ClientFileDownload_Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CCloud_ClientFileDownload_Request();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.appid = reader.uint32();
                    break;
                case 2:
                    message.filename = reader.string();
                    break;
                case 3:
                    message.realm = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CCloud_ClientFileDownload_Request message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CCloud_ClientFileDownload_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CCloud_ClientFileDownload_Request} CCloud_ClientFileDownload_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_ClientFileDownload_Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CCloud_ClientFileDownload_Request message.
         * @function verify
         * @memberof CCloud_ClientFileDownload_Request
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CCloud_ClientFileDownload_Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.appid != null && message.hasOwnProperty("appid"))
                if (!$util.isInteger(message.appid))
                    return "appid: integer expected";
            if (message.filename != null && message.hasOwnProperty("filename"))
                if (!$util.isString(message.filename))
                    return "filename: string expected";
            if (message.realm != null && message.hasOwnProperty("realm"))
                if (!$util.isInteger(message.realm))
                    return "realm: integer expected";
            return null;
        };
    
        /**
         * Creates a CCloud_ClientFileDownload_Request message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CCloud_ClientFileDownload_Request
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CCloud_ClientFileDownload_Request} CCloud_ClientFileDownload_Request
         */
        CCloud_ClientFileDownload_Request.fromObject = function fromObject(object) {
            if (object instanceof $root.CCloud_ClientFileDownload_Request)
                return object;
            var message = new $root.CCloud_ClientFileDownload_Request();
            if (object.appid != null)
                message.appid = object.appid >>> 0;
            if (object.filename != null)
                message.filename = String(object.filename);
            if (object.realm != null)
                message.realm = object.realm >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CCloud_ClientFileDownload_Request message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CCloud_ClientFileDownload_Request
         * @static
         * @param {CCloud_ClientFileDownload_Request} message CCloud_ClientFileDownload_Request
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CCloud_ClientFileDownload_Request.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.appid = 0;
                object.filename = "";
                object.realm = 0;
            }
            if (message.appid != null && message.hasOwnProperty("appid"))
                object.appid = message.appid;
            if (message.filename != null && message.hasOwnProperty("filename"))
                object.filename = message.filename;
            if (message.realm != null && message.hasOwnProperty("realm"))
                object.realm = message.realm;
            return object;
        };
    
        /**
         * Converts this CCloud_ClientFileDownload_Request to JSON.
         * @function toJSON
         * @memberof CCloud_ClientFileDownload_Request
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CCloud_ClientFileDownload_Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CCloud_ClientFileDownload_Request;
    })();
    
    $root.CCloud_ClientFileDownload_Response = (function() {
    
        /**
         * Properties of a CCloud_ClientFileDownload_Response.
         * @exports ICCloud_ClientFileDownload_Response
         * @interface ICCloud_ClientFileDownload_Response
         * @property {number|null} [appid] CCloud_ClientFileDownload_Response appid
         * @property {number|null} [file_size] CCloud_ClientFileDownload_Response file_size
         * @property {number|null} [raw_file_size] CCloud_ClientFileDownload_Response raw_file_size
         * @property {Uint8Array|null} [sha_file] CCloud_ClientFileDownload_Response sha_file
         * @property {number|Long|null} [time_stamp] CCloud_ClientFileDownload_Response time_stamp
         * @property {boolean|null} [is_explicit_delete] CCloud_ClientFileDownload_Response is_explicit_delete
         * @property {string|null} [url_host] CCloud_ClientFileDownload_Response url_host
         * @property {string|null} [url_path] CCloud_ClientFileDownload_Response url_path
         * @property {boolean|null} [use_https] CCloud_ClientFileDownload_Response use_https
         * @property {Array.<CCloud_ClientFileDownload_Response.IHTTPHeaders>|null} [request_headers] CCloud_ClientFileDownload_Response request_headers
         * @property {boolean|null} [encrypted] CCloud_ClientFileDownload_Response encrypted
         */
    
        /**
         * Constructs a new CCloud_ClientFileDownload_Response.
         * @exports CCloud_ClientFileDownload_Response
         * @classdesc Represents a CCloud_ClientFileDownload_Response.
         * @implements ICCloud_ClientFileDownload_Response
         * @constructor
         * @param {ICCloud_ClientFileDownload_Response=} [properties] Properties to set
         */
        function CCloud_ClientFileDownload_Response(properties) {
            this.request_headers = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CCloud_ClientFileDownload_Response appid.
         * @member {number} appid
         * @memberof CCloud_ClientFileDownload_Response
         * @instance
         */
        CCloud_ClientFileDownload_Response.prototype.appid = 0;
    
        /**
         * CCloud_ClientFileDownload_Response file_size.
         * @member {number} file_size
         * @memberof CCloud_ClientFileDownload_Response
         * @instance
         */
        CCloud_ClientFileDownload_Response.prototype.file_size = 0;
    
        /**
         * CCloud_ClientFileDownload_Response raw_file_size.
         * @member {number} raw_file_size
         * @memberof CCloud_ClientFileDownload_Response
         * @instance
         */
        CCloud_ClientFileDownload_Response.prototype.raw_file_size = 0;
    
        /**
         * CCloud_ClientFileDownload_Response sha_file.
         * @member {Uint8Array} sha_file
         * @memberof CCloud_ClientFileDownload_Response
         * @instance
         */
        CCloud_ClientFileDownload_Response.prototype.sha_file = $util.newBuffer([]);
    
        /**
         * CCloud_ClientFileDownload_Response time_stamp.
         * @member {number|Long} time_stamp
         * @memberof CCloud_ClientFileDownload_Response
         * @instance
         */
        CCloud_ClientFileDownload_Response.prototype.time_stamp = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CCloud_ClientFileDownload_Response is_explicit_delete.
         * @member {boolean} is_explicit_delete
         * @memberof CCloud_ClientFileDownload_Response
         * @instance
         */
        CCloud_ClientFileDownload_Response.prototype.is_explicit_delete = false;
    
        /**
         * CCloud_ClientFileDownload_Response url_host.
         * @member {string} url_host
         * @memberof CCloud_ClientFileDownload_Response
         * @instance
         */
        CCloud_ClientFileDownload_Response.prototype.url_host = "";
    
        /**
         * CCloud_ClientFileDownload_Response url_path.
         * @member {string} url_path
         * @memberof CCloud_ClientFileDownload_Response
         * @instance
         */
        CCloud_ClientFileDownload_Response.prototype.url_path = "";
    
        /**
         * CCloud_ClientFileDownload_Response use_https.
         * @member {boolean} use_https
         * @memberof CCloud_ClientFileDownload_Response
         * @instance
         */
        CCloud_ClientFileDownload_Response.prototype.use_https = false;
    
        /**
         * CCloud_ClientFileDownload_Response request_headers.
         * @member {Array.<CCloud_ClientFileDownload_Response.IHTTPHeaders>} request_headers
         * @memberof CCloud_ClientFileDownload_Response
         * @instance
         */
        CCloud_ClientFileDownload_Response.prototype.request_headers = $util.emptyArray;
    
        /**
         * CCloud_ClientFileDownload_Response encrypted.
         * @member {boolean} encrypted
         * @memberof CCloud_ClientFileDownload_Response
         * @instance
         */
        CCloud_ClientFileDownload_Response.prototype.encrypted = false;
    
        /**
         * Creates a new CCloud_ClientFileDownload_Response instance using the specified properties.
         * @function create
         * @memberof CCloud_ClientFileDownload_Response
         * @static
         * @param {ICCloud_ClientFileDownload_Response=} [properties] Properties to set
         * @returns {CCloud_ClientFileDownload_Response} CCloud_ClientFileDownload_Response instance
         */
        CCloud_ClientFileDownload_Response.create = function create(properties) {
            return new CCloud_ClientFileDownload_Response(properties);
        };
    
        /**
         * Encodes the specified CCloud_ClientFileDownload_Response message. Does not implicitly {@link CCloud_ClientFileDownload_Response.verify|verify} messages.
         * @function encode
         * @memberof CCloud_ClientFileDownload_Response
         * @static
         * @param {ICCloud_ClientFileDownload_Response} message CCloud_ClientFileDownload_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_ClientFileDownload_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.appid != null && message.hasOwnProperty("appid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.appid);
            if (message.file_size != null && message.hasOwnProperty("file_size"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.file_size);
            if (message.raw_file_size != null && message.hasOwnProperty("raw_file_size"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.raw_file_size);
            if (message.sha_file != null && message.hasOwnProperty("sha_file"))
                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.sha_file);
            if (message.time_stamp != null && message.hasOwnProperty("time_stamp"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.time_stamp);
            if (message.is_explicit_delete != null && message.hasOwnProperty("is_explicit_delete"))
                writer.uint32(/* id 6, wireType 0 =*/48).bool(message.is_explicit_delete);
            if (message.url_host != null && message.hasOwnProperty("url_host"))
                writer.uint32(/* id 7, wireType 2 =*/58).string(message.url_host);
            if (message.url_path != null && message.hasOwnProperty("url_path"))
                writer.uint32(/* id 8, wireType 2 =*/66).string(message.url_path);
            if (message.use_https != null && message.hasOwnProperty("use_https"))
                writer.uint32(/* id 9, wireType 0 =*/72).bool(message.use_https);
            if (message.request_headers != null && message.request_headers.length)
                for (var i = 0; i < message.request_headers.length; ++i)
                    $root.CCloud_ClientFileDownload_Response.HTTPHeaders.encode(message.request_headers[i], writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
            if (message.encrypted != null && message.hasOwnProperty("encrypted"))
                writer.uint32(/* id 11, wireType 0 =*/88).bool(message.encrypted);
            return writer;
        };
    
        /**
         * Encodes the specified CCloud_ClientFileDownload_Response message, length delimited. Does not implicitly {@link CCloud_ClientFileDownload_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CCloud_ClientFileDownload_Response
         * @static
         * @param {ICCloud_ClientFileDownload_Response} message CCloud_ClientFileDownload_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_ClientFileDownload_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CCloud_ClientFileDownload_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CCloud_ClientFileDownload_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CCloud_ClientFileDownload_Response} CCloud_ClientFileDownload_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_ClientFileDownload_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CCloud_ClientFileDownload_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.appid = reader.uint32();
                    break;
                case 2:
                    message.file_size = reader.uint32();
                    break;
                case 3:
                    message.raw_file_size = reader.uint32();
                    break;
                case 4:
                    message.sha_file = reader.bytes();
                    break;
                case 5:
                    message.time_stamp = reader.uint64();
                    break;
                case 6:
                    message.is_explicit_delete = reader.bool();
                    break;
                case 7:
                    message.url_host = reader.string();
                    break;
                case 8:
                    message.url_path = reader.string();
                    break;
                case 9:
                    message.use_https = reader.bool();
                    break;
                case 10:
                    if (!(message.request_headers && message.request_headers.length))
                        message.request_headers = [];
                    message.request_headers.push($root.CCloud_ClientFileDownload_Response.HTTPHeaders.decode(reader, reader.uint32()));
                    break;
                case 11:
                    message.encrypted = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CCloud_ClientFileDownload_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CCloud_ClientFileDownload_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CCloud_ClientFileDownload_Response} CCloud_ClientFileDownload_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_ClientFileDownload_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CCloud_ClientFileDownload_Response message.
         * @function verify
         * @memberof CCloud_ClientFileDownload_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CCloud_ClientFileDownload_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.appid != null && message.hasOwnProperty("appid"))
                if (!$util.isInteger(message.appid))
                    return "appid: integer expected";
            if (message.file_size != null && message.hasOwnProperty("file_size"))
                if (!$util.isInteger(message.file_size))
                    return "file_size: integer expected";
            if (message.raw_file_size != null && message.hasOwnProperty("raw_file_size"))
                if (!$util.isInteger(message.raw_file_size))
                    return "raw_file_size: integer expected";
            if (message.sha_file != null && message.hasOwnProperty("sha_file"))
                if (!(message.sha_file && typeof message.sha_file.length === "number" || $util.isString(message.sha_file)))
                    return "sha_file: buffer expected";
            if (message.time_stamp != null && message.hasOwnProperty("time_stamp"))
                if (!$util.isInteger(message.time_stamp) && !(message.time_stamp && $util.isInteger(message.time_stamp.low) && $util.isInteger(message.time_stamp.high)))
                    return "time_stamp: integer|Long expected";
            if (message.is_explicit_delete != null && message.hasOwnProperty("is_explicit_delete"))
                if (typeof message.is_explicit_delete !== "boolean")
                    return "is_explicit_delete: boolean expected";
            if (message.url_host != null && message.hasOwnProperty("url_host"))
                if (!$util.isString(message.url_host))
                    return "url_host: string expected";
            if (message.url_path != null && message.hasOwnProperty("url_path"))
                if (!$util.isString(message.url_path))
                    return "url_path: string expected";
            if (message.use_https != null && message.hasOwnProperty("use_https"))
                if (typeof message.use_https !== "boolean")
                    return "use_https: boolean expected";
            if (message.request_headers != null && message.hasOwnProperty("request_headers")) {
                if (!Array.isArray(message.request_headers))
                    return "request_headers: array expected";
                for (var i = 0; i < message.request_headers.length; ++i) {
                    var error = $root.CCloud_ClientFileDownload_Response.HTTPHeaders.verify(message.request_headers[i]);
                    if (error)
                        return "request_headers." + error;
                }
            }
            if (message.encrypted != null && message.hasOwnProperty("encrypted"))
                if (typeof message.encrypted !== "boolean")
                    return "encrypted: boolean expected";
            return null;
        };
    
        /**
         * Creates a CCloud_ClientFileDownload_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CCloud_ClientFileDownload_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CCloud_ClientFileDownload_Response} CCloud_ClientFileDownload_Response
         */
        CCloud_ClientFileDownload_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CCloud_ClientFileDownload_Response)
                return object;
            var message = new $root.CCloud_ClientFileDownload_Response();
            if (object.appid != null)
                message.appid = object.appid >>> 0;
            if (object.file_size != null)
                message.file_size = object.file_size >>> 0;
            if (object.raw_file_size != null)
                message.raw_file_size = object.raw_file_size >>> 0;
            if (object.sha_file != null)
                if (typeof object.sha_file === "string")
                    $util.base64.decode(object.sha_file, message.sha_file = $util.newBuffer($util.base64.length(object.sha_file)), 0);
                else if (object.sha_file.length)
                    message.sha_file = object.sha_file;
            if (object.time_stamp != null)
                if ($util.Long)
                    (message.time_stamp = $util.Long.fromValue(object.time_stamp)).unsigned = true;
                else if (typeof object.time_stamp === "string")
                    message.time_stamp = parseInt(object.time_stamp, 10);
                else if (typeof object.time_stamp === "number")
                    message.time_stamp = object.time_stamp;
                else if (typeof object.time_stamp === "object")
                    message.time_stamp = new $util.LongBits(object.time_stamp.low >>> 0, object.time_stamp.high >>> 0).toNumber(true);
            if (object.is_explicit_delete != null)
                message.is_explicit_delete = Boolean(object.is_explicit_delete);
            if (object.url_host != null)
                message.url_host = String(object.url_host);
            if (object.url_path != null)
                message.url_path = String(object.url_path);
            if (object.use_https != null)
                message.use_https = Boolean(object.use_https);
            if (object.request_headers) {
                if (!Array.isArray(object.request_headers))
                    throw TypeError(".CCloud_ClientFileDownload_Response.request_headers: array expected");
                message.request_headers = [];
                for (var i = 0; i < object.request_headers.length; ++i) {
                    if (typeof object.request_headers[i] !== "object")
                        throw TypeError(".CCloud_ClientFileDownload_Response.request_headers: object expected");
                    message.request_headers[i] = $root.CCloud_ClientFileDownload_Response.HTTPHeaders.fromObject(object.request_headers[i]);
                }
            }
            if (object.encrypted != null)
                message.encrypted = Boolean(object.encrypted);
            return message;
        };
    
        /**
         * Creates a plain object from a CCloud_ClientFileDownload_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CCloud_ClientFileDownload_Response
         * @static
         * @param {CCloud_ClientFileDownload_Response} message CCloud_ClientFileDownload_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CCloud_ClientFileDownload_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.request_headers = [];
            if (options.defaults) {
                object.appid = 0;
                object.file_size = 0;
                object.raw_file_size = 0;
                if (options.bytes === String)
                    object.sha_file = "";
                else {
                    object.sha_file = [];
                    if (options.bytes !== Array)
                        object.sha_file = $util.newBuffer(object.sha_file);
                }
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.time_stamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.time_stamp = options.longs === String ? "0" : 0;
                object.is_explicit_delete = false;
                object.url_host = "";
                object.url_path = "";
                object.use_https = false;
                object.encrypted = false;
            }
            if (message.appid != null && message.hasOwnProperty("appid"))
                object.appid = message.appid;
            if (message.file_size != null && message.hasOwnProperty("file_size"))
                object.file_size = message.file_size;
            if (message.raw_file_size != null && message.hasOwnProperty("raw_file_size"))
                object.raw_file_size = message.raw_file_size;
            if (message.sha_file != null && message.hasOwnProperty("sha_file"))
                object.sha_file = options.bytes === String ? $util.base64.encode(message.sha_file, 0, message.sha_file.length) : options.bytes === Array ? Array.prototype.slice.call(message.sha_file) : message.sha_file;
            if (message.time_stamp != null && message.hasOwnProperty("time_stamp"))
                if (typeof message.time_stamp === "number")
                    object.time_stamp = options.longs === String ? String(message.time_stamp) : message.time_stamp;
                else
                    object.time_stamp = options.longs === String ? $util.Long.prototype.toString.call(message.time_stamp) : options.longs === Number ? new $util.LongBits(message.time_stamp.low >>> 0, message.time_stamp.high >>> 0).toNumber(true) : message.time_stamp;
            if (message.is_explicit_delete != null && message.hasOwnProperty("is_explicit_delete"))
                object.is_explicit_delete = message.is_explicit_delete;
            if (message.url_host != null && message.hasOwnProperty("url_host"))
                object.url_host = message.url_host;
            if (message.url_path != null && message.hasOwnProperty("url_path"))
                object.url_path = message.url_path;
            if (message.use_https != null && message.hasOwnProperty("use_https"))
                object.use_https = message.use_https;
            if (message.request_headers && message.request_headers.length) {
                object.request_headers = [];
                for (var j = 0; j < message.request_headers.length; ++j)
                    object.request_headers[j] = $root.CCloud_ClientFileDownload_Response.HTTPHeaders.toObject(message.request_headers[j], options);
            }
            if (message.encrypted != null && message.hasOwnProperty("encrypted"))
                object.encrypted = message.encrypted;
            return object;
        };
    
        /**
         * Converts this CCloud_ClientFileDownload_Response to JSON.
         * @function toJSON
         * @memberof CCloud_ClientFileDownload_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CCloud_ClientFileDownload_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        CCloud_ClientFileDownload_Response.HTTPHeaders = (function() {
    
            /**
             * Properties of a HTTPHeaders.
             * @memberof CCloud_ClientFileDownload_Response
             * @interface IHTTPHeaders
             * @property {string|null} [name] HTTPHeaders name
             * @property {string|null} [value] HTTPHeaders value
             */
    
            /**
             * Constructs a new HTTPHeaders.
             * @memberof CCloud_ClientFileDownload_Response
             * @classdesc Represents a HTTPHeaders.
             * @implements IHTTPHeaders
             * @constructor
             * @param {CCloud_ClientFileDownload_Response.IHTTPHeaders=} [properties] Properties to set
             */
            function HTTPHeaders(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * HTTPHeaders name.
             * @member {string} name
             * @memberof CCloud_ClientFileDownload_Response.HTTPHeaders
             * @instance
             */
            HTTPHeaders.prototype.name = "";
    
            /**
             * HTTPHeaders value.
             * @member {string} value
             * @memberof CCloud_ClientFileDownload_Response.HTTPHeaders
             * @instance
             */
            HTTPHeaders.prototype.value = "";
    
            /**
             * Creates a new HTTPHeaders instance using the specified properties.
             * @function create
             * @memberof CCloud_ClientFileDownload_Response.HTTPHeaders
             * @static
             * @param {CCloud_ClientFileDownload_Response.IHTTPHeaders=} [properties] Properties to set
             * @returns {CCloud_ClientFileDownload_Response.HTTPHeaders} HTTPHeaders instance
             */
            HTTPHeaders.create = function create(properties) {
                return new HTTPHeaders(properties);
            };
    
            /**
             * Encodes the specified HTTPHeaders message. Does not implicitly {@link CCloud_ClientFileDownload_Response.HTTPHeaders.verify|verify} messages.
             * @function encode
             * @memberof CCloud_ClientFileDownload_Response.HTTPHeaders
             * @static
             * @param {CCloud_ClientFileDownload_Response.IHTTPHeaders} message HTTPHeaders message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            HTTPHeaders.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && message.hasOwnProperty("name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.value != null && message.hasOwnProperty("value"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);
                return writer;
            };
    
            /**
             * Encodes the specified HTTPHeaders message, length delimited. Does not implicitly {@link CCloud_ClientFileDownload_Response.HTTPHeaders.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CCloud_ClientFileDownload_Response.HTTPHeaders
             * @static
             * @param {CCloud_ClientFileDownload_Response.IHTTPHeaders} message HTTPHeaders message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            HTTPHeaders.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a HTTPHeaders message from the specified reader or buffer.
             * @function decode
             * @memberof CCloud_ClientFileDownload_Response.HTTPHeaders
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CCloud_ClientFileDownload_Response.HTTPHeaders} HTTPHeaders
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            HTTPHeaders.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CCloud_ClientFileDownload_Response.HTTPHeaders();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        message.value = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a HTTPHeaders message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CCloud_ClientFileDownload_Response.HTTPHeaders
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CCloud_ClientFileDownload_Response.HTTPHeaders} HTTPHeaders
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            HTTPHeaders.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a HTTPHeaders message.
             * @function verify
             * @memberof CCloud_ClientFileDownload_Response.HTTPHeaders
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            HTTPHeaders.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.value != null && message.hasOwnProperty("value"))
                    if (!$util.isString(message.value))
                        return "value: string expected";
                return null;
            };
    
            /**
             * Creates a HTTPHeaders message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CCloud_ClientFileDownload_Response.HTTPHeaders
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CCloud_ClientFileDownload_Response.HTTPHeaders} HTTPHeaders
             */
            HTTPHeaders.fromObject = function fromObject(object) {
                if (object instanceof $root.CCloud_ClientFileDownload_Response.HTTPHeaders)
                    return object;
                var message = new $root.CCloud_ClientFileDownload_Response.HTTPHeaders();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.value != null)
                    message.value = String(object.value);
                return message;
            };
    
            /**
             * Creates a plain object from a HTTPHeaders message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CCloud_ClientFileDownload_Response.HTTPHeaders
             * @static
             * @param {CCloud_ClientFileDownload_Response.HTTPHeaders} message HTTPHeaders
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            HTTPHeaders.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.name = "";
                    object.value = "";
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.value != null && message.hasOwnProperty("value"))
                    object.value = message.value;
                return object;
            };
    
            /**
             * Converts this HTTPHeaders to JSON.
             * @function toJSON
             * @memberof CCloud_ClientFileDownload_Response.HTTPHeaders
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            HTTPHeaders.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return HTTPHeaders;
        })();
    
        return CCloud_ClientFileDownload_Response;
    })();
    
    $root.CCloud_ClientDeleteFile_Request = (function() {
    
        /**
         * Properties of a CCloud_ClientDeleteFile_Request.
         * @exports ICCloud_ClientDeleteFile_Request
         * @interface ICCloud_ClientDeleteFile_Request
         * @property {number|null} [appid] CCloud_ClientDeleteFile_Request appid
         * @property {string|null} [filename] CCloud_ClientDeleteFile_Request filename
         * @property {boolean|null} [is_explicit_delete] CCloud_ClientDeleteFile_Request is_explicit_delete
         * @property {number|Long|null} [upload_batch_id] CCloud_ClientDeleteFile_Request upload_batch_id
         */
    
        /**
         * Constructs a new CCloud_ClientDeleteFile_Request.
         * @exports CCloud_ClientDeleteFile_Request
         * @classdesc Represents a CCloud_ClientDeleteFile_Request.
         * @implements ICCloud_ClientDeleteFile_Request
         * @constructor
         * @param {ICCloud_ClientDeleteFile_Request=} [properties] Properties to set
         */
        function CCloud_ClientDeleteFile_Request(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CCloud_ClientDeleteFile_Request appid.
         * @member {number} appid
         * @memberof CCloud_ClientDeleteFile_Request
         * @instance
         */
        CCloud_ClientDeleteFile_Request.prototype.appid = 0;
    
        /**
         * CCloud_ClientDeleteFile_Request filename.
         * @member {string} filename
         * @memberof CCloud_ClientDeleteFile_Request
         * @instance
         */
        CCloud_ClientDeleteFile_Request.prototype.filename = "";
    
        /**
         * CCloud_ClientDeleteFile_Request is_explicit_delete.
         * @member {boolean} is_explicit_delete
         * @memberof CCloud_ClientDeleteFile_Request
         * @instance
         */
        CCloud_ClientDeleteFile_Request.prototype.is_explicit_delete = false;
    
        /**
         * CCloud_ClientDeleteFile_Request upload_batch_id.
         * @member {number|Long} upload_batch_id
         * @memberof CCloud_ClientDeleteFile_Request
         * @instance
         */
        CCloud_ClientDeleteFile_Request.prototype.upload_batch_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * Creates a new CCloud_ClientDeleteFile_Request instance using the specified properties.
         * @function create
         * @memberof CCloud_ClientDeleteFile_Request
         * @static
         * @param {ICCloud_ClientDeleteFile_Request=} [properties] Properties to set
         * @returns {CCloud_ClientDeleteFile_Request} CCloud_ClientDeleteFile_Request instance
         */
        CCloud_ClientDeleteFile_Request.create = function create(properties) {
            return new CCloud_ClientDeleteFile_Request(properties);
        };
    
        /**
         * Encodes the specified CCloud_ClientDeleteFile_Request message. Does not implicitly {@link CCloud_ClientDeleteFile_Request.verify|verify} messages.
         * @function encode
         * @memberof CCloud_ClientDeleteFile_Request
         * @static
         * @param {ICCloud_ClientDeleteFile_Request} message CCloud_ClientDeleteFile_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_ClientDeleteFile_Request.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.appid != null && message.hasOwnProperty("appid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.appid);
            if (message.filename != null && message.hasOwnProperty("filename"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.filename);
            if (message.is_explicit_delete != null && message.hasOwnProperty("is_explicit_delete"))
                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.is_explicit_delete);
            if (message.upload_batch_id != null && message.hasOwnProperty("upload_batch_id"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.upload_batch_id);
            return writer;
        };
    
        /**
         * Encodes the specified CCloud_ClientDeleteFile_Request message, length delimited. Does not implicitly {@link CCloud_ClientDeleteFile_Request.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CCloud_ClientDeleteFile_Request
         * @static
         * @param {ICCloud_ClientDeleteFile_Request} message CCloud_ClientDeleteFile_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_ClientDeleteFile_Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CCloud_ClientDeleteFile_Request message from the specified reader or buffer.
         * @function decode
         * @memberof CCloud_ClientDeleteFile_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CCloud_ClientDeleteFile_Request} CCloud_ClientDeleteFile_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_ClientDeleteFile_Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CCloud_ClientDeleteFile_Request();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.appid = reader.uint32();
                    break;
                case 2:
                    message.filename = reader.string();
                    break;
                case 3:
                    message.is_explicit_delete = reader.bool();
                    break;
                case 4:
                    message.upload_batch_id = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CCloud_ClientDeleteFile_Request message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CCloud_ClientDeleteFile_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CCloud_ClientDeleteFile_Request} CCloud_ClientDeleteFile_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_ClientDeleteFile_Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CCloud_ClientDeleteFile_Request message.
         * @function verify
         * @memberof CCloud_ClientDeleteFile_Request
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CCloud_ClientDeleteFile_Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.appid != null && message.hasOwnProperty("appid"))
                if (!$util.isInteger(message.appid))
                    return "appid: integer expected";
            if (message.filename != null && message.hasOwnProperty("filename"))
                if (!$util.isString(message.filename))
                    return "filename: string expected";
            if (message.is_explicit_delete != null && message.hasOwnProperty("is_explicit_delete"))
                if (typeof message.is_explicit_delete !== "boolean")
                    return "is_explicit_delete: boolean expected";
            if (message.upload_batch_id != null && message.hasOwnProperty("upload_batch_id"))
                if (!$util.isInteger(message.upload_batch_id) && !(message.upload_batch_id && $util.isInteger(message.upload_batch_id.low) && $util.isInteger(message.upload_batch_id.high)))
                    return "upload_batch_id: integer|Long expected";
            return null;
        };
    
        /**
         * Creates a CCloud_ClientDeleteFile_Request message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CCloud_ClientDeleteFile_Request
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CCloud_ClientDeleteFile_Request} CCloud_ClientDeleteFile_Request
         */
        CCloud_ClientDeleteFile_Request.fromObject = function fromObject(object) {
            if (object instanceof $root.CCloud_ClientDeleteFile_Request)
                return object;
            var message = new $root.CCloud_ClientDeleteFile_Request();
            if (object.appid != null)
                message.appid = object.appid >>> 0;
            if (object.filename != null)
                message.filename = String(object.filename);
            if (object.is_explicit_delete != null)
                message.is_explicit_delete = Boolean(object.is_explicit_delete);
            if (object.upload_batch_id != null)
                if ($util.Long)
                    (message.upload_batch_id = $util.Long.fromValue(object.upload_batch_id)).unsigned = true;
                else if (typeof object.upload_batch_id === "string")
                    message.upload_batch_id = parseInt(object.upload_batch_id, 10);
                else if (typeof object.upload_batch_id === "number")
                    message.upload_batch_id = object.upload_batch_id;
                else if (typeof object.upload_batch_id === "object")
                    message.upload_batch_id = new $util.LongBits(object.upload_batch_id.low >>> 0, object.upload_batch_id.high >>> 0).toNumber(true);
            return message;
        };
    
        /**
         * Creates a plain object from a CCloud_ClientDeleteFile_Request message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CCloud_ClientDeleteFile_Request
         * @static
         * @param {CCloud_ClientDeleteFile_Request} message CCloud_ClientDeleteFile_Request
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CCloud_ClientDeleteFile_Request.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.appid = 0;
                object.filename = "";
                object.is_explicit_delete = false;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.upload_batch_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.upload_batch_id = options.longs === String ? "0" : 0;
            }
            if (message.appid != null && message.hasOwnProperty("appid"))
                object.appid = message.appid;
            if (message.filename != null && message.hasOwnProperty("filename"))
                object.filename = message.filename;
            if (message.is_explicit_delete != null && message.hasOwnProperty("is_explicit_delete"))
                object.is_explicit_delete = message.is_explicit_delete;
            if (message.upload_batch_id != null && message.hasOwnProperty("upload_batch_id"))
                if (typeof message.upload_batch_id === "number")
                    object.upload_batch_id = options.longs === String ? String(message.upload_batch_id) : message.upload_batch_id;
                else
                    object.upload_batch_id = options.longs === String ? $util.Long.prototype.toString.call(message.upload_batch_id) : options.longs === Number ? new $util.LongBits(message.upload_batch_id.low >>> 0, message.upload_batch_id.high >>> 0).toNumber(true) : message.upload_batch_id;
            return object;
        };
    
        /**
         * Converts this CCloud_ClientDeleteFile_Request to JSON.
         * @function toJSON
         * @memberof CCloud_ClientDeleteFile_Request
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CCloud_ClientDeleteFile_Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CCloud_ClientDeleteFile_Request;
    })();
    
    $root.CCloud_ClientDeleteFile_Response = (function() {
    
        /**
         * Properties of a CCloud_ClientDeleteFile_Response.
         * @exports ICCloud_ClientDeleteFile_Response
         * @interface ICCloud_ClientDeleteFile_Response
         */
    
        /**
         * Constructs a new CCloud_ClientDeleteFile_Response.
         * @exports CCloud_ClientDeleteFile_Response
         * @classdesc Represents a CCloud_ClientDeleteFile_Response.
         * @implements ICCloud_ClientDeleteFile_Response
         * @constructor
         * @param {ICCloud_ClientDeleteFile_Response=} [properties] Properties to set
         */
        function CCloud_ClientDeleteFile_Response(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * Creates a new CCloud_ClientDeleteFile_Response instance using the specified properties.
         * @function create
         * @memberof CCloud_ClientDeleteFile_Response
         * @static
         * @param {ICCloud_ClientDeleteFile_Response=} [properties] Properties to set
         * @returns {CCloud_ClientDeleteFile_Response} CCloud_ClientDeleteFile_Response instance
         */
        CCloud_ClientDeleteFile_Response.create = function create(properties) {
            return new CCloud_ClientDeleteFile_Response(properties);
        };
    
        /**
         * Encodes the specified CCloud_ClientDeleteFile_Response message. Does not implicitly {@link CCloud_ClientDeleteFile_Response.verify|verify} messages.
         * @function encode
         * @memberof CCloud_ClientDeleteFile_Response
         * @static
         * @param {ICCloud_ClientDeleteFile_Response} message CCloud_ClientDeleteFile_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_ClientDeleteFile_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };
    
        /**
         * Encodes the specified CCloud_ClientDeleteFile_Response message, length delimited. Does not implicitly {@link CCloud_ClientDeleteFile_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CCloud_ClientDeleteFile_Response
         * @static
         * @param {ICCloud_ClientDeleteFile_Response} message CCloud_ClientDeleteFile_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_ClientDeleteFile_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CCloud_ClientDeleteFile_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CCloud_ClientDeleteFile_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CCloud_ClientDeleteFile_Response} CCloud_ClientDeleteFile_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_ClientDeleteFile_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CCloud_ClientDeleteFile_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CCloud_ClientDeleteFile_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CCloud_ClientDeleteFile_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CCloud_ClientDeleteFile_Response} CCloud_ClientDeleteFile_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_ClientDeleteFile_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CCloud_ClientDeleteFile_Response message.
         * @function verify
         * @memberof CCloud_ClientDeleteFile_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CCloud_ClientDeleteFile_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };
    
        /**
         * Creates a CCloud_ClientDeleteFile_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CCloud_ClientDeleteFile_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CCloud_ClientDeleteFile_Response} CCloud_ClientDeleteFile_Response
         */
        CCloud_ClientDeleteFile_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CCloud_ClientDeleteFile_Response)
                return object;
            return new $root.CCloud_ClientDeleteFile_Response();
        };
    
        /**
         * Creates a plain object from a CCloud_ClientDeleteFile_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CCloud_ClientDeleteFile_Response
         * @static
         * @param {CCloud_ClientDeleteFile_Response} message CCloud_ClientDeleteFile_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CCloud_ClientDeleteFile_Response.toObject = function toObject() {
            return {};
        };
    
        /**
         * Converts this CCloud_ClientDeleteFile_Response to JSON.
         * @function toJSON
         * @memberof CCloud_ClientDeleteFile_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CCloud_ClientDeleteFile_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CCloud_ClientDeleteFile_Response;
    })();
    
    $root.CCloud_ClientConflictResolution_Notification = (function() {
    
        /**
         * Properties of a CCloud_ClientConflictResolution_Notification.
         * @exports ICCloud_ClientConflictResolution_Notification
         * @interface ICCloud_ClientConflictResolution_Notification
         * @property {number|null} [appid] CCloud_ClientConflictResolution_Notification appid
         * @property {boolean|null} [chose_local_files] CCloud_ClientConflictResolution_Notification chose_local_files
         */
    
        /**
         * Constructs a new CCloud_ClientConflictResolution_Notification.
         * @exports CCloud_ClientConflictResolution_Notification
         * @classdesc Represents a CCloud_ClientConflictResolution_Notification.
         * @implements ICCloud_ClientConflictResolution_Notification
         * @constructor
         * @param {ICCloud_ClientConflictResolution_Notification=} [properties] Properties to set
         */
        function CCloud_ClientConflictResolution_Notification(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CCloud_ClientConflictResolution_Notification appid.
         * @member {number} appid
         * @memberof CCloud_ClientConflictResolution_Notification
         * @instance
         */
        CCloud_ClientConflictResolution_Notification.prototype.appid = 0;
    
        /**
         * CCloud_ClientConflictResolution_Notification chose_local_files.
         * @member {boolean} chose_local_files
         * @memberof CCloud_ClientConflictResolution_Notification
         * @instance
         */
        CCloud_ClientConflictResolution_Notification.prototype.chose_local_files = false;
    
        /**
         * Creates a new CCloud_ClientConflictResolution_Notification instance using the specified properties.
         * @function create
         * @memberof CCloud_ClientConflictResolution_Notification
         * @static
         * @param {ICCloud_ClientConflictResolution_Notification=} [properties] Properties to set
         * @returns {CCloud_ClientConflictResolution_Notification} CCloud_ClientConflictResolution_Notification instance
         */
        CCloud_ClientConflictResolution_Notification.create = function create(properties) {
            return new CCloud_ClientConflictResolution_Notification(properties);
        };
    
        /**
         * Encodes the specified CCloud_ClientConflictResolution_Notification message. Does not implicitly {@link CCloud_ClientConflictResolution_Notification.verify|verify} messages.
         * @function encode
         * @memberof CCloud_ClientConflictResolution_Notification
         * @static
         * @param {ICCloud_ClientConflictResolution_Notification} message CCloud_ClientConflictResolution_Notification message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_ClientConflictResolution_Notification.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.appid != null && message.hasOwnProperty("appid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.appid);
            if (message.chose_local_files != null && message.hasOwnProperty("chose_local_files"))
                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.chose_local_files);
            return writer;
        };
    
        /**
         * Encodes the specified CCloud_ClientConflictResolution_Notification message, length delimited. Does not implicitly {@link CCloud_ClientConflictResolution_Notification.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CCloud_ClientConflictResolution_Notification
         * @static
         * @param {ICCloud_ClientConflictResolution_Notification} message CCloud_ClientConflictResolution_Notification message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_ClientConflictResolution_Notification.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CCloud_ClientConflictResolution_Notification message from the specified reader or buffer.
         * @function decode
         * @memberof CCloud_ClientConflictResolution_Notification
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CCloud_ClientConflictResolution_Notification} CCloud_ClientConflictResolution_Notification
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_ClientConflictResolution_Notification.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CCloud_ClientConflictResolution_Notification();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.appid = reader.uint32();
                    break;
                case 2:
                    message.chose_local_files = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CCloud_ClientConflictResolution_Notification message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CCloud_ClientConflictResolution_Notification
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CCloud_ClientConflictResolution_Notification} CCloud_ClientConflictResolution_Notification
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_ClientConflictResolution_Notification.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CCloud_ClientConflictResolution_Notification message.
         * @function verify
         * @memberof CCloud_ClientConflictResolution_Notification
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CCloud_ClientConflictResolution_Notification.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.appid != null && message.hasOwnProperty("appid"))
                if (!$util.isInteger(message.appid))
                    return "appid: integer expected";
            if (message.chose_local_files != null && message.hasOwnProperty("chose_local_files"))
                if (typeof message.chose_local_files !== "boolean")
                    return "chose_local_files: boolean expected";
            return null;
        };
    
        /**
         * Creates a CCloud_ClientConflictResolution_Notification message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CCloud_ClientConflictResolution_Notification
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CCloud_ClientConflictResolution_Notification} CCloud_ClientConflictResolution_Notification
         */
        CCloud_ClientConflictResolution_Notification.fromObject = function fromObject(object) {
            if (object instanceof $root.CCloud_ClientConflictResolution_Notification)
                return object;
            var message = new $root.CCloud_ClientConflictResolution_Notification();
            if (object.appid != null)
                message.appid = object.appid >>> 0;
            if (object.chose_local_files != null)
                message.chose_local_files = Boolean(object.chose_local_files);
            return message;
        };
    
        /**
         * Creates a plain object from a CCloud_ClientConflictResolution_Notification message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CCloud_ClientConflictResolution_Notification
         * @static
         * @param {CCloud_ClientConflictResolution_Notification} message CCloud_ClientConflictResolution_Notification
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CCloud_ClientConflictResolution_Notification.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.appid = 0;
                object.chose_local_files = false;
            }
            if (message.appid != null && message.hasOwnProperty("appid"))
                object.appid = message.appid;
            if (message.chose_local_files != null && message.hasOwnProperty("chose_local_files"))
                object.chose_local_files = message.chose_local_files;
            return object;
        };
    
        /**
         * Converts this CCloud_ClientConflictResolution_Notification to JSON.
         * @function toJSON
         * @memberof CCloud_ClientConflictResolution_Notification
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CCloud_ClientConflictResolution_Notification.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CCloud_ClientConflictResolution_Notification;
    })();
    
    $root.CCloud_EnumerateUserApps_Request = (function() {
    
        /**
         * Properties of a CCloud_EnumerateUserApps_Request.
         * @exports ICCloud_EnumerateUserApps_Request
         * @interface ICCloud_EnumerateUserApps_Request
         */
    
        /**
         * Constructs a new CCloud_EnumerateUserApps_Request.
         * @exports CCloud_EnumerateUserApps_Request
         * @classdesc Represents a CCloud_EnumerateUserApps_Request.
         * @implements ICCloud_EnumerateUserApps_Request
         * @constructor
         * @param {ICCloud_EnumerateUserApps_Request=} [properties] Properties to set
         */
        function CCloud_EnumerateUserApps_Request(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * Creates a new CCloud_EnumerateUserApps_Request instance using the specified properties.
         * @function create
         * @memberof CCloud_EnumerateUserApps_Request
         * @static
         * @param {ICCloud_EnumerateUserApps_Request=} [properties] Properties to set
         * @returns {CCloud_EnumerateUserApps_Request} CCloud_EnumerateUserApps_Request instance
         */
        CCloud_EnumerateUserApps_Request.create = function create(properties) {
            return new CCloud_EnumerateUserApps_Request(properties);
        };
    
        /**
         * Encodes the specified CCloud_EnumerateUserApps_Request message. Does not implicitly {@link CCloud_EnumerateUserApps_Request.verify|verify} messages.
         * @function encode
         * @memberof CCloud_EnumerateUserApps_Request
         * @static
         * @param {ICCloud_EnumerateUserApps_Request} message CCloud_EnumerateUserApps_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_EnumerateUserApps_Request.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };
    
        /**
         * Encodes the specified CCloud_EnumerateUserApps_Request message, length delimited. Does not implicitly {@link CCloud_EnumerateUserApps_Request.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CCloud_EnumerateUserApps_Request
         * @static
         * @param {ICCloud_EnumerateUserApps_Request} message CCloud_EnumerateUserApps_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_EnumerateUserApps_Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CCloud_EnumerateUserApps_Request message from the specified reader or buffer.
         * @function decode
         * @memberof CCloud_EnumerateUserApps_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CCloud_EnumerateUserApps_Request} CCloud_EnumerateUserApps_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_EnumerateUserApps_Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CCloud_EnumerateUserApps_Request();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CCloud_EnumerateUserApps_Request message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CCloud_EnumerateUserApps_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CCloud_EnumerateUserApps_Request} CCloud_EnumerateUserApps_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_EnumerateUserApps_Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CCloud_EnumerateUserApps_Request message.
         * @function verify
         * @memberof CCloud_EnumerateUserApps_Request
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CCloud_EnumerateUserApps_Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };
    
        /**
         * Creates a CCloud_EnumerateUserApps_Request message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CCloud_EnumerateUserApps_Request
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CCloud_EnumerateUserApps_Request} CCloud_EnumerateUserApps_Request
         */
        CCloud_EnumerateUserApps_Request.fromObject = function fromObject(object) {
            if (object instanceof $root.CCloud_EnumerateUserApps_Request)
                return object;
            return new $root.CCloud_EnumerateUserApps_Request();
        };
    
        /**
         * Creates a plain object from a CCloud_EnumerateUserApps_Request message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CCloud_EnumerateUserApps_Request
         * @static
         * @param {CCloud_EnumerateUserApps_Request} message CCloud_EnumerateUserApps_Request
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CCloud_EnumerateUserApps_Request.toObject = function toObject() {
            return {};
        };
    
        /**
         * Converts this CCloud_EnumerateUserApps_Request to JSON.
         * @function toJSON
         * @memberof CCloud_EnumerateUserApps_Request
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CCloud_EnumerateUserApps_Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CCloud_EnumerateUserApps_Request;
    })();
    
    $root.CCloud_EnumerateUserApps_Response = (function() {
    
        /**
         * Properties of a CCloud_EnumerateUserApps_Response.
         * @exports ICCloud_EnumerateUserApps_Response
         * @interface ICCloud_EnumerateUserApps_Response
         * @property {Array.<CCloud_EnumerateUserApps_Response.IApps>|null} [apps] CCloud_EnumerateUserApps_Response apps
         */
    
        /**
         * Constructs a new CCloud_EnumerateUserApps_Response.
         * @exports CCloud_EnumerateUserApps_Response
         * @classdesc Represents a CCloud_EnumerateUserApps_Response.
         * @implements ICCloud_EnumerateUserApps_Response
         * @constructor
         * @param {ICCloud_EnumerateUserApps_Response=} [properties] Properties to set
         */
        function CCloud_EnumerateUserApps_Response(properties) {
            this.apps = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CCloud_EnumerateUserApps_Response apps.
         * @member {Array.<CCloud_EnumerateUserApps_Response.IApps>} apps
         * @memberof CCloud_EnumerateUserApps_Response
         * @instance
         */
        CCloud_EnumerateUserApps_Response.prototype.apps = $util.emptyArray;
    
        /**
         * Creates a new CCloud_EnumerateUserApps_Response instance using the specified properties.
         * @function create
         * @memberof CCloud_EnumerateUserApps_Response
         * @static
         * @param {ICCloud_EnumerateUserApps_Response=} [properties] Properties to set
         * @returns {CCloud_EnumerateUserApps_Response} CCloud_EnumerateUserApps_Response instance
         */
        CCloud_EnumerateUserApps_Response.create = function create(properties) {
            return new CCloud_EnumerateUserApps_Response(properties);
        };
    
        /**
         * Encodes the specified CCloud_EnumerateUserApps_Response message. Does not implicitly {@link CCloud_EnumerateUserApps_Response.verify|verify} messages.
         * @function encode
         * @memberof CCloud_EnumerateUserApps_Response
         * @static
         * @param {ICCloud_EnumerateUserApps_Response} message CCloud_EnumerateUserApps_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_EnumerateUserApps_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.apps != null && message.apps.length)
                for (var i = 0; i < message.apps.length; ++i)
                    $root.CCloud_EnumerateUserApps_Response.Apps.encode(message.apps[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CCloud_EnumerateUserApps_Response message, length delimited. Does not implicitly {@link CCloud_EnumerateUserApps_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CCloud_EnumerateUserApps_Response
         * @static
         * @param {ICCloud_EnumerateUserApps_Response} message CCloud_EnumerateUserApps_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_EnumerateUserApps_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CCloud_EnumerateUserApps_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CCloud_EnumerateUserApps_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CCloud_EnumerateUserApps_Response} CCloud_EnumerateUserApps_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_EnumerateUserApps_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CCloud_EnumerateUserApps_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.apps && message.apps.length))
                        message.apps = [];
                    message.apps.push($root.CCloud_EnumerateUserApps_Response.Apps.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CCloud_EnumerateUserApps_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CCloud_EnumerateUserApps_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CCloud_EnumerateUserApps_Response} CCloud_EnumerateUserApps_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_EnumerateUserApps_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CCloud_EnumerateUserApps_Response message.
         * @function verify
         * @memberof CCloud_EnumerateUserApps_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CCloud_EnumerateUserApps_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.apps != null && message.hasOwnProperty("apps")) {
                if (!Array.isArray(message.apps))
                    return "apps: array expected";
                for (var i = 0; i < message.apps.length; ++i) {
                    var error = $root.CCloud_EnumerateUserApps_Response.Apps.verify(message.apps[i]);
                    if (error)
                        return "apps." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CCloud_EnumerateUserApps_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CCloud_EnumerateUserApps_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CCloud_EnumerateUserApps_Response} CCloud_EnumerateUserApps_Response
         */
        CCloud_EnumerateUserApps_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CCloud_EnumerateUserApps_Response)
                return object;
            var message = new $root.CCloud_EnumerateUserApps_Response();
            if (object.apps) {
                if (!Array.isArray(object.apps))
                    throw TypeError(".CCloud_EnumerateUserApps_Response.apps: array expected");
                message.apps = [];
                for (var i = 0; i < object.apps.length; ++i) {
                    if (typeof object.apps[i] !== "object")
                        throw TypeError(".CCloud_EnumerateUserApps_Response.apps: object expected");
                    message.apps[i] = $root.CCloud_EnumerateUserApps_Response.Apps.fromObject(object.apps[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CCloud_EnumerateUserApps_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CCloud_EnumerateUserApps_Response
         * @static
         * @param {CCloud_EnumerateUserApps_Response} message CCloud_EnumerateUserApps_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CCloud_EnumerateUserApps_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.apps = [];
            if (message.apps && message.apps.length) {
                object.apps = [];
                for (var j = 0; j < message.apps.length; ++j)
                    object.apps[j] = $root.CCloud_EnumerateUserApps_Response.Apps.toObject(message.apps[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CCloud_EnumerateUserApps_Response to JSON.
         * @function toJSON
         * @memberof CCloud_EnumerateUserApps_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CCloud_EnumerateUserApps_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        CCloud_EnumerateUserApps_Response.Apps = (function() {
    
            /**
             * Properties of an Apps.
             * @memberof CCloud_EnumerateUserApps_Response
             * @interface IApps
             * @property {number|null} [appid] Apps appid
             * @property {number|null} [totalcount] Apps totalcount
             * @property {number|Long|null} [totalsize] Apps totalsize
             */
    
            /**
             * Constructs a new Apps.
             * @memberof CCloud_EnumerateUserApps_Response
             * @classdesc Represents an Apps.
             * @implements IApps
             * @constructor
             * @param {CCloud_EnumerateUserApps_Response.IApps=} [properties] Properties to set
             */
            function Apps(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * Apps appid.
             * @member {number} appid
             * @memberof CCloud_EnumerateUserApps_Response.Apps
             * @instance
             */
            Apps.prototype.appid = 0;
    
            /**
             * Apps totalcount.
             * @member {number} totalcount
             * @memberof CCloud_EnumerateUserApps_Response.Apps
             * @instance
             */
            Apps.prototype.totalcount = 0;
    
            /**
             * Apps totalsize.
             * @member {number|Long} totalsize
             * @memberof CCloud_EnumerateUserApps_Response.Apps
             * @instance
             */
            Apps.prototype.totalsize = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
            /**
             * Creates a new Apps instance using the specified properties.
             * @function create
             * @memberof CCloud_EnumerateUserApps_Response.Apps
             * @static
             * @param {CCloud_EnumerateUserApps_Response.IApps=} [properties] Properties to set
             * @returns {CCloud_EnumerateUserApps_Response.Apps} Apps instance
             */
            Apps.create = function create(properties) {
                return new Apps(properties);
            };
    
            /**
             * Encodes the specified Apps message. Does not implicitly {@link CCloud_EnumerateUserApps_Response.Apps.verify|verify} messages.
             * @function encode
             * @memberof CCloud_EnumerateUserApps_Response.Apps
             * @static
             * @param {CCloud_EnumerateUserApps_Response.IApps} message Apps message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Apps.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.appid != null && message.hasOwnProperty("appid"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.appid);
                if (message.totalcount != null && message.hasOwnProperty("totalcount"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.totalcount);
                if (message.totalsize != null && message.hasOwnProperty("totalsize"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int64(message.totalsize);
                return writer;
            };
    
            /**
             * Encodes the specified Apps message, length delimited. Does not implicitly {@link CCloud_EnumerateUserApps_Response.Apps.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CCloud_EnumerateUserApps_Response.Apps
             * @static
             * @param {CCloud_EnumerateUserApps_Response.IApps} message Apps message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Apps.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes an Apps message from the specified reader or buffer.
             * @function decode
             * @memberof CCloud_EnumerateUserApps_Response.Apps
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CCloud_EnumerateUserApps_Response.Apps} Apps
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Apps.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CCloud_EnumerateUserApps_Response.Apps();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.appid = reader.uint32();
                        break;
                    case 2:
                        message.totalcount = reader.int32();
                        break;
                    case 3:
                        message.totalsize = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes an Apps message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CCloud_EnumerateUserApps_Response.Apps
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CCloud_EnumerateUserApps_Response.Apps} Apps
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Apps.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies an Apps message.
             * @function verify
             * @memberof CCloud_EnumerateUserApps_Response.Apps
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Apps.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.appid != null && message.hasOwnProperty("appid"))
                    if (!$util.isInteger(message.appid))
                        return "appid: integer expected";
                if (message.totalcount != null && message.hasOwnProperty("totalcount"))
                    if (!$util.isInteger(message.totalcount))
                        return "totalcount: integer expected";
                if (message.totalsize != null && message.hasOwnProperty("totalsize"))
                    if (!$util.isInteger(message.totalsize) && !(message.totalsize && $util.isInteger(message.totalsize.low) && $util.isInteger(message.totalsize.high)))
                        return "totalsize: integer|Long expected";
                return null;
            };
    
            /**
             * Creates an Apps message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CCloud_EnumerateUserApps_Response.Apps
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CCloud_EnumerateUserApps_Response.Apps} Apps
             */
            Apps.fromObject = function fromObject(object) {
                if (object instanceof $root.CCloud_EnumerateUserApps_Response.Apps)
                    return object;
                var message = new $root.CCloud_EnumerateUserApps_Response.Apps();
                if (object.appid != null)
                    message.appid = object.appid >>> 0;
                if (object.totalcount != null)
                    message.totalcount = object.totalcount | 0;
                if (object.totalsize != null)
                    if ($util.Long)
                        (message.totalsize = $util.Long.fromValue(object.totalsize)).unsigned = false;
                    else if (typeof object.totalsize === "string")
                        message.totalsize = parseInt(object.totalsize, 10);
                    else if (typeof object.totalsize === "number")
                        message.totalsize = object.totalsize;
                    else if (typeof object.totalsize === "object")
                        message.totalsize = new $util.LongBits(object.totalsize.low >>> 0, object.totalsize.high >>> 0).toNumber();
                return message;
            };
    
            /**
             * Creates a plain object from an Apps message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CCloud_EnumerateUserApps_Response.Apps
             * @static
             * @param {CCloud_EnumerateUserApps_Response.Apps} message Apps
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Apps.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.appid = 0;
                    object.totalcount = 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.totalsize = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.totalsize = options.longs === String ? "0" : 0;
                }
                if (message.appid != null && message.hasOwnProperty("appid"))
                    object.appid = message.appid;
                if (message.totalcount != null && message.hasOwnProperty("totalcount"))
                    object.totalcount = message.totalcount;
                if (message.totalsize != null && message.hasOwnProperty("totalsize"))
                    if (typeof message.totalsize === "number")
                        object.totalsize = options.longs === String ? String(message.totalsize) : message.totalsize;
                    else
                        object.totalsize = options.longs === String ? $util.Long.prototype.toString.call(message.totalsize) : options.longs === Number ? new $util.LongBits(message.totalsize.low >>> 0, message.totalsize.high >>> 0).toNumber() : message.totalsize;
                return object;
            };
    
            /**
             * Converts this Apps to JSON.
             * @function toJSON
             * @memberof CCloud_EnumerateUserApps_Response.Apps
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Apps.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return Apps;
        })();
    
        return CCloud_EnumerateUserApps_Response;
    })();
    
    $root.CCloud_GetAppFileChangelist_Request = (function() {
    
        /**
         * Properties of a CCloud_GetAppFileChangelist_Request.
         * @exports ICCloud_GetAppFileChangelist_Request
         * @interface ICCloud_GetAppFileChangelist_Request
         * @property {number|null} [appid] CCloud_GetAppFileChangelist_Request appid
         * @property {number|Long|null} [synced_change_number] CCloud_GetAppFileChangelist_Request synced_change_number
         */
    
        /**
         * Constructs a new CCloud_GetAppFileChangelist_Request.
         * @exports CCloud_GetAppFileChangelist_Request
         * @classdesc Represents a CCloud_GetAppFileChangelist_Request.
         * @implements ICCloud_GetAppFileChangelist_Request
         * @constructor
         * @param {ICCloud_GetAppFileChangelist_Request=} [properties] Properties to set
         */
        function CCloud_GetAppFileChangelist_Request(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CCloud_GetAppFileChangelist_Request appid.
         * @member {number} appid
         * @memberof CCloud_GetAppFileChangelist_Request
         * @instance
         */
        CCloud_GetAppFileChangelist_Request.prototype.appid = 0;
    
        /**
         * CCloud_GetAppFileChangelist_Request synced_change_number.
         * @member {number|Long} synced_change_number
         * @memberof CCloud_GetAppFileChangelist_Request
         * @instance
         */
        CCloud_GetAppFileChangelist_Request.prototype.synced_change_number = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * Creates a new CCloud_GetAppFileChangelist_Request instance using the specified properties.
         * @function create
         * @memberof CCloud_GetAppFileChangelist_Request
         * @static
         * @param {ICCloud_GetAppFileChangelist_Request=} [properties] Properties to set
         * @returns {CCloud_GetAppFileChangelist_Request} CCloud_GetAppFileChangelist_Request instance
         */
        CCloud_GetAppFileChangelist_Request.create = function create(properties) {
            return new CCloud_GetAppFileChangelist_Request(properties);
        };
    
        /**
         * Encodes the specified CCloud_GetAppFileChangelist_Request message. Does not implicitly {@link CCloud_GetAppFileChangelist_Request.verify|verify} messages.
         * @function encode
         * @memberof CCloud_GetAppFileChangelist_Request
         * @static
         * @param {ICCloud_GetAppFileChangelist_Request} message CCloud_GetAppFileChangelist_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_GetAppFileChangelist_Request.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.appid != null && message.hasOwnProperty("appid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.appid);
            if (message.synced_change_number != null && message.hasOwnProperty("synced_change_number"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.synced_change_number);
            return writer;
        };
    
        /**
         * Encodes the specified CCloud_GetAppFileChangelist_Request message, length delimited. Does not implicitly {@link CCloud_GetAppFileChangelist_Request.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CCloud_GetAppFileChangelist_Request
         * @static
         * @param {ICCloud_GetAppFileChangelist_Request} message CCloud_GetAppFileChangelist_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_GetAppFileChangelist_Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CCloud_GetAppFileChangelist_Request message from the specified reader or buffer.
         * @function decode
         * @memberof CCloud_GetAppFileChangelist_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CCloud_GetAppFileChangelist_Request} CCloud_GetAppFileChangelist_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_GetAppFileChangelist_Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CCloud_GetAppFileChangelist_Request();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.appid = reader.uint32();
                    break;
                case 2:
                    message.synced_change_number = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CCloud_GetAppFileChangelist_Request message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CCloud_GetAppFileChangelist_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CCloud_GetAppFileChangelist_Request} CCloud_GetAppFileChangelist_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_GetAppFileChangelist_Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CCloud_GetAppFileChangelist_Request message.
         * @function verify
         * @memberof CCloud_GetAppFileChangelist_Request
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CCloud_GetAppFileChangelist_Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.appid != null && message.hasOwnProperty("appid"))
                if (!$util.isInteger(message.appid))
                    return "appid: integer expected";
            if (message.synced_change_number != null && message.hasOwnProperty("synced_change_number"))
                if (!$util.isInteger(message.synced_change_number) && !(message.synced_change_number && $util.isInteger(message.synced_change_number.low) && $util.isInteger(message.synced_change_number.high)))
                    return "synced_change_number: integer|Long expected";
            return null;
        };
    
        /**
         * Creates a CCloud_GetAppFileChangelist_Request message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CCloud_GetAppFileChangelist_Request
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CCloud_GetAppFileChangelist_Request} CCloud_GetAppFileChangelist_Request
         */
        CCloud_GetAppFileChangelist_Request.fromObject = function fromObject(object) {
            if (object instanceof $root.CCloud_GetAppFileChangelist_Request)
                return object;
            var message = new $root.CCloud_GetAppFileChangelist_Request();
            if (object.appid != null)
                message.appid = object.appid >>> 0;
            if (object.synced_change_number != null)
                if ($util.Long)
                    (message.synced_change_number = $util.Long.fromValue(object.synced_change_number)).unsigned = true;
                else if (typeof object.synced_change_number === "string")
                    message.synced_change_number = parseInt(object.synced_change_number, 10);
                else if (typeof object.synced_change_number === "number")
                    message.synced_change_number = object.synced_change_number;
                else if (typeof object.synced_change_number === "object")
                    message.synced_change_number = new $util.LongBits(object.synced_change_number.low >>> 0, object.synced_change_number.high >>> 0).toNumber(true);
            return message;
        };
    
        /**
         * Creates a plain object from a CCloud_GetAppFileChangelist_Request message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CCloud_GetAppFileChangelist_Request
         * @static
         * @param {CCloud_GetAppFileChangelist_Request} message CCloud_GetAppFileChangelist_Request
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CCloud_GetAppFileChangelist_Request.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.appid = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.synced_change_number = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.synced_change_number = options.longs === String ? "0" : 0;
            }
            if (message.appid != null && message.hasOwnProperty("appid"))
                object.appid = message.appid;
            if (message.synced_change_number != null && message.hasOwnProperty("synced_change_number"))
                if (typeof message.synced_change_number === "number")
                    object.synced_change_number = options.longs === String ? String(message.synced_change_number) : message.synced_change_number;
                else
                    object.synced_change_number = options.longs === String ? $util.Long.prototype.toString.call(message.synced_change_number) : options.longs === Number ? new $util.LongBits(message.synced_change_number.low >>> 0, message.synced_change_number.high >>> 0).toNumber(true) : message.synced_change_number;
            return object;
        };
    
        /**
         * Converts this CCloud_GetAppFileChangelist_Request to JSON.
         * @function toJSON
         * @memberof CCloud_GetAppFileChangelist_Request
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CCloud_GetAppFileChangelist_Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CCloud_GetAppFileChangelist_Request;
    })();
    
    $root.CCloud_AppFileInfo = (function() {
    
        /**
         * Properties of a CCloud_AppFileInfo.
         * @exports ICCloud_AppFileInfo
         * @interface ICCloud_AppFileInfo
         * @property {string|null} [file_name] CCloud_AppFileInfo file_name
         * @property {Uint8Array|null} [sha_file] CCloud_AppFileInfo sha_file
         * @property {number|Long|null} [time_stamp] CCloud_AppFileInfo time_stamp
         * @property {number|null} [raw_file_size] CCloud_AppFileInfo raw_file_size
         * @property {ECloudStoragePersistState|null} [persist_state] CCloud_AppFileInfo persist_state
         * @property {number|null} [platforms_to_sync] CCloud_AppFileInfo platforms_to_sync
         * @property {number|null} [path_prefix_index] CCloud_AppFileInfo path_prefix_index
         * @property {number|null} [machine_name_index] CCloud_AppFileInfo machine_name_index
         */
    
        /**
         * Constructs a new CCloud_AppFileInfo.
         * @exports CCloud_AppFileInfo
         * @classdesc Represents a CCloud_AppFileInfo.
         * @implements ICCloud_AppFileInfo
         * @constructor
         * @param {ICCloud_AppFileInfo=} [properties] Properties to set
         */
        function CCloud_AppFileInfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CCloud_AppFileInfo file_name.
         * @member {string} file_name
         * @memberof CCloud_AppFileInfo
         * @instance
         */
        CCloud_AppFileInfo.prototype.file_name = "";
    
        /**
         * CCloud_AppFileInfo sha_file.
         * @member {Uint8Array} sha_file
         * @memberof CCloud_AppFileInfo
         * @instance
         */
        CCloud_AppFileInfo.prototype.sha_file = $util.newBuffer([]);
    
        /**
         * CCloud_AppFileInfo time_stamp.
         * @member {number|Long} time_stamp
         * @memberof CCloud_AppFileInfo
         * @instance
         */
        CCloud_AppFileInfo.prototype.time_stamp = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CCloud_AppFileInfo raw_file_size.
         * @member {number} raw_file_size
         * @memberof CCloud_AppFileInfo
         * @instance
         */
        CCloud_AppFileInfo.prototype.raw_file_size = 0;
    
        /**
         * CCloud_AppFileInfo persist_state.
         * @member {ECloudStoragePersistState} persist_state
         * @memberof CCloud_AppFileInfo
         * @instance
         */
        CCloud_AppFileInfo.prototype.persist_state = 0;
    
        /**
         * CCloud_AppFileInfo platforms_to_sync.
         * @member {number} platforms_to_sync
         * @memberof CCloud_AppFileInfo
         * @instance
         */
        CCloud_AppFileInfo.prototype.platforms_to_sync = 0;
    
        /**
         * CCloud_AppFileInfo path_prefix_index.
         * @member {number} path_prefix_index
         * @memberof CCloud_AppFileInfo
         * @instance
         */
        CCloud_AppFileInfo.prototype.path_prefix_index = 0;
    
        /**
         * CCloud_AppFileInfo machine_name_index.
         * @member {number} machine_name_index
         * @memberof CCloud_AppFileInfo
         * @instance
         */
        CCloud_AppFileInfo.prototype.machine_name_index = 0;
    
        /**
         * Creates a new CCloud_AppFileInfo instance using the specified properties.
         * @function create
         * @memberof CCloud_AppFileInfo
         * @static
         * @param {ICCloud_AppFileInfo=} [properties] Properties to set
         * @returns {CCloud_AppFileInfo} CCloud_AppFileInfo instance
         */
        CCloud_AppFileInfo.create = function create(properties) {
            return new CCloud_AppFileInfo(properties);
        };
    
        /**
         * Encodes the specified CCloud_AppFileInfo message. Does not implicitly {@link CCloud_AppFileInfo.verify|verify} messages.
         * @function encode
         * @memberof CCloud_AppFileInfo
         * @static
         * @param {ICCloud_AppFileInfo} message CCloud_AppFileInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_AppFileInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.file_name != null && message.hasOwnProperty("file_name"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.file_name);
            if (message.sha_file != null && message.hasOwnProperty("sha_file"))
                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.sha_file);
            if (message.time_stamp != null && message.hasOwnProperty("time_stamp"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.time_stamp);
            if (message.raw_file_size != null && message.hasOwnProperty("raw_file_size"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.raw_file_size);
            if (message.persist_state != null && message.hasOwnProperty("persist_state"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.persist_state);
            if (message.platforms_to_sync != null && message.hasOwnProperty("platforms_to_sync"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.platforms_to_sync);
            if (message.path_prefix_index != null && message.hasOwnProperty("path_prefix_index"))
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.path_prefix_index);
            if (message.machine_name_index != null && message.hasOwnProperty("machine_name_index"))
                writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.machine_name_index);
            return writer;
        };
    
        /**
         * Encodes the specified CCloud_AppFileInfo message, length delimited. Does not implicitly {@link CCloud_AppFileInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CCloud_AppFileInfo
         * @static
         * @param {ICCloud_AppFileInfo} message CCloud_AppFileInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_AppFileInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CCloud_AppFileInfo message from the specified reader or buffer.
         * @function decode
         * @memberof CCloud_AppFileInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CCloud_AppFileInfo} CCloud_AppFileInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_AppFileInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CCloud_AppFileInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.file_name = reader.string();
                    break;
                case 2:
                    message.sha_file = reader.bytes();
                    break;
                case 3:
                    message.time_stamp = reader.uint64();
                    break;
                case 4:
                    message.raw_file_size = reader.uint32();
                    break;
                case 5:
                    message.persist_state = reader.int32();
                    break;
                case 6:
                    message.platforms_to_sync = reader.uint32();
                    break;
                case 7:
                    message.path_prefix_index = reader.uint32();
                    break;
                case 8:
                    message.machine_name_index = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CCloud_AppFileInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CCloud_AppFileInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CCloud_AppFileInfo} CCloud_AppFileInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_AppFileInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CCloud_AppFileInfo message.
         * @function verify
         * @memberof CCloud_AppFileInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CCloud_AppFileInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.file_name != null && message.hasOwnProperty("file_name"))
                if (!$util.isString(message.file_name))
                    return "file_name: string expected";
            if (message.sha_file != null && message.hasOwnProperty("sha_file"))
                if (!(message.sha_file && typeof message.sha_file.length === "number" || $util.isString(message.sha_file)))
                    return "sha_file: buffer expected";
            if (message.time_stamp != null && message.hasOwnProperty("time_stamp"))
                if (!$util.isInteger(message.time_stamp) && !(message.time_stamp && $util.isInteger(message.time_stamp.low) && $util.isInteger(message.time_stamp.high)))
                    return "time_stamp: integer|Long expected";
            if (message.raw_file_size != null && message.hasOwnProperty("raw_file_size"))
                if (!$util.isInteger(message.raw_file_size))
                    return "raw_file_size: integer expected";
            if (message.persist_state != null && message.hasOwnProperty("persist_state"))
                switch (message.persist_state) {
                default:
                    return "persist_state: enum value expected";
                case 0:
                case 1:
                case 2:
                    break;
                }
            if (message.platforms_to_sync != null && message.hasOwnProperty("platforms_to_sync"))
                if (!$util.isInteger(message.platforms_to_sync))
                    return "platforms_to_sync: integer expected";
            if (message.path_prefix_index != null && message.hasOwnProperty("path_prefix_index"))
                if (!$util.isInteger(message.path_prefix_index))
                    return "path_prefix_index: integer expected";
            if (message.machine_name_index != null && message.hasOwnProperty("machine_name_index"))
                if (!$util.isInteger(message.machine_name_index))
                    return "machine_name_index: integer expected";
            return null;
        };
    
        /**
         * Creates a CCloud_AppFileInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CCloud_AppFileInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CCloud_AppFileInfo} CCloud_AppFileInfo
         */
        CCloud_AppFileInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.CCloud_AppFileInfo)
                return object;
            var message = new $root.CCloud_AppFileInfo();
            if (object.file_name != null)
                message.file_name = String(object.file_name);
            if (object.sha_file != null)
                if (typeof object.sha_file === "string")
                    $util.base64.decode(object.sha_file, message.sha_file = $util.newBuffer($util.base64.length(object.sha_file)), 0);
                else if (object.sha_file.length)
                    message.sha_file = object.sha_file;
            if (object.time_stamp != null)
                if ($util.Long)
                    (message.time_stamp = $util.Long.fromValue(object.time_stamp)).unsigned = true;
                else if (typeof object.time_stamp === "string")
                    message.time_stamp = parseInt(object.time_stamp, 10);
                else if (typeof object.time_stamp === "number")
                    message.time_stamp = object.time_stamp;
                else if (typeof object.time_stamp === "object")
                    message.time_stamp = new $util.LongBits(object.time_stamp.low >>> 0, object.time_stamp.high >>> 0).toNumber(true);
            if (object.raw_file_size != null)
                message.raw_file_size = object.raw_file_size >>> 0;
            switch (object.persist_state) {
            case "k_ECloudStoragePersistStatePersisted":
            case 0:
                message.persist_state = 0;
                break;
            case "k_ECloudStoragePersistStateForgotten":
            case 1:
                message.persist_state = 1;
                break;
            case "k_ECloudStoragePersistStateDeleted":
            case 2:
                message.persist_state = 2;
                break;
            }
            if (object.platforms_to_sync != null)
                message.platforms_to_sync = object.platforms_to_sync >>> 0;
            if (object.path_prefix_index != null)
                message.path_prefix_index = object.path_prefix_index >>> 0;
            if (object.machine_name_index != null)
                message.machine_name_index = object.machine_name_index >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CCloud_AppFileInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CCloud_AppFileInfo
         * @static
         * @param {CCloud_AppFileInfo} message CCloud_AppFileInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CCloud_AppFileInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.file_name = "";
                if (options.bytes === String)
                    object.sha_file = "";
                else {
                    object.sha_file = [];
                    if (options.bytes !== Array)
                        object.sha_file = $util.newBuffer(object.sha_file);
                }
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.time_stamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.time_stamp = options.longs === String ? "0" : 0;
                object.raw_file_size = 0;
                object.persist_state = options.enums === String ? "k_ECloudStoragePersistStatePersisted" : 0;
                object.platforms_to_sync = 0;
                object.path_prefix_index = 0;
                object.machine_name_index = 0;
            }
            if (message.file_name != null && message.hasOwnProperty("file_name"))
                object.file_name = message.file_name;
            if (message.sha_file != null && message.hasOwnProperty("sha_file"))
                object.sha_file = options.bytes === String ? $util.base64.encode(message.sha_file, 0, message.sha_file.length) : options.bytes === Array ? Array.prototype.slice.call(message.sha_file) : message.sha_file;
            if (message.time_stamp != null && message.hasOwnProperty("time_stamp"))
                if (typeof message.time_stamp === "number")
                    object.time_stamp = options.longs === String ? String(message.time_stamp) : message.time_stamp;
                else
                    object.time_stamp = options.longs === String ? $util.Long.prototype.toString.call(message.time_stamp) : options.longs === Number ? new $util.LongBits(message.time_stamp.low >>> 0, message.time_stamp.high >>> 0).toNumber(true) : message.time_stamp;
            if (message.raw_file_size != null && message.hasOwnProperty("raw_file_size"))
                object.raw_file_size = message.raw_file_size;
            if (message.persist_state != null && message.hasOwnProperty("persist_state"))
                object.persist_state = options.enums === String ? $root.ECloudStoragePersistState[message.persist_state] : message.persist_state;
            if (message.platforms_to_sync != null && message.hasOwnProperty("platforms_to_sync"))
                object.platforms_to_sync = message.platforms_to_sync;
            if (message.path_prefix_index != null && message.hasOwnProperty("path_prefix_index"))
                object.path_prefix_index = message.path_prefix_index;
            if (message.machine_name_index != null && message.hasOwnProperty("machine_name_index"))
                object.machine_name_index = message.machine_name_index;
            return object;
        };
    
        /**
         * Converts this CCloud_AppFileInfo to JSON.
         * @function toJSON
         * @memberof CCloud_AppFileInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CCloud_AppFileInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CCloud_AppFileInfo;
    })();
    
    $root.CCloud_GetAppFileChangelist_Response = (function() {
    
        /**
         * Properties of a CCloud_GetAppFileChangelist_Response.
         * @exports ICCloud_GetAppFileChangelist_Response
         * @interface ICCloud_GetAppFileChangelist_Response
         * @property {number|Long|null} [current_change_number] CCloud_GetAppFileChangelist_Response current_change_number
         * @property {Array.<ICCloud_AppFileInfo>|null} [files] CCloud_GetAppFileChangelist_Response files
         * @property {boolean|null} [is_only_delta] CCloud_GetAppFileChangelist_Response is_only_delta
         * @property {Array.<string>|null} [path_prefixes] CCloud_GetAppFileChangelist_Response path_prefixes
         * @property {Array.<string>|null} [machine_names] CCloud_GetAppFileChangelist_Response machine_names
         */
    
        /**
         * Constructs a new CCloud_GetAppFileChangelist_Response.
         * @exports CCloud_GetAppFileChangelist_Response
         * @classdesc Represents a CCloud_GetAppFileChangelist_Response.
         * @implements ICCloud_GetAppFileChangelist_Response
         * @constructor
         * @param {ICCloud_GetAppFileChangelist_Response=} [properties] Properties to set
         */
        function CCloud_GetAppFileChangelist_Response(properties) {
            this.files = [];
            this.path_prefixes = [];
            this.machine_names = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CCloud_GetAppFileChangelist_Response current_change_number.
         * @member {number|Long} current_change_number
         * @memberof CCloud_GetAppFileChangelist_Response
         * @instance
         */
        CCloud_GetAppFileChangelist_Response.prototype.current_change_number = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CCloud_GetAppFileChangelist_Response files.
         * @member {Array.<ICCloud_AppFileInfo>} files
         * @memberof CCloud_GetAppFileChangelist_Response
         * @instance
         */
        CCloud_GetAppFileChangelist_Response.prototype.files = $util.emptyArray;
    
        /**
         * CCloud_GetAppFileChangelist_Response is_only_delta.
         * @member {boolean} is_only_delta
         * @memberof CCloud_GetAppFileChangelist_Response
         * @instance
         */
        CCloud_GetAppFileChangelist_Response.prototype.is_only_delta = false;
    
        /**
         * CCloud_GetAppFileChangelist_Response path_prefixes.
         * @member {Array.<string>} path_prefixes
         * @memberof CCloud_GetAppFileChangelist_Response
         * @instance
         */
        CCloud_GetAppFileChangelist_Response.prototype.path_prefixes = $util.emptyArray;
    
        /**
         * CCloud_GetAppFileChangelist_Response machine_names.
         * @member {Array.<string>} machine_names
         * @memberof CCloud_GetAppFileChangelist_Response
         * @instance
         */
        CCloud_GetAppFileChangelist_Response.prototype.machine_names = $util.emptyArray;
    
        /**
         * Creates a new CCloud_GetAppFileChangelist_Response instance using the specified properties.
         * @function create
         * @memberof CCloud_GetAppFileChangelist_Response
         * @static
         * @param {ICCloud_GetAppFileChangelist_Response=} [properties] Properties to set
         * @returns {CCloud_GetAppFileChangelist_Response} CCloud_GetAppFileChangelist_Response instance
         */
        CCloud_GetAppFileChangelist_Response.create = function create(properties) {
            return new CCloud_GetAppFileChangelist_Response(properties);
        };
    
        /**
         * Encodes the specified CCloud_GetAppFileChangelist_Response message. Does not implicitly {@link CCloud_GetAppFileChangelist_Response.verify|verify} messages.
         * @function encode
         * @memberof CCloud_GetAppFileChangelist_Response
         * @static
         * @param {ICCloud_GetAppFileChangelist_Response} message CCloud_GetAppFileChangelist_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_GetAppFileChangelist_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.current_change_number != null && message.hasOwnProperty("current_change_number"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.current_change_number);
            if (message.files != null && message.files.length)
                for (var i = 0; i < message.files.length; ++i)
                    $root.CCloud_AppFileInfo.encode(message.files[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.is_only_delta != null && message.hasOwnProperty("is_only_delta"))
                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.is_only_delta);
            if (message.path_prefixes != null && message.path_prefixes.length)
                for (var i = 0; i < message.path_prefixes.length; ++i)
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.path_prefixes[i]);
            if (message.machine_names != null && message.machine_names.length)
                for (var i = 0; i < message.machine_names.length; ++i)
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.machine_names[i]);
            return writer;
        };
    
        /**
         * Encodes the specified CCloud_GetAppFileChangelist_Response message, length delimited. Does not implicitly {@link CCloud_GetAppFileChangelist_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CCloud_GetAppFileChangelist_Response
         * @static
         * @param {ICCloud_GetAppFileChangelist_Response} message CCloud_GetAppFileChangelist_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_GetAppFileChangelist_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CCloud_GetAppFileChangelist_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CCloud_GetAppFileChangelist_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CCloud_GetAppFileChangelist_Response} CCloud_GetAppFileChangelist_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_GetAppFileChangelist_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CCloud_GetAppFileChangelist_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.current_change_number = reader.uint64();
                    break;
                case 2:
                    if (!(message.files && message.files.length))
                        message.files = [];
                    message.files.push($root.CCloud_AppFileInfo.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.is_only_delta = reader.bool();
                    break;
                case 4:
                    if (!(message.path_prefixes && message.path_prefixes.length))
                        message.path_prefixes = [];
                    message.path_prefixes.push(reader.string());
                    break;
                case 5:
                    if (!(message.machine_names && message.machine_names.length))
                        message.machine_names = [];
                    message.machine_names.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CCloud_GetAppFileChangelist_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CCloud_GetAppFileChangelist_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CCloud_GetAppFileChangelist_Response} CCloud_GetAppFileChangelist_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_GetAppFileChangelist_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CCloud_GetAppFileChangelist_Response message.
         * @function verify
         * @memberof CCloud_GetAppFileChangelist_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CCloud_GetAppFileChangelist_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.current_change_number != null && message.hasOwnProperty("current_change_number"))
                if (!$util.isInteger(message.current_change_number) && !(message.current_change_number && $util.isInteger(message.current_change_number.low) && $util.isInteger(message.current_change_number.high)))
                    return "current_change_number: integer|Long expected";
            if (message.files != null && message.hasOwnProperty("files")) {
                if (!Array.isArray(message.files))
                    return "files: array expected";
                for (var i = 0; i < message.files.length; ++i) {
                    var error = $root.CCloud_AppFileInfo.verify(message.files[i]);
                    if (error)
                        return "files." + error;
                }
            }
            if (message.is_only_delta != null && message.hasOwnProperty("is_only_delta"))
                if (typeof message.is_only_delta !== "boolean")
                    return "is_only_delta: boolean expected";
            if (message.path_prefixes != null && message.hasOwnProperty("path_prefixes")) {
                if (!Array.isArray(message.path_prefixes))
                    return "path_prefixes: array expected";
                for (var i = 0; i < message.path_prefixes.length; ++i)
                    if (!$util.isString(message.path_prefixes[i]))
                        return "path_prefixes: string[] expected";
            }
            if (message.machine_names != null && message.hasOwnProperty("machine_names")) {
                if (!Array.isArray(message.machine_names))
                    return "machine_names: array expected";
                for (var i = 0; i < message.machine_names.length; ++i)
                    if (!$util.isString(message.machine_names[i]))
                        return "machine_names: string[] expected";
            }
            return null;
        };
    
        /**
         * Creates a CCloud_GetAppFileChangelist_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CCloud_GetAppFileChangelist_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CCloud_GetAppFileChangelist_Response} CCloud_GetAppFileChangelist_Response
         */
        CCloud_GetAppFileChangelist_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CCloud_GetAppFileChangelist_Response)
                return object;
            var message = new $root.CCloud_GetAppFileChangelist_Response();
            if (object.current_change_number != null)
                if ($util.Long)
                    (message.current_change_number = $util.Long.fromValue(object.current_change_number)).unsigned = true;
                else if (typeof object.current_change_number === "string")
                    message.current_change_number = parseInt(object.current_change_number, 10);
                else if (typeof object.current_change_number === "number")
                    message.current_change_number = object.current_change_number;
                else if (typeof object.current_change_number === "object")
                    message.current_change_number = new $util.LongBits(object.current_change_number.low >>> 0, object.current_change_number.high >>> 0).toNumber(true);
            if (object.files) {
                if (!Array.isArray(object.files))
                    throw TypeError(".CCloud_GetAppFileChangelist_Response.files: array expected");
                message.files = [];
                for (var i = 0; i < object.files.length; ++i) {
                    if (typeof object.files[i] !== "object")
                        throw TypeError(".CCloud_GetAppFileChangelist_Response.files: object expected");
                    message.files[i] = $root.CCloud_AppFileInfo.fromObject(object.files[i]);
                }
            }
            if (object.is_only_delta != null)
                message.is_only_delta = Boolean(object.is_only_delta);
            if (object.path_prefixes) {
                if (!Array.isArray(object.path_prefixes))
                    throw TypeError(".CCloud_GetAppFileChangelist_Response.path_prefixes: array expected");
                message.path_prefixes = [];
                for (var i = 0; i < object.path_prefixes.length; ++i)
                    message.path_prefixes[i] = String(object.path_prefixes[i]);
            }
            if (object.machine_names) {
                if (!Array.isArray(object.machine_names))
                    throw TypeError(".CCloud_GetAppFileChangelist_Response.machine_names: array expected");
                message.machine_names = [];
                for (var i = 0; i < object.machine_names.length; ++i)
                    message.machine_names[i] = String(object.machine_names[i]);
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CCloud_GetAppFileChangelist_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CCloud_GetAppFileChangelist_Response
         * @static
         * @param {CCloud_GetAppFileChangelist_Response} message CCloud_GetAppFileChangelist_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CCloud_GetAppFileChangelist_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.files = [];
                object.path_prefixes = [];
                object.machine_names = [];
            }
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.current_change_number = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.current_change_number = options.longs === String ? "0" : 0;
                object.is_only_delta = false;
            }
            if (message.current_change_number != null && message.hasOwnProperty("current_change_number"))
                if (typeof message.current_change_number === "number")
                    object.current_change_number = options.longs === String ? String(message.current_change_number) : message.current_change_number;
                else
                    object.current_change_number = options.longs === String ? $util.Long.prototype.toString.call(message.current_change_number) : options.longs === Number ? new $util.LongBits(message.current_change_number.low >>> 0, message.current_change_number.high >>> 0).toNumber(true) : message.current_change_number;
            if (message.files && message.files.length) {
                object.files = [];
                for (var j = 0; j < message.files.length; ++j)
                    object.files[j] = $root.CCloud_AppFileInfo.toObject(message.files[j], options);
            }
            if (message.is_only_delta != null && message.hasOwnProperty("is_only_delta"))
                object.is_only_delta = message.is_only_delta;
            if (message.path_prefixes && message.path_prefixes.length) {
                object.path_prefixes = [];
                for (var j = 0; j < message.path_prefixes.length; ++j)
                    object.path_prefixes[j] = message.path_prefixes[j];
            }
            if (message.machine_names && message.machine_names.length) {
                object.machine_names = [];
                for (var j = 0; j < message.machine_names.length; ++j)
                    object.machine_names[j] = message.machine_names[j];
            }
            return object;
        };
    
        /**
         * Converts this CCloud_GetAppFileChangelist_Response to JSON.
         * @function toJSON
         * @memberof CCloud_GetAppFileChangelist_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CCloud_GetAppFileChangelist_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CCloud_GetAppFileChangelist_Response;
    })();
    
    $root.CCloud_AppSessionSuspend_Request = (function() {
    
        /**
         * Properties of a CCloud_AppSessionSuspend_Request.
         * @exports ICCloud_AppSessionSuspend_Request
         * @interface ICCloud_AppSessionSuspend_Request
         * @property {number|null} [appid] CCloud_AppSessionSuspend_Request appid
         * @property {number|Long|null} [client_id] CCloud_AppSessionSuspend_Request client_id
         * @property {string|null} [machine_name] CCloud_AppSessionSuspend_Request machine_name
         * @property {boolean|null} [cloud_sync_completed] CCloud_AppSessionSuspend_Request cloud_sync_completed
         */
    
        /**
         * Constructs a new CCloud_AppSessionSuspend_Request.
         * @exports CCloud_AppSessionSuspend_Request
         * @classdesc Represents a CCloud_AppSessionSuspend_Request.
         * @implements ICCloud_AppSessionSuspend_Request
         * @constructor
         * @param {ICCloud_AppSessionSuspend_Request=} [properties] Properties to set
         */
        function CCloud_AppSessionSuspend_Request(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CCloud_AppSessionSuspend_Request appid.
         * @member {number} appid
         * @memberof CCloud_AppSessionSuspend_Request
         * @instance
         */
        CCloud_AppSessionSuspend_Request.prototype.appid = 0;
    
        /**
         * CCloud_AppSessionSuspend_Request client_id.
         * @member {number|Long} client_id
         * @memberof CCloud_AppSessionSuspend_Request
         * @instance
         */
        CCloud_AppSessionSuspend_Request.prototype.client_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CCloud_AppSessionSuspend_Request machine_name.
         * @member {string} machine_name
         * @memberof CCloud_AppSessionSuspend_Request
         * @instance
         */
        CCloud_AppSessionSuspend_Request.prototype.machine_name = "";
    
        /**
         * CCloud_AppSessionSuspend_Request cloud_sync_completed.
         * @member {boolean} cloud_sync_completed
         * @memberof CCloud_AppSessionSuspend_Request
         * @instance
         */
        CCloud_AppSessionSuspend_Request.prototype.cloud_sync_completed = false;
    
        /**
         * Creates a new CCloud_AppSessionSuspend_Request instance using the specified properties.
         * @function create
         * @memberof CCloud_AppSessionSuspend_Request
         * @static
         * @param {ICCloud_AppSessionSuspend_Request=} [properties] Properties to set
         * @returns {CCloud_AppSessionSuspend_Request} CCloud_AppSessionSuspend_Request instance
         */
        CCloud_AppSessionSuspend_Request.create = function create(properties) {
            return new CCloud_AppSessionSuspend_Request(properties);
        };
    
        /**
         * Encodes the specified CCloud_AppSessionSuspend_Request message. Does not implicitly {@link CCloud_AppSessionSuspend_Request.verify|verify} messages.
         * @function encode
         * @memberof CCloud_AppSessionSuspend_Request
         * @static
         * @param {ICCloud_AppSessionSuspend_Request} message CCloud_AppSessionSuspend_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_AppSessionSuspend_Request.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.appid != null && message.hasOwnProperty("appid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.appid);
            if (message.client_id != null && message.hasOwnProperty("client_id"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.client_id);
            if (message.machine_name != null && message.hasOwnProperty("machine_name"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.machine_name);
            if (message.cloud_sync_completed != null && message.hasOwnProperty("cloud_sync_completed"))
                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.cloud_sync_completed);
            return writer;
        };
    
        /**
         * Encodes the specified CCloud_AppSessionSuspend_Request message, length delimited. Does not implicitly {@link CCloud_AppSessionSuspend_Request.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CCloud_AppSessionSuspend_Request
         * @static
         * @param {ICCloud_AppSessionSuspend_Request} message CCloud_AppSessionSuspend_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_AppSessionSuspend_Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CCloud_AppSessionSuspend_Request message from the specified reader or buffer.
         * @function decode
         * @memberof CCloud_AppSessionSuspend_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CCloud_AppSessionSuspend_Request} CCloud_AppSessionSuspend_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_AppSessionSuspend_Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CCloud_AppSessionSuspend_Request();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.appid = reader.uint32();
                    break;
                case 2:
                    message.client_id = reader.uint64();
                    break;
                case 3:
                    message.machine_name = reader.string();
                    break;
                case 4:
                    message.cloud_sync_completed = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CCloud_AppSessionSuspend_Request message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CCloud_AppSessionSuspend_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CCloud_AppSessionSuspend_Request} CCloud_AppSessionSuspend_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_AppSessionSuspend_Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CCloud_AppSessionSuspend_Request message.
         * @function verify
         * @memberof CCloud_AppSessionSuspend_Request
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CCloud_AppSessionSuspend_Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.appid != null && message.hasOwnProperty("appid"))
                if (!$util.isInteger(message.appid))
                    return "appid: integer expected";
            if (message.client_id != null && message.hasOwnProperty("client_id"))
                if (!$util.isInteger(message.client_id) && !(message.client_id && $util.isInteger(message.client_id.low) && $util.isInteger(message.client_id.high)))
                    return "client_id: integer|Long expected";
            if (message.machine_name != null && message.hasOwnProperty("machine_name"))
                if (!$util.isString(message.machine_name))
                    return "machine_name: string expected";
            if (message.cloud_sync_completed != null && message.hasOwnProperty("cloud_sync_completed"))
                if (typeof message.cloud_sync_completed !== "boolean")
                    return "cloud_sync_completed: boolean expected";
            return null;
        };
    
        /**
         * Creates a CCloud_AppSessionSuspend_Request message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CCloud_AppSessionSuspend_Request
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CCloud_AppSessionSuspend_Request} CCloud_AppSessionSuspend_Request
         */
        CCloud_AppSessionSuspend_Request.fromObject = function fromObject(object) {
            if (object instanceof $root.CCloud_AppSessionSuspend_Request)
                return object;
            var message = new $root.CCloud_AppSessionSuspend_Request();
            if (object.appid != null)
                message.appid = object.appid >>> 0;
            if (object.client_id != null)
                if ($util.Long)
                    (message.client_id = $util.Long.fromValue(object.client_id)).unsigned = true;
                else if (typeof object.client_id === "string")
                    message.client_id = parseInt(object.client_id, 10);
                else if (typeof object.client_id === "number")
                    message.client_id = object.client_id;
                else if (typeof object.client_id === "object")
                    message.client_id = new $util.LongBits(object.client_id.low >>> 0, object.client_id.high >>> 0).toNumber(true);
            if (object.machine_name != null)
                message.machine_name = String(object.machine_name);
            if (object.cloud_sync_completed != null)
                message.cloud_sync_completed = Boolean(object.cloud_sync_completed);
            return message;
        };
    
        /**
         * Creates a plain object from a CCloud_AppSessionSuspend_Request message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CCloud_AppSessionSuspend_Request
         * @static
         * @param {CCloud_AppSessionSuspend_Request} message CCloud_AppSessionSuspend_Request
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CCloud_AppSessionSuspend_Request.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.appid = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.client_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.client_id = options.longs === String ? "0" : 0;
                object.machine_name = "";
                object.cloud_sync_completed = false;
            }
            if (message.appid != null && message.hasOwnProperty("appid"))
                object.appid = message.appid;
            if (message.client_id != null && message.hasOwnProperty("client_id"))
                if (typeof message.client_id === "number")
                    object.client_id = options.longs === String ? String(message.client_id) : message.client_id;
                else
                    object.client_id = options.longs === String ? $util.Long.prototype.toString.call(message.client_id) : options.longs === Number ? new $util.LongBits(message.client_id.low >>> 0, message.client_id.high >>> 0).toNumber(true) : message.client_id;
            if (message.machine_name != null && message.hasOwnProperty("machine_name"))
                object.machine_name = message.machine_name;
            if (message.cloud_sync_completed != null && message.hasOwnProperty("cloud_sync_completed"))
                object.cloud_sync_completed = message.cloud_sync_completed;
            return object;
        };
    
        /**
         * Converts this CCloud_AppSessionSuspend_Request to JSON.
         * @function toJSON
         * @memberof CCloud_AppSessionSuspend_Request
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CCloud_AppSessionSuspend_Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CCloud_AppSessionSuspend_Request;
    })();
    
    $root.CCloud_AppSessionSuspend_Response = (function() {
    
        /**
         * Properties of a CCloud_AppSessionSuspend_Response.
         * @exports ICCloud_AppSessionSuspend_Response
         * @interface ICCloud_AppSessionSuspend_Response
         */
    
        /**
         * Constructs a new CCloud_AppSessionSuspend_Response.
         * @exports CCloud_AppSessionSuspend_Response
         * @classdesc Represents a CCloud_AppSessionSuspend_Response.
         * @implements ICCloud_AppSessionSuspend_Response
         * @constructor
         * @param {ICCloud_AppSessionSuspend_Response=} [properties] Properties to set
         */
        function CCloud_AppSessionSuspend_Response(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * Creates a new CCloud_AppSessionSuspend_Response instance using the specified properties.
         * @function create
         * @memberof CCloud_AppSessionSuspend_Response
         * @static
         * @param {ICCloud_AppSessionSuspend_Response=} [properties] Properties to set
         * @returns {CCloud_AppSessionSuspend_Response} CCloud_AppSessionSuspend_Response instance
         */
        CCloud_AppSessionSuspend_Response.create = function create(properties) {
            return new CCloud_AppSessionSuspend_Response(properties);
        };
    
        /**
         * Encodes the specified CCloud_AppSessionSuspend_Response message. Does not implicitly {@link CCloud_AppSessionSuspend_Response.verify|verify} messages.
         * @function encode
         * @memberof CCloud_AppSessionSuspend_Response
         * @static
         * @param {ICCloud_AppSessionSuspend_Response} message CCloud_AppSessionSuspend_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_AppSessionSuspend_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };
    
        /**
         * Encodes the specified CCloud_AppSessionSuspend_Response message, length delimited. Does not implicitly {@link CCloud_AppSessionSuspend_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CCloud_AppSessionSuspend_Response
         * @static
         * @param {ICCloud_AppSessionSuspend_Response} message CCloud_AppSessionSuspend_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_AppSessionSuspend_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CCloud_AppSessionSuspend_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CCloud_AppSessionSuspend_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CCloud_AppSessionSuspend_Response} CCloud_AppSessionSuspend_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_AppSessionSuspend_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CCloud_AppSessionSuspend_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CCloud_AppSessionSuspend_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CCloud_AppSessionSuspend_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CCloud_AppSessionSuspend_Response} CCloud_AppSessionSuspend_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_AppSessionSuspend_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CCloud_AppSessionSuspend_Response message.
         * @function verify
         * @memberof CCloud_AppSessionSuspend_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CCloud_AppSessionSuspend_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };
    
        /**
         * Creates a CCloud_AppSessionSuspend_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CCloud_AppSessionSuspend_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CCloud_AppSessionSuspend_Response} CCloud_AppSessionSuspend_Response
         */
        CCloud_AppSessionSuspend_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CCloud_AppSessionSuspend_Response)
                return object;
            return new $root.CCloud_AppSessionSuspend_Response();
        };
    
        /**
         * Creates a plain object from a CCloud_AppSessionSuspend_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CCloud_AppSessionSuspend_Response
         * @static
         * @param {CCloud_AppSessionSuspend_Response} message CCloud_AppSessionSuspend_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CCloud_AppSessionSuspend_Response.toObject = function toObject() {
            return {};
        };
    
        /**
         * Converts this CCloud_AppSessionSuspend_Response to JSON.
         * @function toJSON
         * @memberof CCloud_AppSessionSuspend_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CCloud_AppSessionSuspend_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CCloud_AppSessionSuspend_Response;
    })();
    
    $root.CCloud_AppSessionResume_Request = (function() {
    
        /**
         * Properties of a CCloud_AppSessionResume_Request.
         * @exports ICCloud_AppSessionResume_Request
         * @interface ICCloud_AppSessionResume_Request
         * @property {number|null} [appid] CCloud_AppSessionResume_Request appid
         * @property {number|Long|null} [client_id] CCloud_AppSessionResume_Request client_id
         */
    
        /**
         * Constructs a new CCloud_AppSessionResume_Request.
         * @exports CCloud_AppSessionResume_Request
         * @classdesc Represents a CCloud_AppSessionResume_Request.
         * @implements ICCloud_AppSessionResume_Request
         * @constructor
         * @param {ICCloud_AppSessionResume_Request=} [properties] Properties to set
         */
        function CCloud_AppSessionResume_Request(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CCloud_AppSessionResume_Request appid.
         * @member {number} appid
         * @memberof CCloud_AppSessionResume_Request
         * @instance
         */
        CCloud_AppSessionResume_Request.prototype.appid = 0;
    
        /**
         * CCloud_AppSessionResume_Request client_id.
         * @member {number|Long} client_id
         * @memberof CCloud_AppSessionResume_Request
         * @instance
         */
        CCloud_AppSessionResume_Request.prototype.client_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * Creates a new CCloud_AppSessionResume_Request instance using the specified properties.
         * @function create
         * @memberof CCloud_AppSessionResume_Request
         * @static
         * @param {ICCloud_AppSessionResume_Request=} [properties] Properties to set
         * @returns {CCloud_AppSessionResume_Request} CCloud_AppSessionResume_Request instance
         */
        CCloud_AppSessionResume_Request.create = function create(properties) {
            return new CCloud_AppSessionResume_Request(properties);
        };
    
        /**
         * Encodes the specified CCloud_AppSessionResume_Request message. Does not implicitly {@link CCloud_AppSessionResume_Request.verify|verify} messages.
         * @function encode
         * @memberof CCloud_AppSessionResume_Request
         * @static
         * @param {ICCloud_AppSessionResume_Request} message CCloud_AppSessionResume_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_AppSessionResume_Request.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.appid != null && message.hasOwnProperty("appid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.appid);
            if (message.client_id != null && message.hasOwnProperty("client_id"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.client_id);
            return writer;
        };
    
        /**
         * Encodes the specified CCloud_AppSessionResume_Request message, length delimited. Does not implicitly {@link CCloud_AppSessionResume_Request.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CCloud_AppSessionResume_Request
         * @static
         * @param {ICCloud_AppSessionResume_Request} message CCloud_AppSessionResume_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_AppSessionResume_Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CCloud_AppSessionResume_Request message from the specified reader or buffer.
         * @function decode
         * @memberof CCloud_AppSessionResume_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CCloud_AppSessionResume_Request} CCloud_AppSessionResume_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_AppSessionResume_Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CCloud_AppSessionResume_Request();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.appid = reader.uint32();
                    break;
                case 2:
                    message.client_id = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CCloud_AppSessionResume_Request message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CCloud_AppSessionResume_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CCloud_AppSessionResume_Request} CCloud_AppSessionResume_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_AppSessionResume_Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CCloud_AppSessionResume_Request message.
         * @function verify
         * @memberof CCloud_AppSessionResume_Request
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CCloud_AppSessionResume_Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.appid != null && message.hasOwnProperty("appid"))
                if (!$util.isInteger(message.appid))
                    return "appid: integer expected";
            if (message.client_id != null && message.hasOwnProperty("client_id"))
                if (!$util.isInteger(message.client_id) && !(message.client_id && $util.isInteger(message.client_id.low) && $util.isInteger(message.client_id.high)))
                    return "client_id: integer|Long expected";
            return null;
        };
    
        /**
         * Creates a CCloud_AppSessionResume_Request message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CCloud_AppSessionResume_Request
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CCloud_AppSessionResume_Request} CCloud_AppSessionResume_Request
         */
        CCloud_AppSessionResume_Request.fromObject = function fromObject(object) {
            if (object instanceof $root.CCloud_AppSessionResume_Request)
                return object;
            var message = new $root.CCloud_AppSessionResume_Request();
            if (object.appid != null)
                message.appid = object.appid >>> 0;
            if (object.client_id != null)
                if ($util.Long)
                    (message.client_id = $util.Long.fromValue(object.client_id)).unsigned = true;
                else if (typeof object.client_id === "string")
                    message.client_id = parseInt(object.client_id, 10);
                else if (typeof object.client_id === "number")
                    message.client_id = object.client_id;
                else if (typeof object.client_id === "object")
                    message.client_id = new $util.LongBits(object.client_id.low >>> 0, object.client_id.high >>> 0).toNumber(true);
            return message;
        };
    
        /**
         * Creates a plain object from a CCloud_AppSessionResume_Request message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CCloud_AppSessionResume_Request
         * @static
         * @param {CCloud_AppSessionResume_Request} message CCloud_AppSessionResume_Request
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CCloud_AppSessionResume_Request.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.appid = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.client_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.client_id = options.longs === String ? "0" : 0;
            }
            if (message.appid != null && message.hasOwnProperty("appid"))
                object.appid = message.appid;
            if (message.client_id != null && message.hasOwnProperty("client_id"))
                if (typeof message.client_id === "number")
                    object.client_id = options.longs === String ? String(message.client_id) : message.client_id;
                else
                    object.client_id = options.longs === String ? $util.Long.prototype.toString.call(message.client_id) : options.longs === Number ? new $util.LongBits(message.client_id.low >>> 0, message.client_id.high >>> 0).toNumber(true) : message.client_id;
            return object;
        };
    
        /**
         * Converts this CCloud_AppSessionResume_Request to JSON.
         * @function toJSON
         * @memberof CCloud_AppSessionResume_Request
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CCloud_AppSessionResume_Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CCloud_AppSessionResume_Request;
    })();
    
    $root.CCloud_AppSessionResume_Response = (function() {
    
        /**
         * Properties of a CCloud_AppSessionResume_Response.
         * @exports ICCloud_AppSessionResume_Response
         * @interface ICCloud_AppSessionResume_Response
         */
    
        /**
         * Constructs a new CCloud_AppSessionResume_Response.
         * @exports CCloud_AppSessionResume_Response
         * @classdesc Represents a CCloud_AppSessionResume_Response.
         * @implements ICCloud_AppSessionResume_Response
         * @constructor
         * @param {ICCloud_AppSessionResume_Response=} [properties] Properties to set
         */
        function CCloud_AppSessionResume_Response(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * Creates a new CCloud_AppSessionResume_Response instance using the specified properties.
         * @function create
         * @memberof CCloud_AppSessionResume_Response
         * @static
         * @param {ICCloud_AppSessionResume_Response=} [properties] Properties to set
         * @returns {CCloud_AppSessionResume_Response} CCloud_AppSessionResume_Response instance
         */
        CCloud_AppSessionResume_Response.create = function create(properties) {
            return new CCloud_AppSessionResume_Response(properties);
        };
    
        /**
         * Encodes the specified CCloud_AppSessionResume_Response message. Does not implicitly {@link CCloud_AppSessionResume_Response.verify|verify} messages.
         * @function encode
         * @memberof CCloud_AppSessionResume_Response
         * @static
         * @param {ICCloud_AppSessionResume_Response} message CCloud_AppSessionResume_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_AppSessionResume_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };
    
        /**
         * Encodes the specified CCloud_AppSessionResume_Response message, length delimited. Does not implicitly {@link CCloud_AppSessionResume_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CCloud_AppSessionResume_Response
         * @static
         * @param {ICCloud_AppSessionResume_Response} message CCloud_AppSessionResume_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_AppSessionResume_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CCloud_AppSessionResume_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CCloud_AppSessionResume_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CCloud_AppSessionResume_Response} CCloud_AppSessionResume_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_AppSessionResume_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CCloud_AppSessionResume_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CCloud_AppSessionResume_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CCloud_AppSessionResume_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CCloud_AppSessionResume_Response} CCloud_AppSessionResume_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_AppSessionResume_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CCloud_AppSessionResume_Response message.
         * @function verify
         * @memberof CCloud_AppSessionResume_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CCloud_AppSessionResume_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };
    
        /**
         * Creates a CCloud_AppSessionResume_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CCloud_AppSessionResume_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CCloud_AppSessionResume_Response} CCloud_AppSessionResume_Response
         */
        CCloud_AppSessionResume_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CCloud_AppSessionResume_Response)
                return object;
            return new $root.CCloud_AppSessionResume_Response();
        };
    
        /**
         * Creates a plain object from a CCloud_AppSessionResume_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CCloud_AppSessionResume_Response
         * @static
         * @param {CCloud_AppSessionResume_Response} message CCloud_AppSessionResume_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CCloud_AppSessionResume_Response.toObject = function toObject() {
            return {};
        };
    
        /**
         * Converts this CCloud_AppSessionResume_Response to JSON.
         * @function toJSON
         * @memberof CCloud_AppSessionResume_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CCloud_AppSessionResume_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CCloud_AppSessionResume_Response;
    })();
    
    $root.CCloud_AppLaunchIntent_Request = (function() {
    
        /**
         * Properties of a CCloud_AppLaunchIntent_Request.
         * @exports ICCloud_AppLaunchIntent_Request
         * @interface ICCloud_AppLaunchIntent_Request
         * @property {number|null} [appid] CCloud_AppLaunchIntent_Request appid
         * @property {number|Long|null} [client_id] CCloud_AppLaunchIntent_Request client_id
         * @property {string|null} [machine_name] CCloud_AppLaunchIntent_Request machine_name
         * @property {boolean|null} [ignore_pending_operations] CCloud_AppLaunchIntent_Request ignore_pending_operations
         */
    
        /**
         * Constructs a new CCloud_AppLaunchIntent_Request.
         * @exports CCloud_AppLaunchIntent_Request
         * @classdesc Represents a CCloud_AppLaunchIntent_Request.
         * @implements ICCloud_AppLaunchIntent_Request
         * @constructor
         * @param {ICCloud_AppLaunchIntent_Request=} [properties] Properties to set
         */
        function CCloud_AppLaunchIntent_Request(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CCloud_AppLaunchIntent_Request appid.
         * @member {number} appid
         * @memberof CCloud_AppLaunchIntent_Request
         * @instance
         */
        CCloud_AppLaunchIntent_Request.prototype.appid = 0;
    
        /**
         * CCloud_AppLaunchIntent_Request client_id.
         * @member {number|Long} client_id
         * @memberof CCloud_AppLaunchIntent_Request
         * @instance
         */
        CCloud_AppLaunchIntent_Request.prototype.client_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CCloud_AppLaunchIntent_Request machine_name.
         * @member {string} machine_name
         * @memberof CCloud_AppLaunchIntent_Request
         * @instance
         */
        CCloud_AppLaunchIntent_Request.prototype.machine_name = "";
    
        /**
         * CCloud_AppLaunchIntent_Request ignore_pending_operations.
         * @member {boolean} ignore_pending_operations
         * @memberof CCloud_AppLaunchIntent_Request
         * @instance
         */
        CCloud_AppLaunchIntent_Request.prototype.ignore_pending_operations = false;
    
        /**
         * Creates a new CCloud_AppLaunchIntent_Request instance using the specified properties.
         * @function create
         * @memberof CCloud_AppLaunchIntent_Request
         * @static
         * @param {ICCloud_AppLaunchIntent_Request=} [properties] Properties to set
         * @returns {CCloud_AppLaunchIntent_Request} CCloud_AppLaunchIntent_Request instance
         */
        CCloud_AppLaunchIntent_Request.create = function create(properties) {
            return new CCloud_AppLaunchIntent_Request(properties);
        };
    
        /**
         * Encodes the specified CCloud_AppLaunchIntent_Request message. Does not implicitly {@link CCloud_AppLaunchIntent_Request.verify|verify} messages.
         * @function encode
         * @memberof CCloud_AppLaunchIntent_Request
         * @static
         * @param {ICCloud_AppLaunchIntent_Request} message CCloud_AppLaunchIntent_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_AppLaunchIntent_Request.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.appid != null && message.hasOwnProperty("appid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.appid);
            if (message.client_id != null && message.hasOwnProperty("client_id"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.client_id);
            if (message.machine_name != null && message.hasOwnProperty("machine_name"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.machine_name);
            if (message.ignore_pending_operations != null && message.hasOwnProperty("ignore_pending_operations"))
                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.ignore_pending_operations);
            return writer;
        };
    
        /**
         * Encodes the specified CCloud_AppLaunchIntent_Request message, length delimited. Does not implicitly {@link CCloud_AppLaunchIntent_Request.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CCloud_AppLaunchIntent_Request
         * @static
         * @param {ICCloud_AppLaunchIntent_Request} message CCloud_AppLaunchIntent_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_AppLaunchIntent_Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CCloud_AppLaunchIntent_Request message from the specified reader or buffer.
         * @function decode
         * @memberof CCloud_AppLaunchIntent_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CCloud_AppLaunchIntent_Request} CCloud_AppLaunchIntent_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_AppLaunchIntent_Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CCloud_AppLaunchIntent_Request();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.appid = reader.uint32();
                    break;
                case 2:
                    message.client_id = reader.uint64();
                    break;
                case 3:
                    message.machine_name = reader.string();
                    break;
                case 4:
                    message.ignore_pending_operations = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CCloud_AppLaunchIntent_Request message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CCloud_AppLaunchIntent_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CCloud_AppLaunchIntent_Request} CCloud_AppLaunchIntent_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_AppLaunchIntent_Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CCloud_AppLaunchIntent_Request message.
         * @function verify
         * @memberof CCloud_AppLaunchIntent_Request
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CCloud_AppLaunchIntent_Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.appid != null && message.hasOwnProperty("appid"))
                if (!$util.isInteger(message.appid))
                    return "appid: integer expected";
            if (message.client_id != null && message.hasOwnProperty("client_id"))
                if (!$util.isInteger(message.client_id) && !(message.client_id && $util.isInteger(message.client_id.low) && $util.isInteger(message.client_id.high)))
                    return "client_id: integer|Long expected";
            if (message.machine_name != null && message.hasOwnProperty("machine_name"))
                if (!$util.isString(message.machine_name))
                    return "machine_name: string expected";
            if (message.ignore_pending_operations != null && message.hasOwnProperty("ignore_pending_operations"))
                if (typeof message.ignore_pending_operations !== "boolean")
                    return "ignore_pending_operations: boolean expected";
            return null;
        };
    
        /**
         * Creates a CCloud_AppLaunchIntent_Request message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CCloud_AppLaunchIntent_Request
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CCloud_AppLaunchIntent_Request} CCloud_AppLaunchIntent_Request
         */
        CCloud_AppLaunchIntent_Request.fromObject = function fromObject(object) {
            if (object instanceof $root.CCloud_AppLaunchIntent_Request)
                return object;
            var message = new $root.CCloud_AppLaunchIntent_Request();
            if (object.appid != null)
                message.appid = object.appid >>> 0;
            if (object.client_id != null)
                if ($util.Long)
                    (message.client_id = $util.Long.fromValue(object.client_id)).unsigned = true;
                else if (typeof object.client_id === "string")
                    message.client_id = parseInt(object.client_id, 10);
                else if (typeof object.client_id === "number")
                    message.client_id = object.client_id;
                else if (typeof object.client_id === "object")
                    message.client_id = new $util.LongBits(object.client_id.low >>> 0, object.client_id.high >>> 0).toNumber(true);
            if (object.machine_name != null)
                message.machine_name = String(object.machine_name);
            if (object.ignore_pending_operations != null)
                message.ignore_pending_operations = Boolean(object.ignore_pending_operations);
            return message;
        };
    
        /**
         * Creates a plain object from a CCloud_AppLaunchIntent_Request message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CCloud_AppLaunchIntent_Request
         * @static
         * @param {CCloud_AppLaunchIntent_Request} message CCloud_AppLaunchIntent_Request
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CCloud_AppLaunchIntent_Request.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.appid = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.client_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.client_id = options.longs === String ? "0" : 0;
                object.machine_name = "";
                object.ignore_pending_operations = false;
            }
            if (message.appid != null && message.hasOwnProperty("appid"))
                object.appid = message.appid;
            if (message.client_id != null && message.hasOwnProperty("client_id"))
                if (typeof message.client_id === "number")
                    object.client_id = options.longs === String ? String(message.client_id) : message.client_id;
                else
                    object.client_id = options.longs === String ? $util.Long.prototype.toString.call(message.client_id) : options.longs === Number ? new $util.LongBits(message.client_id.low >>> 0, message.client_id.high >>> 0).toNumber(true) : message.client_id;
            if (message.machine_name != null && message.hasOwnProperty("machine_name"))
                object.machine_name = message.machine_name;
            if (message.ignore_pending_operations != null && message.hasOwnProperty("ignore_pending_operations"))
                object.ignore_pending_operations = message.ignore_pending_operations;
            return object;
        };
    
        /**
         * Converts this CCloud_AppLaunchIntent_Request to JSON.
         * @function toJSON
         * @memberof CCloud_AppLaunchIntent_Request
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CCloud_AppLaunchIntent_Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CCloud_AppLaunchIntent_Request;
    })();
    
    $root.CCloud_AppLaunchIntent_Response = (function() {
    
        /**
         * Properties of a CCloud_AppLaunchIntent_Response.
         * @exports ICCloud_AppLaunchIntent_Response
         * @interface ICCloud_AppLaunchIntent_Response
         * @property {Array.<ICCloud_PendingRemoteOperation>|null} [pending_remote_operations] CCloud_AppLaunchIntent_Response pending_remote_operations
         */
    
        /**
         * Constructs a new CCloud_AppLaunchIntent_Response.
         * @exports CCloud_AppLaunchIntent_Response
         * @classdesc Represents a CCloud_AppLaunchIntent_Response.
         * @implements ICCloud_AppLaunchIntent_Response
         * @constructor
         * @param {ICCloud_AppLaunchIntent_Response=} [properties] Properties to set
         */
        function CCloud_AppLaunchIntent_Response(properties) {
            this.pending_remote_operations = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CCloud_AppLaunchIntent_Response pending_remote_operations.
         * @member {Array.<ICCloud_PendingRemoteOperation>} pending_remote_operations
         * @memberof CCloud_AppLaunchIntent_Response
         * @instance
         */
        CCloud_AppLaunchIntent_Response.prototype.pending_remote_operations = $util.emptyArray;
    
        /**
         * Creates a new CCloud_AppLaunchIntent_Response instance using the specified properties.
         * @function create
         * @memberof CCloud_AppLaunchIntent_Response
         * @static
         * @param {ICCloud_AppLaunchIntent_Response=} [properties] Properties to set
         * @returns {CCloud_AppLaunchIntent_Response} CCloud_AppLaunchIntent_Response instance
         */
        CCloud_AppLaunchIntent_Response.create = function create(properties) {
            return new CCloud_AppLaunchIntent_Response(properties);
        };
    
        /**
         * Encodes the specified CCloud_AppLaunchIntent_Response message. Does not implicitly {@link CCloud_AppLaunchIntent_Response.verify|verify} messages.
         * @function encode
         * @memberof CCloud_AppLaunchIntent_Response
         * @static
         * @param {ICCloud_AppLaunchIntent_Response} message CCloud_AppLaunchIntent_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_AppLaunchIntent_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.pending_remote_operations != null && message.pending_remote_operations.length)
                for (var i = 0; i < message.pending_remote_operations.length; ++i)
                    $root.CCloud_PendingRemoteOperation.encode(message.pending_remote_operations[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CCloud_AppLaunchIntent_Response message, length delimited. Does not implicitly {@link CCloud_AppLaunchIntent_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CCloud_AppLaunchIntent_Response
         * @static
         * @param {ICCloud_AppLaunchIntent_Response} message CCloud_AppLaunchIntent_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_AppLaunchIntent_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CCloud_AppLaunchIntent_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CCloud_AppLaunchIntent_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CCloud_AppLaunchIntent_Response} CCloud_AppLaunchIntent_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_AppLaunchIntent_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CCloud_AppLaunchIntent_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.pending_remote_operations && message.pending_remote_operations.length))
                        message.pending_remote_operations = [];
                    message.pending_remote_operations.push($root.CCloud_PendingRemoteOperation.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CCloud_AppLaunchIntent_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CCloud_AppLaunchIntent_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CCloud_AppLaunchIntent_Response} CCloud_AppLaunchIntent_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_AppLaunchIntent_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CCloud_AppLaunchIntent_Response message.
         * @function verify
         * @memberof CCloud_AppLaunchIntent_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CCloud_AppLaunchIntent_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.pending_remote_operations != null && message.hasOwnProperty("pending_remote_operations")) {
                if (!Array.isArray(message.pending_remote_operations))
                    return "pending_remote_operations: array expected";
                for (var i = 0; i < message.pending_remote_operations.length; ++i) {
                    var error = $root.CCloud_PendingRemoteOperation.verify(message.pending_remote_operations[i]);
                    if (error)
                        return "pending_remote_operations." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CCloud_AppLaunchIntent_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CCloud_AppLaunchIntent_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CCloud_AppLaunchIntent_Response} CCloud_AppLaunchIntent_Response
         */
        CCloud_AppLaunchIntent_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CCloud_AppLaunchIntent_Response)
                return object;
            var message = new $root.CCloud_AppLaunchIntent_Response();
            if (object.pending_remote_operations) {
                if (!Array.isArray(object.pending_remote_operations))
                    throw TypeError(".CCloud_AppLaunchIntent_Response.pending_remote_operations: array expected");
                message.pending_remote_operations = [];
                for (var i = 0; i < object.pending_remote_operations.length; ++i) {
                    if (typeof object.pending_remote_operations[i] !== "object")
                        throw TypeError(".CCloud_AppLaunchIntent_Response.pending_remote_operations: object expected");
                    message.pending_remote_operations[i] = $root.CCloud_PendingRemoteOperation.fromObject(object.pending_remote_operations[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CCloud_AppLaunchIntent_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CCloud_AppLaunchIntent_Response
         * @static
         * @param {CCloud_AppLaunchIntent_Response} message CCloud_AppLaunchIntent_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CCloud_AppLaunchIntent_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.pending_remote_operations = [];
            if (message.pending_remote_operations && message.pending_remote_operations.length) {
                object.pending_remote_operations = [];
                for (var j = 0; j < message.pending_remote_operations.length; ++j)
                    object.pending_remote_operations[j] = $root.CCloud_PendingRemoteOperation.toObject(message.pending_remote_operations[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CCloud_AppLaunchIntent_Response to JSON.
         * @function toJSON
         * @memberof CCloud_AppLaunchIntent_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CCloud_AppLaunchIntent_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CCloud_AppLaunchIntent_Response;
    })();
    
    $root.CCloud_AppExitSyncDone_Notification = (function() {
    
        /**
         * Properties of a CCloud_AppExitSyncDone_Notification.
         * @exports ICCloud_AppExitSyncDone_Notification
         * @interface ICCloud_AppExitSyncDone_Notification
         * @property {number|null} [appid] CCloud_AppExitSyncDone_Notification appid
         * @property {number|Long|null} [client_id] CCloud_AppExitSyncDone_Notification client_id
         * @property {boolean|null} [uploads_completed] CCloud_AppExitSyncDone_Notification uploads_completed
         */
    
        /**
         * Constructs a new CCloud_AppExitSyncDone_Notification.
         * @exports CCloud_AppExitSyncDone_Notification
         * @classdesc Represents a CCloud_AppExitSyncDone_Notification.
         * @implements ICCloud_AppExitSyncDone_Notification
         * @constructor
         * @param {ICCloud_AppExitSyncDone_Notification=} [properties] Properties to set
         */
        function CCloud_AppExitSyncDone_Notification(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CCloud_AppExitSyncDone_Notification appid.
         * @member {number} appid
         * @memberof CCloud_AppExitSyncDone_Notification
         * @instance
         */
        CCloud_AppExitSyncDone_Notification.prototype.appid = 0;
    
        /**
         * CCloud_AppExitSyncDone_Notification client_id.
         * @member {number|Long} client_id
         * @memberof CCloud_AppExitSyncDone_Notification
         * @instance
         */
        CCloud_AppExitSyncDone_Notification.prototype.client_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CCloud_AppExitSyncDone_Notification uploads_completed.
         * @member {boolean} uploads_completed
         * @memberof CCloud_AppExitSyncDone_Notification
         * @instance
         */
        CCloud_AppExitSyncDone_Notification.prototype.uploads_completed = false;
    
        /**
         * Creates a new CCloud_AppExitSyncDone_Notification instance using the specified properties.
         * @function create
         * @memberof CCloud_AppExitSyncDone_Notification
         * @static
         * @param {ICCloud_AppExitSyncDone_Notification=} [properties] Properties to set
         * @returns {CCloud_AppExitSyncDone_Notification} CCloud_AppExitSyncDone_Notification instance
         */
        CCloud_AppExitSyncDone_Notification.create = function create(properties) {
            return new CCloud_AppExitSyncDone_Notification(properties);
        };
    
        /**
         * Encodes the specified CCloud_AppExitSyncDone_Notification message. Does not implicitly {@link CCloud_AppExitSyncDone_Notification.verify|verify} messages.
         * @function encode
         * @memberof CCloud_AppExitSyncDone_Notification
         * @static
         * @param {ICCloud_AppExitSyncDone_Notification} message CCloud_AppExitSyncDone_Notification message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_AppExitSyncDone_Notification.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.appid != null && message.hasOwnProperty("appid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.appid);
            if (message.client_id != null && message.hasOwnProperty("client_id"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.client_id);
            if (message.uploads_completed != null && message.hasOwnProperty("uploads_completed"))
                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.uploads_completed);
            return writer;
        };
    
        /**
         * Encodes the specified CCloud_AppExitSyncDone_Notification message, length delimited. Does not implicitly {@link CCloud_AppExitSyncDone_Notification.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CCloud_AppExitSyncDone_Notification
         * @static
         * @param {ICCloud_AppExitSyncDone_Notification} message CCloud_AppExitSyncDone_Notification message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_AppExitSyncDone_Notification.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CCloud_AppExitSyncDone_Notification message from the specified reader or buffer.
         * @function decode
         * @memberof CCloud_AppExitSyncDone_Notification
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CCloud_AppExitSyncDone_Notification} CCloud_AppExitSyncDone_Notification
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_AppExitSyncDone_Notification.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CCloud_AppExitSyncDone_Notification();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.appid = reader.uint32();
                    break;
                case 2:
                    message.client_id = reader.uint64();
                    break;
                case 3:
                    message.uploads_completed = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CCloud_AppExitSyncDone_Notification message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CCloud_AppExitSyncDone_Notification
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CCloud_AppExitSyncDone_Notification} CCloud_AppExitSyncDone_Notification
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_AppExitSyncDone_Notification.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CCloud_AppExitSyncDone_Notification message.
         * @function verify
         * @memberof CCloud_AppExitSyncDone_Notification
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CCloud_AppExitSyncDone_Notification.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.appid != null && message.hasOwnProperty("appid"))
                if (!$util.isInteger(message.appid))
                    return "appid: integer expected";
            if (message.client_id != null && message.hasOwnProperty("client_id"))
                if (!$util.isInteger(message.client_id) && !(message.client_id && $util.isInteger(message.client_id.low) && $util.isInteger(message.client_id.high)))
                    return "client_id: integer|Long expected";
            if (message.uploads_completed != null && message.hasOwnProperty("uploads_completed"))
                if (typeof message.uploads_completed !== "boolean")
                    return "uploads_completed: boolean expected";
            return null;
        };
    
        /**
         * Creates a CCloud_AppExitSyncDone_Notification message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CCloud_AppExitSyncDone_Notification
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CCloud_AppExitSyncDone_Notification} CCloud_AppExitSyncDone_Notification
         */
        CCloud_AppExitSyncDone_Notification.fromObject = function fromObject(object) {
            if (object instanceof $root.CCloud_AppExitSyncDone_Notification)
                return object;
            var message = new $root.CCloud_AppExitSyncDone_Notification();
            if (object.appid != null)
                message.appid = object.appid >>> 0;
            if (object.client_id != null)
                if ($util.Long)
                    (message.client_id = $util.Long.fromValue(object.client_id)).unsigned = true;
                else if (typeof object.client_id === "string")
                    message.client_id = parseInt(object.client_id, 10);
                else if (typeof object.client_id === "number")
                    message.client_id = object.client_id;
                else if (typeof object.client_id === "object")
                    message.client_id = new $util.LongBits(object.client_id.low >>> 0, object.client_id.high >>> 0).toNumber(true);
            if (object.uploads_completed != null)
                message.uploads_completed = Boolean(object.uploads_completed);
            return message;
        };
    
        /**
         * Creates a plain object from a CCloud_AppExitSyncDone_Notification message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CCloud_AppExitSyncDone_Notification
         * @static
         * @param {CCloud_AppExitSyncDone_Notification} message CCloud_AppExitSyncDone_Notification
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CCloud_AppExitSyncDone_Notification.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.appid = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.client_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.client_id = options.longs === String ? "0" : 0;
                object.uploads_completed = false;
            }
            if (message.appid != null && message.hasOwnProperty("appid"))
                object.appid = message.appid;
            if (message.client_id != null && message.hasOwnProperty("client_id"))
                if (typeof message.client_id === "number")
                    object.client_id = options.longs === String ? String(message.client_id) : message.client_id;
                else
                    object.client_id = options.longs === String ? $util.Long.prototype.toString.call(message.client_id) : options.longs === Number ? new $util.LongBits(message.client_id.low >>> 0, message.client_id.high >>> 0).toNumber(true) : message.client_id;
            if (message.uploads_completed != null && message.hasOwnProperty("uploads_completed"))
                object.uploads_completed = message.uploads_completed;
            return object;
        };
    
        /**
         * Converts this CCloud_AppExitSyncDone_Notification to JSON.
         * @function toJSON
         * @memberof CCloud_AppExitSyncDone_Notification
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CCloud_AppExitSyncDone_Notification.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CCloud_AppExitSyncDone_Notification;
    })();
    
    $root.CCloud_AppCloudStateChange_Notification = (function() {
    
        /**
         * Properties of a CCloud_AppCloudStateChange_Notification.
         * @exports ICCloud_AppCloudStateChange_Notification
         * @interface ICCloud_AppCloudStateChange_Notification
         * @property {number|null} [appid] CCloud_AppCloudStateChange_Notification appid
         * @property {number|Long|null} [app_change_number] CCloud_AppCloudStateChange_Notification app_change_number
         */
    
        /**
         * Constructs a new CCloud_AppCloudStateChange_Notification.
         * @exports CCloud_AppCloudStateChange_Notification
         * @classdesc Represents a CCloud_AppCloudStateChange_Notification.
         * @implements ICCloud_AppCloudStateChange_Notification
         * @constructor
         * @param {ICCloud_AppCloudStateChange_Notification=} [properties] Properties to set
         */
        function CCloud_AppCloudStateChange_Notification(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CCloud_AppCloudStateChange_Notification appid.
         * @member {number} appid
         * @memberof CCloud_AppCloudStateChange_Notification
         * @instance
         */
        CCloud_AppCloudStateChange_Notification.prototype.appid = 0;
    
        /**
         * CCloud_AppCloudStateChange_Notification app_change_number.
         * @member {number|Long} app_change_number
         * @memberof CCloud_AppCloudStateChange_Notification
         * @instance
         */
        CCloud_AppCloudStateChange_Notification.prototype.app_change_number = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * Creates a new CCloud_AppCloudStateChange_Notification instance using the specified properties.
         * @function create
         * @memberof CCloud_AppCloudStateChange_Notification
         * @static
         * @param {ICCloud_AppCloudStateChange_Notification=} [properties] Properties to set
         * @returns {CCloud_AppCloudStateChange_Notification} CCloud_AppCloudStateChange_Notification instance
         */
        CCloud_AppCloudStateChange_Notification.create = function create(properties) {
            return new CCloud_AppCloudStateChange_Notification(properties);
        };
    
        /**
         * Encodes the specified CCloud_AppCloudStateChange_Notification message. Does not implicitly {@link CCloud_AppCloudStateChange_Notification.verify|verify} messages.
         * @function encode
         * @memberof CCloud_AppCloudStateChange_Notification
         * @static
         * @param {ICCloud_AppCloudStateChange_Notification} message CCloud_AppCloudStateChange_Notification message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_AppCloudStateChange_Notification.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.appid != null && message.hasOwnProperty("appid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.appid);
            if (message.app_change_number != null && message.hasOwnProperty("app_change_number"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.app_change_number);
            return writer;
        };
    
        /**
         * Encodes the specified CCloud_AppCloudStateChange_Notification message, length delimited. Does not implicitly {@link CCloud_AppCloudStateChange_Notification.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CCloud_AppCloudStateChange_Notification
         * @static
         * @param {ICCloud_AppCloudStateChange_Notification} message CCloud_AppCloudStateChange_Notification message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_AppCloudStateChange_Notification.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CCloud_AppCloudStateChange_Notification message from the specified reader or buffer.
         * @function decode
         * @memberof CCloud_AppCloudStateChange_Notification
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CCloud_AppCloudStateChange_Notification} CCloud_AppCloudStateChange_Notification
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_AppCloudStateChange_Notification.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CCloud_AppCloudStateChange_Notification();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.appid = reader.uint32();
                    break;
                case 2:
                    message.app_change_number = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CCloud_AppCloudStateChange_Notification message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CCloud_AppCloudStateChange_Notification
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CCloud_AppCloudStateChange_Notification} CCloud_AppCloudStateChange_Notification
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_AppCloudStateChange_Notification.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CCloud_AppCloudStateChange_Notification message.
         * @function verify
         * @memberof CCloud_AppCloudStateChange_Notification
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CCloud_AppCloudStateChange_Notification.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.appid != null && message.hasOwnProperty("appid"))
                if (!$util.isInteger(message.appid))
                    return "appid: integer expected";
            if (message.app_change_number != null && message.hasOwnProperty("app_change_number"))
                if (!$util.isInteger(message.app_change_number) && !(message.app_change_number && $util.isInteger(message.app_change_number.low) && $util.isInteger(message.app_change_number.high)))
                    return "app_change_number: integer|Long expected";
            return null;
        };
    
        /**
         * Creates a CCloud_AppCloudStateChange_Notification message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CCloud_AppCloudStateChange_Notification
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CCloud_AppCloudStateChange_Notification} CCloud_AppCloudStateChange_Notification
         */
        CCloud_AppCloudStateChange_Notification.fromObject = function fromObject(object) {
            if (object instanceof $root.CCloud_AppCloudStateChange_Notification)
                return object;
            var message = new $root.CCloud_AppCloudStateChange_Notification();
            if (object.appid != null)
                message.appid = object.appid >>> 0;
            if (object.app_change_number != null)
                if ($util.Long)
                    (message.app_change_number = $util.Long.fromValue(object.app_change_number)).unsigned = true;
                else if (typeof object.app_change_number === "string")
                    message.app_change_number = parseInt(object.app_change_number, 10);
                else if (typeof object.app_change_number === "number")
                    message.app_change_number = object.app_change_number;
                else if (typeof object.app_change_number === "object")
                    message.app_change_number = new $util.LongBits(object.app_change_number.low >>> 0, object.app_change_number.high >>> 0).toNumber(true);
            return message;
        };
    
        /**
         * Creates a plain object from a CCloud_AppCloudStateChange_Notification message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CCloud_AppCloudStateChange_Notification
         * @static
         * @param {CCloud_AppCloudStateChange_Notification} message CCloud_AppCloudStateChange_Notification
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CCloud_AppCloudStateChange_Notification.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.appid = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.app_change_number = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.app_change_number = options.longs === String ? "0" : 0;
            }
            if (message.appid != null && message.hasOwnProperty("appid"))
                object.appid = message.appid;
            if (message.app_change_number != null && message.hasOwnProperty("app_change_number"))
                if (typeof message.app_change_number === "number")
                    object.app_change_number = options.longs === String ? String(message.app_change_number) : message.app_change_number;
                else
                    object.app_change_number = options.longs === String ? $util.Long.prototype.toString.call(message.app_change_number) : options.longs === Number ? new $util.LongBits(message.app_change_number.low >>> 0, message.app_change_number.high >>> 0).toNumber(true) : message.app_change_number;
            return object;
        };
    
        /**
         * Converts this CCloud_AppCloudStateChange_Notification to JSON.
         * @function toJSON
         * @memberof CCloud_AppCloudStateChange_Notification
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CCloud_AppCloudStateChange_Notification.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CCloud_AppCloudStateChange_Notification;
    })();
    
    $root.Cloud = (function() {
    
        /**
         * Constructs a new Cloud service.
         * @exports Cloud
         * @classdesc Represents a Cloud
         * @extends $protobuf.rpc.Service
         * @constructor
         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
         */
        function Cloud(rpcImpl, requestDelimited, responseDelimited) {
            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
        }
    
        (Cloud.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Cloud;
    
        /**
         * Creates new Cloud service using the specified rpc implementation.
         * @function create
         * @memberof Cloud
         * @static
         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
         * @returns {Cloud} RPC service. Useful where requests and/or responses are streamed.
         */
        Cloud.create = function create(rpcImpl, requestDelimited, responseDelimited) {
            return new this(rpcImpl, requestDelimited, responseDelimited);
        };
    
        /**
         * Callback as used by {@link Cloud#getUploadServerInfo}.
         * @memberof Cloud
         * @typedef GetUploadServerInfoCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CCloud_GetUploadServerInfo_Response} [response] CCloud_GetUploadServerInfo_Response
         */
    
        /**
         * Calls GetUploadServerInfo.
         * @function getUploadServerInfo
         * @memberof Cloud
         * @instance
         * @param {ICCloud_GetUploadServerInfo_Request} request CCloud_GetUploadServerInfo_Request message or plain object
         * @param {Cloud.GetUploadServerInfoCallback} callback Node-style callback called with the error, if any, and CCloud_GetUploadServerInfo_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(Cloud.prototype.getUploadServerInfo = function getUploadServerInfo(request, callback) {
            return this.rpcCall(getUploadServerInfo, $root.CCloud_GetUploadServerInfo_Request, $root.CCloud_GetUploadServerInfo_Response, request, callback);
        }, "name", { value: "GetUploadServerInfo" });
    
        /**
         * Calls GetUploadServerInfo.
         * @function getUploadServerInfo
         * @memberof Cloud
         * @instance
         * @param {ICCloud_GetUploadServerInfo_Request} request CCloud_GetUploadServerInfo_Request message or plain object
         * @returns {Promise<CCloud_GetUploadServerInfo_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link Cloud#beginHTTPUpload}.
         * @memberof Cloud
         * @typedef BeginHTTPUploadCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CCloud_BeginHTTPUpload_Response} [response] CCloud_BeginHTTPUpload_Response
         */
    
        /**
         * Calls BeginHTTPUpload.
         * @function beginHTTPUpload
         * @memberof Cloud
         * @instance
         * @param {ICCloud_BeginHTTPUpload_Request} request CCloud_BeginHTTPUpload_Request message or plain object
         * @param {Cloud.BeginHTTPUploadCallback} callback Node-style callback called with the error, if any, and CCloud_BeginHTTPUpload_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(Cloud.prototype.beginHTTPUpload = function beginHTTPUpload(request, callback) {
            return this.rpcCall(beginHTTPUpload, $root.CCloud_BeginHTTPUpload_Request, $root.CCloud_BeginHTTPUpload_Response, request, callback);
        }, "name", { value: "BeginHTTPUpload" });
    
        /**
         * Calls BeginHTTPUpload.
         * @function beginHTTPUpload
         * @memberof Cloud
         * @instance
         * @param {ICCloud_BeginHTTPUpload_Request} request CCloud_BeginHTTPUpload_Request message or plain object
         * @returns {Promise<CCloud_BeginHTTPUpload_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link Cloud#commitHTTPUpload}.
         * @memberof Cloud
         * @typedef CommitHTTPUploadCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CCloud_CommitHTTPUpload_Response} [response] CCloud_CommitHTTPUpload_Response
         */
    
        /**
         * Calls CommitHTTPUpload.
         * @function commitHTTPUpload
         * @memberof Cloud
         * @instance
         * @param {ICCloud_CommitHTTPUpload_Request} request CCloud_CommitHTTPUpload_Request message or plain object
         * @param {Cloud.CommitHTTPUploadCallback} callback Node-style callback called with the error, if any, and CCloud_CommitHTTPUpload_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(Cloud.prototype.commitHTTPUpload = function commitHTTPUpload(request, callback) {
            return this.rpcCall(commitHTTPUpload, $root.CCloud_CommitHTTPUpload_Request, $root.CCloud_CommitHTTPUpload_Response, request, callback);
        }, "name", { value: "CommitHTTPUpload" });
    
        /**
         * Calls CommitHTTPUpload.
         * @function commitHTTPUpload
         * @memberof Cloud
         * @instance
         * @param {ICCloud_CommitHTTPUpload_Request} request CCloud_CommitHTTPUpload_Request message or plain object
         * @returns {Promise<CCloud_CommitHTTPUpload_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link Cloud#beginUGCUpload}.
         * @memberof Cloud
         * @typedef BeginUGCUploadCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CCloud_BeginUGCUpload_Response} [response] CCloud_BeginUGCUpload_Response
         */
    
        /**
         * Calls BeginUGCUpload.
         * @function beginUGCUpload
         * @memberof Cloud
         * @instance
         * @param {ICCloud_BeginUGCUpload_Request} request CCloud_BeginUGCUpload_Request message or plain object
         * @param {Cloud.BeginUGCUploadCallback} callback Node-style callback called with the error, if any, and CCloud_BeginUGCUpload_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(Cloud.prototype.beginUGCUpload = function beginUGCUpload(request, callback) {
            return this.rpcCall(beginUGCUpload, $root.CCloud_BeginUGCUpload_Request, $root.CCloud_BeginUGCUpload_Response, request, callback);
        }, "name", { value: "BeginUGCUpload" });
    
        /**
         * Calls BeginUGCUpload.
         * @function beginUGCUpload
         * @memberof Cloud
         * @instance
         * @param {ICCloud_BeginUGCUpload_Request} request CCloud_BeginUGCUpload_Request message or plain object
         * @returns {Promise<CCloud_BeginUGCUpload_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link Cloud#commitUGCUpload}.
         * @memberof Cloud
         * @typedef CommitUGCUploadCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CCloud_CommitUGCUpload_Response} [response] CCloud_CommitUGCUpload_Response
         */
    
        /**
         * Calls CommitUGCUpload.
         * @function commitUGCUpload
         * @memberof Cloud
         * @instance
         * @param {ICCloud_CommitUGCUpload_Request} request CCloud_CommitUGCUpload_Request message or plain object
         * @param {Cloud.CommitUGCUploadCallback} callback Node-style callback called with the error, if any, and CCloud_CommitUGCUpload_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(Cloud.prototype.commitUGCUpload = function commitUGCUpload(request, callback) {
            return this.rpcCall(commitUGCUpload, $root.CCloud_CommitUGCUpload_Request, $root.CCloud_CommitUGCUpload_Response, request, callback);
        }, "name", { value: "CommitUGCUpload" });
    
        /**
         * Calls CommitUGCUpload.
         * @function commitUGCUpload
         * @memberof Cloud
         * @instance
         * @param {ICCloud_CommitUGCUpload_Request} request CCloud_CommitUGCUpload_Request message or plain object
         * @returns {Promise<CCloud_CommitUGCUpload_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link Cloud#getFileDetails}.
         * @memberof Cloud
         * @typedef GetFileDetailsCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CCloud_GetFileDetails_Response} [response] CCloud_GetFileDetails_Response
         */
    
        /**
         * Calls GetFileDetails.
         * @function getFileDetails
         * @memberof Cloud
         * @instance
         * @param {ICCloud_GetFileDetails_Request} request CCloud_GetFileDetails_Request message or plain object
         * @param {Cloud.GetFileDetailsCallback} callback Node-style callback called with the error, if any, and CCloud_GetFileDetails_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(Cloud.prototype.getFileDetails = function getFileDetails(request, callback) {
            return this.rpcCall(getFileDetails, $root.CCloud_GetFileDetails_Request, $root.CCloud_GetFileDetails_Response, request, callback);
        }, "name", { value: "GetFileDetails" });
    
        /**
         * Calls GetFileDetails.
         * @function getFileDetails
         * @memberof Cloud
         * @instance
         * @param {ICCloud_GetFileDetails_Request} request CCloud_GetFileDetails_Request message or plain object
         * @returns {Promise<CCloud_GetFileDetails_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link Cloud#enumerateUserFiles}.
         * @memberof Cloud
         * @typedef EnumerateUserFilesCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CCloud_EnumerateUserFiles_Response} [response] CCloud_EnumerateUserFiles_Response
         */
    
        /**
         * Calls EnumerateUserFiles.
         * @function enumerateUserFiles
         * @memberof Cloud
         * @instance
         * @param {ICCloud_EnumerateUserFiles_Request} request CCloud_EnumerateUserFiles_Request message or plain object
         * @param {Cloud.EnumerateUserFilesCallback} callback Node-style callback called with the error, if any, and CCloud_EnumerateUserFiles_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(Cloud.prototype.enumerateUserFiles = function enumerateUserFiles(request, callback) {
            return this.rpcCall(enumerateUserFiles, $root.CCloud_EnumerateUserFiles_Request, $root.CCloud_EnumerateUserFiles_Response, request, callback);
        }, "name", { value: "EnumerateUserFiles" });
    
        /**
         * Calls EnumerateUserFiles.
         * @function enumerateUserFiles
         * @memberof Cloud
         * @instance
         * @param {ICCloud_EnumerateUserFiles_Request} request CCloud_EnumerateUserFiles_Request message or plain object
         * @returns {Promise<CCloud_EnumerateUserFiles_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link Cloud#delete_}.
         * @memberof Cloud
         * @typedef DeleteCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CCloud_Delete_Response} [response] CCloud_Delete_Response
         */
    
        /**
         * Calls Delete.
         * @function delete
         * @memberof Cloud
         * @instance
         * @param {ICCloud_Delete_Request} request CCloud_Delete_Request message or plain object
         * @param {Cloud.DeleteCallback} callback Node-style callback called with the error, if any, and CCloud_Delete_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(Cloud.prototype["delete"] = function delete_(request, callback) {
            return this.rpcCall(delete_, $root.CCloud_Delete_Request, $root.CCloud_Delete_Response, request, callback);
        }, "name", { value: "Delete" });
    
        /**
         * Calls Delete.
         * @function delete
         * @memberof Cloud
         * @instance
         * @param {ICCloud_Delete_Request} request CCloud_Delete_Request message or plain object
         * @returns {Promise<CCloud_Delete_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link Cloud#getClientEncryptionKey}.
         * @memberof Cloud
         * @typedef GetClientEncryptionKeyCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CCloud_GetClientEncryptionKey_Response} [response] CCloud_GetClientEncryptionKey_Response
         */
    
        /**
         * Calls GetClientEncryptionKey.
         * @function getClientEncryptionKey
         * @memberof Cloud
         * @instance
         * @param {ICCloud_GetClientEncryptionKey_Request} request CCloud_GetClientEncryptionKey_Request message or plain object
         * @param {Cloud.GetClientEncryptionKeyCallback} callback Node-style callback called with the error, if any, and CCloud_GetClientEncryptionKey_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(Cloud.prototype.getClientEncryptionKey = function getClientEncryptionKey(request, callback) {
            return this.rpcCall(getClientEncryptionKey, $root.CCloud_GetClientEncryptionKey_Request, $root.CCloud_GetClientEncryptionKey_Response, request, callback);
        }, "name", { value: "GetClientEncryptionKey" });
    
        /**
         * Calls GetClientEncryptionKey.
         * @function getClientEncryptionKey
         * @memberof Cloud
         * @instance
         * @param {ICCloud_GetClientEncryptionKey_Request} request CCloud_GetClientEncryptionKey_Request message or plain object
         * @returns {Promise<CCloud_GetClientEncryptionKey_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link Cloud#cDNReport}.
         * @memberof Cloud
         * @typedef CDNReportCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {NoResponse} [response] NoResponse
         */
    
        /**
         * Calls CDNReport.
         * @function cDNReport
         * @memberof Cloud
         * @instance
         * @param {ICCloud_CDNReport_Notification} request CCloud_CDNReport_Notification message or plain object
         * @param {Cloud.CDNReportCallback} callback Node-style callback called with the error, if any, and NoResponse
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(Cloud.prototype.cDNReport = function cDNReport(request, callback) {
            return this.rpcCall(cDNReport, $root.CCloud_CDNReport_Notification, $root.NoResponse, request, callback);
        }, "name", { value: "CDNReport" });
    
        /**
         * Calls CDNReport.
         * @function cDNReport
         * @memberof Cloud
         * @instance
         * @param {ICCloud_CDNReport_Notification} request CCloud_CDNReport_Notification message or plain object
         * @returns {Promise<NoResponse>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link Cloud#externalStorageTransferReport}.
         * @memberof Cloud
         * @typedef ExternalStorageTransferReportCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {NoResponse} [response] NoResponse
         */
    
        /**
         * Calls ExternalStorageTransferReport.
         * @function externalStorageTransferReport
         * @memberof Cloud
         * @instance
         * @param {ICCloud_ExternalStorageTransferReport_Notification} request CCloud_ExternalStorageTransferReport_Notification message or plain object
         * @param {Cloud.ExternalStorageTransferReportCallback} callback Node-style callback called with the error, if any, and NoResponse
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(Cloud.prototype.externalStorageTransferReport = function externalStorageTransferReport(request, callback) {
            return this.rpcCall(externalStorageTransferReport, $root.CCloud_ExternalStorageTransferReport_Notification, $root.NoResponse, request, callback);
        }, "name", { value: "ExternalStorageTransferReport" });
    
        /**
         * Calls ExternalStorageTransferReport.
         * @function externalStorageTransferReport
         * @memberof Cloud
         * @instance
         * @param {ICCloud_ExternalStorageTransferReport_Notification} request CCloud_ExternalStorageTransferReport_Notification message or plain object
         * @returns {Promise<NoResponse>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link Cloud#beginAppUploadBatch}.
         * @memberof Cloud
         * @typedef BeginAppUploadBatchCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CCloud_BeginAppUploadBatch_Response} [response] CCloud_BeginAppUploadBatch_Response
         */
    
        /**
         * Calls BeginAppUploadBatch.
         * @function beginAppUploadBatch
         * @memberof Cloud
         * @instance
         * @param {ICCloud_BeginAppUploadBatch_Request} request CCloud_BeginAppUploadBatch_Request message or plain object
         * @param {Cloud.BeginAppUploadBatchCallback} callback Node-style callback called with the error, if any, and CCloud_BeginAppUploadBatch_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(Cloud.prototype.beginAppUploadBatch = function beginAppUploadBatch(request, callback) {
            return this.rpcCall(beginAppUploadBatch, $root.CCloud_BeginAppUploadBatch_Request, $root.CCloud_BeginAppUploadBatch_Response, request, callback);
        }, "name", { value: "BeginAppUploadBatch" });
    
        /**
         * Calls BeginAppUploadBatch.
         * @function beginAppUploadBatch
         * @memberof Cloud
         * @instance
         * @param {ICCloud_BeginAppUploadBatch_Request} request CCloud_BeginAppUploadBatch_Request message or plain object
         * @returns {Promise<CCloud_BeginAppUploadBatch_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link Cloud#completeAppUploadBatch}.
         * @memberof Cloud
         * @typedef CompleteAppUploadBatchCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {NoResponse} [response] NoResponse
         */
    
        /**
         * Calls CompleteAppUploadBatch.
         * @function completeAppUploadBatch
         * @memberof Cloud
         * @instance
         * @param {ICCloud_CompleteAppUploadBatch_Notification} request CCloud_CompleteAppUploadBatch_Notification message or plain object
         * @param {Cloud.CompleteAppUploadBatchCallback} callback Node-style callback called with the error, if any, and NoResponse
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(Cloud.prototype.completeAppUploadBatch = function completeAppUploadBatch(request, callback) {
            return this.rpcCall(completeAppUploadBatch, $root.CCloud_CompleteAppUploadBatch_Notification, $root.NoResponse, request, callback);
        }, "name", { value: "CompleteAppUploadBatch" });
    
        /**
         * Calls CompleteAppUploadBatch.
         * @function completeAppUploadBatch
         * @memberof Cloud
         * @instance
         * @param {ICCloud_CompleteAppUploadBatch_Notification} request CCloud_CompleteAppUploadBatch_Notification message or plain object
         * @returns {Promise<NoResponse>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link Cloud#completeAppUploadBatchBlocking}.
         * @memberof Cloud
         * @typedef CompleteAppUploadBatchBlockingCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CCloud_CompleteAppUploadBatch_Response} [response] CCloud_CompleteAppUploadBatch_Response
         */
    
        /**
         * Calls CompleteAppUploadBatchBlocking.
         * @function completeAppUploadBatchBlocking
         * @memberof Cloud
         * @instance
         * @param {ICCloud_CompleteAppUploadBatch_Request} request CCloud_CompleteAppUploadBatch_Request message or plain object
         * @param {Cloud.CompleteAppUploadBatchBlockingCallback} callback Node-style callback called with the error, if any, and CCloud_CompleteAppUploadBatch_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(Cloud.prototype.completeAppUploadBatchBlocking = function completeAppUploadBatchBlocking(request, callback) {
            return this.rpcCall(completeAppUploadBatchBlocking, $root.CCloud_CompleteAppUploadBatch_Request, $root.CCloud_CompleteAppUploadBatch_Response, request, callback);
        }, "name", { value: "CompleteAppUploadBatchBlocking" });
    
        /**
         * Calls CompleteAppUploadBatchBlocking.
         * @function completeAppUploadBatchBlocking
         * @memberof Cloud
         * @instance
         * @param {ICCloud_CompleteAppUploadBatch_Request} request CCloud_CompleteAppUploadBatch_Request message or plain object
         * @returns {Promise<CCloud_CompleteAppUploadBatch_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link Cloud#clientBeginFileUpload}.
         * @memberof Cloud
         * @typedef ClientBeginFileUploadCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CCloud_ClientBeginFileUpload_Response} [response] CCloud_ClientBeginFileUpload_Response
         */
    
        /**
         * Calls ClientBeginFileUpload.
         * @function clientBeginFileUpload
         * @memberof Cloud
         * @instance
         * @param {ICCloud_ClientBeginFileUpload_Request} request CCloud_ClientBeginFileUpload_Request message or plain object
         * @param {Cloud.ClientBeginFileUploadCallback} callback Node-style callback called with the error, if any, and CCloud_ClientBeginFileUpload_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(Cloud.prototype.clientBeginFileUpload = function clientBeginFileUpload(request, callback) {
            return this.rpcCall(clientBeginFileUpload, $root.CCloud_ClientBeginFileUpload_Request, $root.CCloud_ClientBeginFileUpload_Response, request, callback);
        }, "name", { value: "ClientBeginFileUpload" });
    
        /**
         * Calls ClientBeginFileUpload.
         * @function clientBeginFileUpload
         * @memberof Cloud
         * @instance
         * @param {ICCloud_ClientBeginFileUpload_Request} request CCloud_ClientBeginFileUpload_Request message or plain object
         * @returns {Promise<CCloud_ClientBeginFileUpload_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link Cloud#clientCommitFileUpload}.
         * @memberof Cloud
         * @typedef ClientCommitFileUploadCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CCloud_ClientCommitFileUpload_Response} [response] CCloud_ClientCommitFileUpload_Response
         */
    
        /**
         * Calls ClientCommitFileUpload.
         * @function clientCommitFileUpload
         * @memberof Cloud
         * @instance
         * @param {ICCloud_ClientCommitFileUpload_Request} request CCloud_ClientCommitFileUpload_Request message or plain object
         * @param {Cloud.ClientCommitFileUploadCallback} callback Node-style callback called with the error, if any, and CCloud_ClientCommitFileUpload_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(Cloud.prototype.clientCommitFileUpload = function clientCommitFileUpload(request, callback) {
            return this.rpcCall(clientCommitFileUpload, $root.CCloud_ClientCommitFileUpload_Request, $root.CCloud_ClientCommitFileUpload_Response, request, callback);
        }, "name", { value: "ClientCommitFileUpload" });
    
        /**
         * Calls ClientCommitFileUpload.
         * @function clientCommitFileUpload
         * @memberof Cloud
         * @instance
         * @param {ICCloud_ClientCommitFileUpload_Request} request CCloud_ClientCommitFileUpload_Request message or plain object
         * @returns {Promise<CCloud_ClientCommitFileUpload_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link Cloud#clientFileDownload}.
         * @memberof Cloud
         * @typedef ClientFileDownloadCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CCloud_ClientFileDownload_Response} [response] CCloud_ClientFileDownload_Response
         */
    
        /**
         * Calls ClientFileDownload.
         * @function clientFileDownload
         * @memberof Cloud
         * @instance
         * @param {ICCloud_ClientFileDownload_Request} request CCloud_ClientFileDownload_Request message or plain object
         * @param {Cloud.ClientFileDownloadCallback} callback Node-style callback called with the error, if any, and CCloud_ClientFileDownload_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(Cloud.prototype.clientFileDownload = function clientFileDownload(request, callback) {
            return this.rpcCall(clientFileDownload, $root.CCloud_ClientFileDownload_Request, $root.CCloud_ClientFileDownload_Response, request, callback);
        }, "name", { value: "ClientFileDownload" });
    
        /**
         * Calls ClientFileDownload.
         * @function clientFileDownload
         * @memberof Cloud
         * @instance
         * @param {ICCloud_ClientFileDownload_Request} request CCloud_ClientFileDownload_Request message or plain object
         * @returns {Promise<CCloud_ClientFileDownload_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link Cloud#clientDeleteFile}.
         * @memberof Cloud
         * @typedef ClientDeleteFileCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CCloud_ClientDeleteFile_Response} [response] CCloud_ClientDeleteFile_Response
         */
    
        /**
         * Calls ClientDeleteFile.
         * @function clientDeleteFile
         * @memberof Cloud
         * @instance
         * @param {ICCloud_ClientDeleteFile_Request} request CCloud_ClientDeleteFile_Request message or plain object
         * @param {Cloud.ClientDeleteFileCallback} callback Node-style callback called with the error, if any, and CCloud_ClientDeleteFile_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(Cloud.prototype.clientDeleteFile = function clientDeleteFile(request, callback) {
            return this.rpcCall(clientDeleteFile, $root.CCloud_ClientDeleteFile_Request, $root.CCloud_ClientDeleteFile_Response, request, callback);
        }, "name", { value: "ClientDeleteFile" });
    
        /**
         * Calls ClientDeleteFile.
         * @function clientDeleteFile
         * @memberof Cloud
         * @instance
         * @param {ICCloud_ClientDeleteFile_Request} request CCloud_ClientDeleteFile_Request message or plain object
         * @returns {Promise<CCloud_ClientDeleteFile_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link Cloud#clientConflictResolution}.
         * @memberof Cloud
         * @typedef ClientConflictResolutionCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {NoResponse} [response] NoResponse
         */
    
        /**
         * Calls ClientConflictResolution.
         * @function clientConflictResolution
         * @memberof Cloud
         * @instance
         * @param {ICCloud_ClientConflictResolution_Notification} request CCloud_ClientConflictResolution_Notification message or plain object
         * @param {Cloud.ClientConflictResolutionCallback} callback Node-style callback called with the error, if any, and NoResponse
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(Cloud.prototype.clientConflictResolution = function clientConflictResolution(request, callback) {
            return this.rpcCall(clientConflictResolution, $root.CCloud_ClientConflictResolution_Notification, $root.NoResponse, request, callback);
        }, "name", { value: "ClientConflictResolution" });
    
        /**
         * Calls ClientConflictResolution.
         * @function clientConflictResolution
         * @memberof Cloud
         * @instance
         * @param {ICCloud_ClientConflictResolution_Notification} request CCloud_ClientConflictResolution_Notification message or plain object
         * @returns {Promise<NoResponse>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link Cloud#enumerateUserApps}.
         * @memberof Cloud
         * @typedef EnumerateUserAppsCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CCloud_EnumerateUserApps_Response} [response] CCloud_EnumerateUserApps_Response
         */
    
        /**
         * Calls EnumerateUserApps.
         * @function enumerateUserApps
         * @memberof Cloud
         * @instance
         * @param {ICCloud_EnumerateUserApps_Request} request CCloud_EnumerateUserApps_Request message or plain object
         * @param {Cloud.EnumerateUserAppsCallback} callback Node-style callback called with the error, if any, and CCloud_EnumerateUserApps_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(Cloud.prototype.enumerateUserApps = function enumerateUserApps(request, callback) {
            return this.rpcCall(enumerateUserApps, $root.CCloud_EnumerateUserApps_Request, $root.CCloud_EnumerateUserApps_Response, request, callback);
        }, "name", { value: "EnumerateUserApps" });
    
        /**
         * Calls EnumerateUserApps.
         * @function enumerateUserApps
         * @memberof Cloud
         * @instance
         * @param {ICCloud_EnumerateUserApps_Request} request CCloud_EnumerateUserApps_Request message or plain object
         * @returns {Promise<CCloud_EnumerateUserApps_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link Cloud#getAppFileChangelist}.
         * @memberof Cloud
         * @typedef GetAppFileChangelistCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CCloud_GetAppFileChangelist_Response} [response] CCloud_GetAppFileChangelist_Response
         */
    
        /**
         * Calls GetAppFileChangelist.
         * @function getAppFileChangelist
         * @memberof Cloud
         * @instance
         * @param {ICCloud_GetAppFileChangelist_Request} request CCloud_GetAppFileChangelist_Request message or plain object
         * @param {Cloud.GetAppFileChangelistCallback} callback Node-style callback called with the error, if any, and CCloud_GetAppFileChangelist_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(Cloud.prototype.getAppFileChangelist = function getAppFileChangelist(request, callback) {
            return this.rpcCall(getAppFileChangelist, $root.CCloud_GetAppFileChangelist_Request, $root.CCloud_GetAppFileChangelist_Response, request, callback);
        }, "name", { value: "GetAppFileChangelist" });
    
        /**
         * Calls GetAppFileChangelist.
         * @function getAppFileChangelist
         * @memberof Cloud
         * @instance
         * @param {ICCloud_GetAppFileChangelist_Request} request CCloud_GetAppFileChangelist_Request message or plain object
         * @returns {Promise<CCloud_GetAppFileChangelist_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link Cloud#suspendAppSession}.
         * @memberof Cloud
         * @typedef SuspendAppSessionCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CCloud_AppSessionSuspend_Response} [response] CCloud_AppSessionSuspend_Response
         */
    
        /**
         * Calls SuspendAppSession.
         * @function suspendAppSession
         * @memberof Cloud
         * @instance
         * @param {ICCloud_AppSessionSuspend_Request} request CCloud_AppSessionSuspend_Request message or plain object
         * @param {Cloud.SuspendAppSessionCallback} callback Node-style callback called with the error, if any, and CCloud_AppSessionSuspend_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(Cloud.prototype.suspendAppSession = function suspendAppSession(request, callback) {
            return this.rpcCall(suspendAppSession, $root.CCloud_AppSessionSuspend_Request, $root.CCloud_AppSessionSuspend_Response, request, callback);
        }, "name", { value: "SuspendAppSession" });
    
        /**
         * Calls SuspendAppSession.
         * @function suspendAppSession
         * @memberof Cloud
         * @instance
         * @param {ICCloud_AppSessionSuspend_Request} request CCloud_AppSessionSuspend_Request message or plain object
         * @returns {Promise<CCloud_AppSessionSuspend_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link Cloud#resumeAppSession}.
         * @memberof Cloud
         * @typedef ResumeAppSessionCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CCloud_AppSessionResume_Response} [response] CCloud_AppSessionResume_Response
         */
    
        /**
         * Calls ResumeAppSession.
         * @function resumeAppSession
         * @memberof Cloud
         * @instance
         * @param {ICCloud_AppSessionResume_Request} request CCloud_AppSessionResume_Request message or plain object
         * @param {Cloud.ResumeAppSessionCallback} callback Node-style callback called with the error, if any, and CCloud_AppSessionResume_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(Cloud.prototype.resumeAppSession = function resumeAppSession(request, callback) {
            return this.rpcCall(resumeAppSession, $root.CCloud_AppSessionResume_Request, $root.CCloud_AppSessionResume_Response, request, callback);
        }, "name", { value: "ResumeAppSession" });
    
        /**
         * Calls ResumeAppSession.
         * @function resumeAppSession
         * @memberof Cloud
         * @instance
         * @param {ICCloud_AppSessionResume_Request} request CCloud_AppSessionResume_Request message or plain object
         * @returns {Promise<CCloud_AppSessionResume_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link Cloud#signalAppLaunchIntent}.
         * @memberof Cloud
         * @typedef SignalAppLaunchIntentCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CCloud_AppLaunchIntent_Response} [response] CCloud_AppLaunchIntent_Response
         */
    
        /**
         * Calls SignalAppLaunchIntent.
         * @function signalAppLaunchIntent
         * @memberof Cloud
         * @instance
         * @param {ICCloud_AppLaunchIntent_Request} request CCloud_AppLaunchIntent_Request message or plain object
         * @param {Cloud.SignalAppLaunchIntentCallback} callback Node-style callback called with the error, if any, and CCloud_AppLaunchIntent_Response
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(Cloud.prototype.signalAppLaunchIntent = function signalAppLaunchIntent(request, callback) {
            return this.rpcCall(signalAppLaunchIntent, $root.CCloud_AppLaunchIntent_Request, $root.CCloud_AppLaunchIntent_Response, request, callback);
        }, "name", { value: "SignalAppLaunchIntent" });
    
        /**
         * Calls SignalAppLaunchIntent.
         * @function signalAppLaunchIntent
         * @memberof Cloud
         * @instance
         * @param {ICCloud_AppLaunchIntent_Request} request CCloud_AppLaunchIntent_Request message or plain object
         * @returns {Promise<CCloud_AppLaunchIntent_Response>} Promise
         * @variation 2
         */
    
        /**
         * Callback as used by {@link Cloud#signalAppExitSyncDone}.
         * @memberof Cloud
         * @typedef SignalAppExitSyncDoneCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {NoResponse} [response] NoResponse
         */
    
        /**
         * Calls SignalAppExitSyncDone.
         * @function signalAppExitSyncDone
         * @memberof Cloud
         * @instance
         * @param {ICCloud_AppExitSyncDone_Notification} request CCloud_AppExitSyncDone_Notification message or plain object
         * @param {Cloud.SignalAppExitSyncDoneCallback} callback Node-style callback called with the error, if any, and NoResponse
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(Cloud.prototype.signalAppExitSyncDone = function signalAppExitSyncDone(request, callback) {
            return this.rpcCall(signalAppExitSyncDone, $root.CCloud_AppExitSyncDone_Notification, $root.NoResponse, request, callback);
        }, "name", { value: "SignalAppExitSyncDone" });
    
        /**
         * Calls SignalAppExitSyncDone.
         * @function signalAppExitSyncDone
         * @memberof Cloud
         * @instance
         * @param {ICCloud_AppExitSyncDone_Notification} request CCloud_AppExitSyncDone_Notification message or plain object
         * @returns {Promise<NoResponse>} Promise
         * @variation 2
         */
    
        return Cloud;
    })();
    
    $root.CloudClient = (function() {
    
        /**
         * Constructs a new CloudClient service.
         * @exports CloudClient
         * @classdesc Represents a CloudClient
         * @extends $protobuf.rpc.Service
         * @constructor
         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
         */
        function CloudClient(rpcImpl, requestDelimited, responseDelimited) {
            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
        }
    
        (CloudClient.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = CloudClient;
    
        /**
         * Creates new CloudClient service using the specified rpc implementation.
         * @function create
         * @memberof CloudClient
         * @static
         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
         * @returns {CloudClient} RPC service. Useful where requests and/or responses are streamed.
         */
        CloudClient.create = function create(rpcImpl, requestDelimited, responseDelimited) {
            return new this(rpcImpl, requestDelimited, responseDelimited);
        };
    
        /**
         * Callback as used by {@link CloudClient#notifyAppStateChange}.
         * @memberof CloudClient
         * @typedef NotifyAppStateChangeCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {NoResponse} [response] NoResponse
         */
    
        /**
         * Calls NotifyAppStateChange.
         * @function notifyAppStateChange
         * @memberof CloudClient
         * @instance
         * @param {ICCloud_AppCloudStateChange_Notification} request CCloud_AppCloudStateChange_Notification message or plain object
         * @param {CloudClient.NotifyAppStateChangeCallback} callback Node-style callback called with the error, if any, and NoResponse
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(CloudClient.prototype.notifyAppStateChange = function notifyAppStateChange(request, callback) {
            return this.rpcCall(notifyAppStateChange, $root.CCloud_AppCloudStateChange_Notification, $root.NoResponse, request, callback);
        }, "name", { value: "NotifyAppStateChange" });
    
        /**
         * Calls NotifyAppStateChange.
         * @function notifyAppStateChange
         * @memberof CloudClient
         * @instance
         * @param {ICCloud_AppCloudStateChange_Notification} request CCloud_AppCloudStateChange_Notification message or plain object
         * @returns {Promise<NoResponse>} Promise
         * @variation 2
         */
    
        return CloudClient;
    })();
    
    /**
     * EProtoExecutionSite enum.
     * @exports EProtoExecutionSite
     * @enum {string}
     * @property {number} k_EProtoExecutionSiteUnknown=0 k_EProtoExecutionSiteUnknown value
     * @property {number} k_EProtoExecutionSiteSteamClient=2 k_EProtoExecutionSiteSteamClient value
     */
    $root.EProtoExecutionSite = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "k_EProtoExecutionSiteUnknown"] = 0;
        values[valuesById[2] = "k_EProtoExecutionSiteSteamClient"] = 2;
        return values;
    })();
    
    $root.NoResponse = (function() {
    
        /**
         * Properties of a NoResponse.
         * @exports INoResponse
         * @interface INoResponse
         */
    
        /**
         * Constructs a new NoResponse.
         * @exports NoResponse
         * @classdesc Represents a NoResponse.
         * @implements INoResponse
         * @constructor
         * @param {INoResponse=} [properties] Properties to set
         */
        function NoResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * Creates a new NoResponse instance using the specified properties.
         * @function create
         * @memberof NoResponse
         * @static
         * @param {INoResponse=} [properties] Properties to set
         * @returns {NoResponse} NoResponse instance
         */
        NoResponse.create = function create(properties) {
            return new NoResponse(properties);
        };
    
        /**
         * Encodes the specified NoResponse message. Does not implicitly {@link NoResponse.verify|verify} messages.
         * @function encode
         * @memberof NoResponse
         * @static
         * @param {INoResponse} message NoResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        NoResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };
    
        /**
         * Encodes the specified NoResponse message, length delimited. Does not implicitly {@link NoResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof NoResponse
         * @static
         * @param {INoResponse} message NoResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        NoResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a NoResponse message from the specified reader or buffer.
         * @function decode
         * @memberof NoResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {NoResponse} NoResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        NoResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.NoResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a NoResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof NoResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {NoResponse} NoResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        NoResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a NoResponse message.
         * @function verify
         * @memberof NoResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        NoResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };
    
        /**
         * Creates a NoResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof NoResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {NoResponse} NoResponse
         */
        NoResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.NoResponse)
                return object;
            return new $root.NoResponse();
        };
    
        /**
         * Creates a plain object from a NoResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof NoResponse
         * @static
         * @param {NoResponse} message NoResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        NoResponse.toObject = function toObject() {
            return {};
        };
    
        /**
         * Converts this NoResponse to JSON.
         * @function toJSON
         * @memberof NoResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        NoResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return NoResponse;
    })();
    
    $root.google = (function() {
    
        /**
         * Namespace google.
         * @exports google
         * @namespace
         */
        var google = {};
    
        google.protobuf = (function() {
    
            /**
             * Namespace protobuf.
             * @memberof google
             * @namespace
             */
            var protobuf = {};
    
            protobuf.FileDescriptorSet = (function() {
    
                /**
                 * Properties of a FileDescriptorSet.
                 * @memberof google.protobuf
                 * @interface IFileDescriptorSet
                 * @property {Array.<google.protobuf.IFileDescriptorProto>|null} [file] FileDescriptorSet file
                 */
    
                /**
                 * Constructs a new FileDescriptorSet.
                 * @memberof google.protobuf
                 * @classdesc Represents a FileDescriptorSet.
                 * @implements IFileDescriptorSet
                 * @constructor
                 * @param {google.protobuf.IFileDescriptorSet=} [properties] Properties to set
                 */
                function FileDescriptorSet(properties) {
                    this.file = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FileDescriptorSet file.
                 * @member {Array.<google.protobuf.IFileDescriptorProto>} file
                 * @memberof google.protobuf.FileDescriptorSet
                 * @instance
                 */
                FileDescriptorSet.prototype.file = $util.emptyArray;
    
                /**
                 * Creates a new FileDescriptorSet instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.IFileDescriptorSet=} [properties] Properties to set
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet instance
                 */
                FileDescriptorSet.create = function create(properties) {
                    return new FileDescriptorSet(properties);
                };
    
                /**
                 * Encodes the specified FileDescriptorSet message. Does not implicitly {@link google.protobuf.FileDescriptorSet.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.IFileDescriptorSet} message FileDescriptorSet message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorSet.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.file != null && message.file.length)
                        for (var i = 0; i < message.file.length; ++i)
                            $root.google.protobuf.FileDescriptorProto.encode(message.file[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified FileDescriptorSet message, length delimited. Does not implicitly {@link google.protobuf.FileDescriptorSet.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.IFileDescriptorSet} message FileDescriptorSet message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorSet.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FileDescriptorSet message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorSet.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileDescriptorSet();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.file && message.file.length))
                                message.file = [];
                            message.file.push($root.google.protobuf.FileDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FileDescriptorSet message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorSet.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FileDescriptorSet message.
                 * @function verify
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FileDescriptorSet.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.file != null && message.hasOwnProperty("file")) {
                        if (!Array.isArray(message.file))
                            return "file: array expected";
                        for (var i = 0; i < message.file.length; ++i) {
                            var error = $root.google.protobuf.FileDescriptorProto.verify(message.file[i]);
                            if (error)
                                return "file." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a FileDescriptorSet message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
                 */
                FileDescriptorSet.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FileDescriptorSet)
                        return object;
                    var message = new $root.google.protobuf.FileDescriptorSet();
                    if (object.file) {
                        if (!Array.isArray(object.file))
                            throw TypeError(".google.protobuf.FileDescriptorSet.file: array expected");
                        message.file = [];
                        for (var i = 0; i < object.file.length; ++i) {
                            if (typeof object.file[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorSet.file: object expected");
                            message.file[i] = $root.google.protobuf.FileDescriptorProto.fromObject(object.file[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FileDescriptorSet message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.FileDescriptorSet} message FileDescriptorSet
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FileDescriptorSet.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.file = [];
                    if (message.file && message.file.length) {
                        object.file = [];
                        for (var j = 0; j < message.file.length; ++j)
                            object.file[j] = $root.google.protobuf.FileDescriptorProto.toObject(message.file[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this FileDescriptorSet to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FileDescriptorSet
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FileDescriptorSet.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return FileDescriptorSet;
            })();
    
            protobuf.FileDescriptorProto = (function() {
    
                /**
                 * Properties of a FileDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IFileDescriptorProto
                 * @property {string|null} [name] FileDescriptorProto name
                 * @property {string|null} ["package"] FileDescriptorProto package
                 * @property {Array.<string>|null} [dependency] FileDescriptorProto dependency
                 * @property {Array.<number>|null} [public_dependency] FileDescriptorProto public_dependency
                 * @property {Array.<number>|null} [weak_dependency] FileDescriptorProto weak_dependency
                 * @property {Array.<google.protobuf.IDescriptorProto>|null} [message_type] FileDescriptorProto message_type
                 * @property {Array.<google.protobuf.IEnumDescriptorProto>|null} [enum_type] FileDescriptorProto enum_type
                 * @property {Array.<google.protobuf.IServiceDescriptorProto>|null} [service] FileDescriptorProto service
                 * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [extension] FileDescriptorProto extension
                 * @property {google.protobuf.IFileOptions|null} [options] FileDescriptorProto options
                 * @property {google.protobuf.ISourceCodeInfo|null} [source_code_info] FileDescriptorProto source_code_info
                 * @property {string|null} [syntax] FileDescriptorProto syntax
                 */
    
                /**
                 * Constructs a new FileDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a FileDescriptorProto.
                 * @implements IFileDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IFileDescriptorProto=} [properties] Properties to set
                 */
                function FileDescriptorProto(properties) {
                    this.dependency = [];
                    this.public_dependency = [];
                    this.weak_dependency = [];
                    this.message_type = [];
                    this.enum_type = [];
                    this.service = [];
                    this.extension = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FileDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.name = "";
    
                /**
                 * FileDescriptorProto package.
                 * @member {string} package
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype["package"] = "";
    
                /**
                 * FileDescriptorProto dependency.
                 * @member {Array.<string>} dependency
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.dependency = $util.emptyArray;
    
                /**
                 * FileDescriptorProto public_dependency.
                 * @member {Array.<number>} public_dependency
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.public_dependency = $util.emptyArray;
    
                /**
                 * FileDescriptorProto weak_dependency.
                 * @member {Array.<number>} weak_dependency
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.weak_dependency = $util.emptyArray;
    
                /**
                 * FileDescriptorProto message_type.
                 * @member {Array.<google.protobuf.IDescriptorProto>} message_type
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.message_type = $util.emptyArray;
    
                /**
                 * FileDescriptorProto enum_type.
                 * @member {Array.<google.protobuf.IEnumDescriptorProto>} enum_type
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.enum_type = $util.emptyArray;
    
                /**
                 * FileDescriptorProto service.
                 * @member {Array.<google.protobuf.IServiceDescriptorProto>} service
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.service = $util.emptyArray;
    
                /**
                 * FileDescriptorProto extension.
                 * @member {Array.<google.protobuf.IFieldDescriptorProto>} extension
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.extension = $util.emptyArray;
    
                /**
                 * FileDescriptorProto options.
                 * @member {google.protobuf.IFileOptions|null|undefined} options
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.options = null;
    
                /**
                 * FileDescriptorProto source_code_info.
                 * @member {google.protobuf.ISourceCodeInfo|null|undefined} source_code_info
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.source_code_info = null;
    
                /**
                 * FileDescriptorProto syntax.
                 * @member {string} syntax
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.syntax = "";
    
                /**
                 * Creates a new FileDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.IFileDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto instance
                 */
                FileDescriptorProto.create = function create(properties) {
                    return new FileDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified FileDescriptorProto message. Does not implicitly {@link google.protobuf.FileDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.IFileDescriptorProto} message FileDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && message.hasOwnProperty("name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message["package"] != null && message.hasOwnProperty("package"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message["package"]);
                    if (message.dependency != null && message.dependency.length)
                        for (var i = 0; i < message.dependency.length; ++i)
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.dependency[i]);
                    if (message.message_type != null && message.message_type.length)
                        for (var i = 0; i < message.message_type.length; ++i)
                            $root.google.protobuf.DescriptorProto.encode(message.message_type[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.enum_type != null && message.enum_type.length)
                        for (var i = 0; i < message.enum_type.length; ++i)
                            $root.google.protobuf.EnumDescriptorProto.encode(message.enum_type[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.service != null && message.service.length)
                        for (var i = 0; i < message.service.length; ++i)
                            $root.google.protobuf.ServiceDescriptorProto.encode(message.service[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.extension != null && message.extension.length)
                        for (var i = 0; i < message.extension.length; ++i)
                            $root.google.protobuf.FieldDescriptorProto.encode(message.extension[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    if (message.options != null && message.hasOwnProperty("options"))
                        $root.google.protobuf.FileOptions.encode(message.options, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.source_code_info != null && message.hasOwnProperty("source_code_info"))
                        $root.google.protobuf.SourceCodeInfo.encode(message.source_code_info, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                    if (message.public_dependency != null && message.public_dependency.length)
                        for (var i = 0; i < message.public_dependency.length; ++i)
                            writer.uint32(/* id 10, wireType 0 =*/80).int32(message.public_dependency[i]);
                    if (message.weak_dependency != null && message.weak_dependency.length)
                        for (var i = 0; i < message.weak_dependency.length; ++i)
                            writer.uint32(/* id 11, wireType 0 =*/88).int32(message.weak_dependency[i]);
                    if (message.syntax != null && message.hasOwnProperty("syntax"))
                        writer.uint32(/* id 12, wireType 2 =*/98).string(message.syntax);
                    return writer;
                };
    
                /**
                 * Encodes the specified FileDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.FileDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.IFileDescriptorProto} message FileDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FileDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            message["package"] = reader.string();
                            break;
                        case 3:
                            if (!(message.dependency && message.dependency.length))
                                message.dependency = [];
                            message.dependency.push(reader.string());
                            break;
                        case 10:
                            if (!(message.public_dependency && message.public_dependency.length))
                                message.public_dependency = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.public_dependency.push(reader.int32());
                            } else
                                message.public_dependency.push(reader.int32());
                            break;
                        case 11:
                            if (!(message.weak_dependency && message.weak_dependency.length))
                                message.weak_dependency = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.weak_dependency.push(reader.int32());
                            } else
                                message.weak_dependency.push(reader.int32());
                            break;
                        case 4:
                            if (!(message.message_type && message.message_type.length))
                                message.message_type = [];
                            message.message_type.push($root.google.protobuf.DescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 5:
                            if (!(message.enum_type && message.enum_type.length))
                                message.enum_type = [];
                            message.enum_type.push($root.google.protobuf.EnumDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 6:
                            if (!(message.service && message.service.length))
                                message.service = [];
                            message.service.push($root.google.protobuf.ServiceDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 7:
                            if (!(message.extension && message.extension.length))
                                message.extension = [];
                            message.extension.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 8:
                            message.options = $root.google.protobuf.FileOptions.decode(reader, reader.uint32());
                            break;
                        case 9:
                            message.source_code_info = $root.google.protobuf.SourceCodeInfo.decode(reader, reader.uint32());
                            break;
                        case 12:
                            message.syntax = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FileDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FileDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FileDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message["package"] != null && message.hasOwnProperty("package"))
                        if (!$util.isString(message["package"]))
                            return "package: string expected";
                    if (message.dependency != null && message.hasOwnProperty("dependency")) {
                        if (!Array.isArray(message.dependency))
                            return "dependency: array expected";
                        for (var i = 0; i < message.dependency.length; ++i)
                            if (!$util.isString(message.dependency[i]))
                                return "dependency: string[] expected";
                    }
                    if (message.public_dependency != null && message.hasOwnProperty("public_dependency")) {
                        if (!Array.isArray(message.public_dependency))
                            return "public_dependency: array expected";
                        for (var i = 0; i < message.public_dependency.length; ++i)
                            if (!$util.isInteger(message.public_dependency[i]))
                                return "public_dependency: integer[] expected";
                    }
                    if (message.weak_dependency != null && message.hasOwnProperty("weak_dependency")) {
                        if (!Array.isArray(message.weak_dependency))
                            return "weak_dependency: array expected";
                        for (var i = 0; i < message.weak_dependency.length; ++i)
                            if (!$util.isInteger(message.weak_dependency[i]))
                                return "weak_dependency: integer[] expected";
                    }
                    if (message.message_type != null && message.hasOwnProperty("message_type")) {
                        if (!Array.isArray(message.message_type))
                            return "message_type: array expected";
                        for (var i = 0; i < message.message_type.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.verify(message.message_type[i]);
                            if (error)
                                return "message_type." + error;
                        }
                    }
                    if (message.enum_type != null && message.hasOwnProperty("enum_type")) {
                        if (!Array.isArray(message.enum_type))
                            return "enum_type: array expected";
                        for (var i = 0; i < message.enum_type.length; ++i) {
                            var error = $root.google.protobuf.EnumDescriptorProto.verify(message.enum_type[i]);
                            if (error)
                                return "enum_type." + error;
                        }
                    }
                    if (message.service != null && message.hasOwnProperty("service")) {
                        if (!Array.isArray(message.service))
                            return "service: array expected";
                        for (var i = 0; i < message.service.length; ++i) {
                            var error = $root.google.protobuf.ServiceDescriptorProto.verify(message.service[i]);
                            if (error)
                                return "service." + error;
                        }
                    }
                    if (message.extension != null && message.hasOwnProperty("extension")) {
                        if (!Array.isArray(message.extension))
                            return "extension: array expected";
                        for (var i = 0; i < message.extension.length; ++i) {
                            var error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                            if (error)
                                return "extension." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.FileOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.source_code_info != null && message.hasOwnProperty("source_code_info")) {
                        var error = $root.google.protobuf.SourceCodeInfo.verify(message.source_code_info);
                        if (error)
                            return "source_code_info." + error;
                    }
                    if (message.syntax != null && message.hasOwnProperty("syntax"))
                        if (!$util.isString(message.syntax))
                            return "syntax: string expected";
                    return null;
                };
    
                /**
                 * Creates a FileDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
                 */
                FileDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FileDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.FileDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object["package"] != null)
                        message["package"] = String(object["package"]);
                    if (object.dependency) {
                        if (!Array.isArray(object.dependency))
                            throw TypeError(".google.protobuf.FileDescriptorProto.dependency: array expected");
                        message.dependency = [];
                        for (var i = 0; i < object.dependency.length; ++i)
                            message.dependency[i] = String(object.dependency[i]);
                    }
                    if (object.public_dependency) {
                        if (!Array.isArray(object.public_dependency))
                            throw TypeError(".google.protobuf.FileDescriptorProto.public_dependency: array expected");
                        message.public_dependency = [];
                        for (var i = 0; i < object.public_dependency.length; ++i)
                            message.public_dependency[i] = object.public_dependency[i] | 0;
                    }
                    if (object.weak_dependency) {
                        if (!Array.isArray(object.weak_dependency))
                            throw TypeError(".google.protobuf.FileDescriptorProto.weak_dependency: array expected");
                        message.weak_dependency = [];
                        for (var i = 0; i < object.weak_dependency.length; ++i)
                            message.weak_dependency[i] = object.weak_dependency[i] | 0;
                    }
                    if (object.message_type) {
                        if (!Array.isArray(object.message_type))
                            throw TypeError(".google.protobuf.FileDescriptorProto.message_type: array expected");
                        message.message_type = [];
                        for (var i = 0; i < object.message_type.length; ++i) {
                            if (typeof object.message_type[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.message_type: object expected");
                            message.message_type[i] = $root.google.protobuf.DescriptorProto.fromObject(object.message_type[i]);
                        }
                    }
                    if (object.enum_type) {
                        if (!Array.isArray(object.enum_type))
                            throw TypeError(".google.protobuf.FileDescriptorProto.enum_type: array expected");
                        message.enum_type = [];
                        for (var i = 0; i < object.enum_type.length; ++i) {
                            if (typeof object.enum_type[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.enum_type: object expected");
                            message.enum_type[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enum_type[i]);
                        }
                    }
                    if (object.service) {
                        if (!Array.isArray(object.service))
                            throw TypeError(".google.protobuf.FileDescriptorProto.service: array expected");
                        message.service = [];
                        for (var i = 0; i < object.service.length; ++i) {
                            if (typeof object.service[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.service: object expected");
                            message.service[i] = $root.google.protobuf.ServiceDescriptorProto.fromObject(object.service[i]);
                        }
                    }
                    if (object.extension) {
                        if (!Array.isArray(object.extension))
                            throw TypeError(".google.protobuf.FileDescriptorProto.extension: array expected");
                        message.extension = [];
                        for (var i = 0; i < object.extension.length; ++i) {
                            if (typeof object.extension[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.extension: object expected");
                            message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.FileOptions.fromObject(object.options);
                    }
                    if (object.source_code_info != null) {
                        if (typeof object.source_code_info !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.source_code_info: object expected");
                        message.source_code_info = $root.google.protobuf.SourceCodeInfo.fromObject(object.source_code_info);
                    }
                    if (object.syntax != null)
                        message.syntax = String(object.syntax);
                    return message;
                };
    
                /**
                 * Creates a plain object from a FileDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.FileDescriptorProto} message FileDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FileDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.dependency = [];
                        object.message_type = [];
                        object.enum_type = [];
                        object.service = [];
                        object.extension = [];
                        object.public_dependency = [];
                        object.weak_dependency = [];
                    }
                    if (options.defaults) {
                        object.name = "";
                        object["package"] = "";
                        object.options = null;
                        object.source_code_info = null;
                        object.syntax = "";
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message["package"] != null && message.hasOwnProperty("package"))
                        object["package"] = message["package"];
                    if (message.dependency && message.dependency.length) {
                        object.dependency = [];
                        for (var j = 0; j < message.dependency.length; ++j)
                            object.dependency[j] = message.dependency[j];
                    }
                    if (message.message_type && message.message_type.length) {
                        object.message_type = [];
                        for (var j = 0; j < message.message_type.length; ++j)
                            object.message_type[j] = $root.google.protobuf.DescriptorProto.toObject(message.message_type[j], options);
                    }
                    if (message.enum_type && message.enum_type.length) {
                        object.enum_type = [];
                        for (var j = 0; j < message.enum_type.length; ++j)
                            object.enum_type[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enum_type[j], options);
                    }
                    if (message.service && message.service.length) {
                        object.service = [];
                        for (var j = 0; j < message.service.length; ++j)
                            object.service[j] = $root.google.protobuf.ServiceDescriptorProto.toObject(message.service[j], options);
                    }
                    if (message.extension && message.extension.length) {
                        object.extension = [];
                        for (var j = 0; j < message.extension.length; ++j)
                            object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.FileOptions.toObject(message.options, options);
                    if (message.source_code_info != null && message.hasOwnProperty("source_code_info"))
                        object.source_code_info = $root.google.protobuf.SourceCodeInfo.toObject(message.source_code_info, options);
                    if (message.public_dependency && message.public_dependency.length) {
                        object.public_dependency = [];
                        for (var j = 0; j < message.public_dependency.length; ++j)
                            object.public_dependency[j] = message.public_dependency[j];
                    }
                    if (message.weak_dependency && message.weak_dependency.length) {
                        object.weak_dependency = [];
                        for (var j = 0; j < message.weak_dependency.length; ++j)
                            object.weak_dependency[j] = message.weak_dependency[j];
                    }
                    if (message.syntax != null && message.hasOwnProperty("syntax"))
                        object.syntax = message.syntax;
                    return object;
                };
    
                /**
                 * Converts this FileDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FileDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return FileDescriptorProto;
            })();
    
            protobuf.DescriptorProto = (function() {
    
                /**
                 * Properties of a DescriptorProto.
                 * @memberof google.protobuf
                 * @interface IDescriptorProto
                 * @property {string|null} [name] DescriptorProto name
                 * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [field] DescriptorProto field
                 * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [extension] DescriptorProto extension
                 * @property {Array.<google.protobuf.IDescriptorProto>|null} [nested_type] DescriptorProto nested_type
                 * @property {Array.<google.protobuf.IEnumDescriptorProto>|null} [enum_type] DescriptorProto enum_type
                 * @property {Array.<google.protobuf.DescriptorProto.IExtensionRange>|null} [extension_range] DescriptorProto extension_range
                 * @property {Array.<google.protobuf.IOneofDescriptorProto>|null} [oneof_decl] DescriptorProto oneof_decl
                 * @property {google.protobuf.IMessageOptions|null} [options] DescriptorProto options
                 * @property {Array.<google.protobuf.DescriptorProto.IReservedRange>|null} [reserved_range] DescriptorProto reserved_range
                 * @property {Array.<string>|null} [reserved_name] DescriptorProto reserved_name
                 */
    
                /**
                 * Constructs a new DescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a DescriptorProto.
                 * @implements IDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IDescriptorProto=} [properties] Properties to set
                 */
                function DescriptorProto(properties) {
                    this.field = [];
                    this.extension = [];
                    this.nested_type = [];
                    this.enum_type = [];
                    this.extension_range = [];
                    this.oneof_decl = [];
                    this.reserved_range = [];
                    this.reserved_name = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * DescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.name = "";
    
                /**
                 * DescriptorProto field.
                 * @member {Array.<google.protobuf.IFieldDescriptorProto>} field
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.field = $util.emptyArray;
    
                /**
                 * DescriptorProto extension.
                 * @member {Array.<google.protobuf.IFieldDescriptorProto>} extension
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.extension = $util.emptyArray;
    
                /**
                 * DescriptorProto nested_type.
                 * @member {Array.<google.protobuf.IDescriptorProto>} nested_type
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.nested_type = $util.emptyArray;
    
                /**
                 * DescriptorProto enum_type.
                 * @member {Array.<google.protobuf.IEnumDescriptorProto>} enum_type
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.enum_type = $util.emptyArray;
    
                /**
                 * DescriptorProto extension_range.
                 * @member {Array.<google.protobuf.DescriptorProto.IExtensionRange>} extension_range
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.extension_range = $util.emptyArray;
    
                /**
                 * DescriptorProto oneof_decl.
                 * @member {Array.<google.protobuf.IOneofDescriptorProto>} oneof_decl
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.oneof_decl = $util.emptyArray;
    
                /**
                 * DescriptorProto options.
                 * @member {google.protobuf.IMessageOptions|null|undefined} options
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.options = null;
    
                /**
                 * DescriptorProto reserved_range.
                 * @member {Array.<google.protobuf.DescriptorProto.IReservedRange>} reserved_range
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.reserved_range = $util.emptyArray;
    
                /**
                 * DescriptorProto reserved_name.
                 * @member {Array.<string>} reserved_name
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.reserved_name = $util.emptyArray;
    
                /**
                 * Creates a new DescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.IDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto instance
                 */
                DescriptorProto.create = function create(properties) {
                    return new DescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified DescriptorProto message. Does not implicitly {@link google.protobuf.DescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.IDescriptorProto} message DescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && message.hasOwnProperty("name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.field != null && message.field.length)
                        for (var i = 0; i < message.field.length; ++i)
                            $root.google.protobuf.FieldDescriptorProto.encode(message.field[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.nested_type != null && message.nested_type.length)
                        for (var i = 0; i < message.nested_type.length; ++i)
                            $root.google.protobuf.DescriptorProto.encode(message.nested_type[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.enum_type != null && message.enum_type.length)
                        for (var i = 0; i < message.enum_type.length; ++i)
                            $root.google.protobuf.EnumDescriptorProto.encode(message.enum_type[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.extension_range != null && message.extension_range.length)
                        for (var i = 0; i < message.extension_range.length; ++i)
                            $root.google.protobuf.DescriptorProto.ExtensionRange.encode(message.extension_range[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.extension != null && message.extension.length)
                        for (var i = 0; i < message.extension.length; ++i)
                            $root.google.protobuf.FieldDescriptorProto.encode(message.extension[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.options != null && message.hasOwnProperty("options"))
                        $root.google.protobuf.MessageOptions.encode(message.options, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    if (message.oneof_decl != null && message.oneof_decl.length)
                        for (var i = 0; i < message.oneof_decl.length; ++i)
                            $root.google.protobuf.OneofDescriptorProto.encode(message.oneof_decl[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.reserved_range != null && message.reserved_range.length)
                        for (var i = 0; i < message.reserved_range.length; ++i)
                            $root.google.protobuf.DescriptorProto.ReservedRange.encode(message.reserved_range[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                    if (message.reserved_name != null && message.reserved_name.length)
                        for (var i = 0; i < message.reserved_name.length; ++i)
                            writer.uint32(/* id 10, wireType 2 =*/82).string(message.reserved_name[i]);
                    return writer;
                };
    
                /**
                 * Encodes the specified DescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.IDescriptorProto} message DescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a DescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            if (!(message.field && message.field.length))
                                message.field = [];
                            message.field.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 6:
                            if (!(message.extension && message.extension.length))
                                message.extension = [];
                            message.extension.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 3:
                            if (!(message.nested_type && message.nested_type.length))
                                message.nested_type = [];
                            message.nested_type.push($root.google.protobuf.DescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 4:
                            if (!(message.enum_type && message.enum_type.length))
                                message.enum_type = [];
                            message.enum_type.push($root.google.protobuf.EnumDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 5:
                            if (!(message.extension_range && message.extension_range.length))
                                message.extension_range = [];
                            message.extension_range.push($root.google.protobuf.DescriptorProto.ExtensionRange.decode(reader, reader.uint32()));
                            break;
                        case 8:
                            if (!(message.oneof_decl && message.oneof_decl.length))
                                message.oneof_decl = [];
                            message.oneof_decl.push($root.google.protobuf.OneofDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 7:
                            message.options = $root.google.protobuf.MessageOptions.decode(reader, reader.uint32());
                            break;
                        case 9:
                            if (!(message.reserved_range && message.reserved_range.length))
                                message.reserved_range = [];
                            message.reserved_range.push($root.google.protobuf.DescriptorProto.ReservedRange.decode(reader, reader.uint32()));
                            break;
                        case 10:
                            if (!(message.reserved_name && message.reserved_name.length))
                                message.reserved_name = [];
                            message.reserved_name.push(reader.string());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a DescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a DescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.field != null && message.hasOwnProperty("field")) {
                        if (!Array.isArray(message.field))
                            return "field: array expected";
                        for (var i = 0; i < message.field.length; ++i) {
                            var error = $root.google.protobuf.FieldDescriptorProto.verify(message.field[i]);
                            if (error)
                                return "field." + error;
                        }
                    }
                    if (message.extension != null && message.hasOwnProperty("extension")) {
                        if (!Array.isArray(message.extension))
                            return "extension: array expected";
                        for (var i = 0; i < message.extension.length; ++i) {
                            var error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                            if (error)
                                return "extension." + error;
                        }
                    }
                    if (message.nested_type != null && message.hasOwnProperty("nested_type")) {
                        if (!Array.isArray(message.nested_type))
                            return "nested_type: array expected";
                        for (var i = 0; i < message.nested_type.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.verify(message.nested_type[i]);
                            if (error)
                                return "nested_type." + error;
                        }
                    }
                    if (message.enum_type != null && message.hasOwnProperty("enum_type")) {
                        if (!Array.isArray(message.enum_type))
                            return "enum_type: array expected";
                        for (var i = 0; i < message.enum_type.length; ++i) {
                            var error = $root.google.protobuf.EnumDescriptorProto.verify(message.enum_type[i]);
                            if (error)
                                return "enum_type." + error;
                        }
                    }
                    if (message.extension_range != null && message.hasOwnProperty("extension_range")) {
                        if (!Array.isArray(message.extension_range))
                            return "extension_range: array expected";
                        for (var i = 0; i < message.extension_range.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.ExtensionRange.verify(message.extension_range[i]);
                            if (error)
                                return "extension_range." + error;
                        }
                    }
                    if (message.oneof_decl != null && message.hasOwnProperty("oneof_decl")) {
                        if (!Array.isArray(message.oneof_decl))
                            return "oneof_decl: array expected";
                        for (var i = 0; i < message.oneof_decl.length; ++i) {
                            var error = $root.google.protobuf.OneofDescriptorProto.verify(message.oneof_decl[i]);
                            if (error)
                                return "oneof_decl." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.MessageOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.reserved_range != null && message.hasOwnProperty("reserved_range")) {
                        if (!Array.isArray(message.reserved_range))
                            return "reserved_range: array expected";
                        for (var i = 0; i < message.reserved_range.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.ReservedRange.verify(message.reserved_range[i]);
                            if (error)
                                return "reserved_range." + error;
                        }
                    }
                    if (message.reserved_name != null && message.hasOwnProperty("reserved_name")) {
                        if (!Array.isArray(message.reserved_name))
                            return "reserved_name: array expected";
                        for (var i = 0; i < message.reserved_name.length; ++i)
                            if (!$util.isString(message.reserved_name[i]))
                                return "reserved_name: string[] expected";
                    }
                    return null;
                };
    
                /**
                 * Creates a DescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto
                 */
                DescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.DescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.DescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.field) {
                        if (!Array.isArray(object.field))
                            throw TypeError(".google.protobuf.DescriptorProto.field: array expected");
                        message.field = [];
                        for (var i = 0; i < object.field.length; ++i) {
                            if (typeof object.field[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.field: object expected");
                            message.field[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.field[i]);
                        }
                    }
                    if (object.extension) {
                        if (!Array.isArray(object.extension))
                            throw TypeError(".google.protobuf.DescriptorProto.extension: array expected");
                        message.extension = [];
                        for (var i = 0; i < object.extension.length; ++i) {
                            if (typeof object.extension[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.extension: object expected");
                            message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                        }
                    }
                    if (object.nested_type) {
                        if (!Array.isArray(object.nested_type))
                            throw TypeError(".google.protobuf.DescriptorProto.nested_type: array expected");
                        message.nested_type = [];
                        for (var i = 0; i < object.nested_type.length; ++i) {
                            if (typeof object.nested_type[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.nested_type: object expected");
                            message.nested_type[i] = $root.google.protobuf.DescriptorProto.fromObject(object.nested_type[i]);
                        }
                    }
                    if (object.enum_type) {
                        if (!Array.isArray(object.enum_type))
                            throw TypeError(".google.protobuf.DescriptorProto.enum_type: array expected");
                        message.enum_type = [];
                        for (var i = 0; i < object.enum_type.length; ++i) {
                            if (typeof object.enum_type[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.enum_type: object expected");
                            message.enum_type[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enum_type[i]);
                        }
                    }
                    if (object.extension_range) {
                        if (!Array.isArray(object.extension_range))
                            throw TypeError(".google.protobuf.DescriptorProto.extension_range: array expected");
                        message.extension_range = [];
                        for (var i = 0; i < object.extension_range.length; ++i) {
                            if (typeof object.extension_range[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.extension_range: object expected");
                            message.extension_range[i] = $root.google.protobuf.DescriptorProto.ExtensionRange.fromObject(object.extension_range[i]);
                        }
                    }
                    if (object.oneof_decl) {
                        if (!Array.isArray(object.oneof_decl))
                            throw TypeError(".google.protobuf.DescriptorProto.oneof_decl: array expected");
                        message.oneof_decl = [];
                        for (var i = 0; i < object.oneof_decl.length; ++i) {
                            if (typeof object.oneof_decl[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.oneof_decl: object expected");
                            message.oneof_decl[i] = $root.google.protobuf.OneofDescriptorProto.fromObject(object.oneof_decl[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.MessageOptions.fromObject(object.options);
                    }
                    if (object.reserved_range) {
                        if (!Array.isArray(object.reserved_range))
                            throw TypeError(".google.protobuf.DescriptorProto.reserved_range: array expected");
                        message.reserved_range = [];
                        for (var i = 0; i < object.reserved_range.length; ++i) {
                            if (typeof object.reserved_range[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.reserved_range: object expected");
                            message.reserved_range[i] = $root.google.protobuf.DescriptorProto.ReservedRange.fromObject(object.reserved_range[i]);
                        }
                    }
                    if (object.reserved_name) {
                        if (!Array.isArray(object.reserved_name))
                            throw TypeError(".google.protobuf.DescriptorProto.reserved_name: array expected");
                        message.reserved_name = [];
                        for (var i = 0; i < object.reserved_name.length; ++i)
                            message.reserved_name[i] = String(object.reserved_name[i]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a DescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.DescriptorProto} message DescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.field = [];
                        object.nested_type = [];
                        object.enum_type = [];
                        object.extension_range = [];
                        object.extension = [];
                        object.oneof_decl = [];
                        object.reserved_range = [];
                        object.reserved_name = [];
                    }
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.field && message.field.length) {
                        object.field = [];
                        for (var j = 0; j < message.field.length; ++j)
                            object.field[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.field[j], options);
                    }
                    if (message.nested_type && message.nested_type.length) {
                        object.nested_type = [];
                        for (var j = 0; j < message.nested_type.length; ++j)
                            object.nested_type[j] = $root.google.protobuf.DescriptorProto.toObject(message.nested_type[j], options);
                    }
                    if (message.enum_type && message.enum_type.length) {
                        object.enum_type = [];
                        for (var j = 0; j < message.enum_type.length; ++j)
                            object.enum_type[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enum_type[j], options);
                    }
                    if (message.extension_range && message.extension_range.length) {
                        object.extension_range = [];
                        for (var j = 0; j < message.extension_range.length; ++j)
                            object.extension_range[j] = $root.google.protobuf.DescriptorProto.ExtensionRange.toObject(message.extension_range[j], options);
                    }
                    if (message.extension && message.extension.length) {
                        object.extension = [];
                        for (var j = 0; j < message.extension.length; ++j)
                            object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.MessageOptions.toObject(message.options, options);
                    if (message.oneof_decl && message.oneof_decl.length) {
                        object.oneof_decl = [];
                        for (var j = 0; j < message.oneof_decl.length; ++j)
                            object.oneof_decl[j] = $root.google.protobuf.OneofDescriptorProto.toObject(message.oneof_decl[j], options);
                    }
                    if (message.reserved_range && message.reserved_range.length) {
                        object.reserved_range = [];
                        for (var j = 0; j < message.reserved_range.length; ++j)
                            object.reserved_range[j] = $root.google.protobuf.DescriptorProto.ReservedRange.toObject(message.reserved_range[j], options);
                    }
                    if (message.reserved_name && message.reserved_name.length) {
                        object.reserved_name = [];
                        for (var j = 0; j < message.reserved_name.length; ++j)
                            object.reserved_name[j] = message.reserved_name[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this DescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                DescriptorProto.ExtensionRange = (function() {
    
                    /**
                     * Properties of an ExtensionRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @interface IExtensionRange
                     * @property {number|null} [start] ExtensionRange start
                     * @property {number|null} [end] ExtensionRange end
                     */
    
                    /**
                     * Constructs a new ExtensionRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @classdesc Represents an ExtensionRange.
                     * @implements IExtensionRange
                     * @constructor
                     * @param {google.protobuf.DescriptorProto.IExtensionRange=} [properties] Properties to set
                     */
                    function ExtensionRange(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ExtensionRange start.
                     * @member {number} start
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     */
                    ExtensionRange.prototype.start = 0;
    
                    /**
                     * ExtensionRange end.
                     * @member {number} end
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     */
                    ExtensionRange.prototype.end = 0;
    
                    /**
                     * Creates a new ExtensionRange instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IExtensionRange=} [properties] Properties to set
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange instance
                     */
                    ExtensionRange.create = function create(properties) {
                        return new ExtensionRange(properties);
                    };
    
                    /**
                     * Encodes the specified ExtensionRange message. Does not implicitly {@link google.protobuf.DescriptorProto.ExtensionRange.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IExtensionRange} message ExtensionRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ExtensionRange.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.start != null && message.hasOwnProperty("start"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                        if (message.end != null && message.hasOwnProperty("end"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ExtensionRange message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.ExtensionRange.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IExtensionRange} message ExtensionRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ExtensionRange.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an ExtensionRange message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ExtensionRange.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.start = reader.int32();
                                break;
                            case 2:
                                message.end = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an ExtensionRange message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ExtensionRange.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an ExtensionRange message.
                     * @function verify
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ExtensionRange.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.start != null && message.hasOwnProperty("start"))
                            if (!$util.isInteger(message.start))
                                return "start: integer expected";
                        if (message.end != null && message.hasOwnProperty("end"))
                            if (!$util.isInteger(message.end))
                                return "end: integer expected";
                        return null;
                    };
    
                    /**
                     * Creates an ExtensionRange message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                     */
                    ExtensionRange.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.DescriptorProto.ExtensionRange)
                            return object;
                        var message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                        if (object.start != null)
                            message.start = object.start | 0;
                        if (object.end != null)
                            message.end = object.end | 0;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an ExtensionRange message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.ExtensionRange} message ExtensionRange
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ExtensionRange.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.start = 0;
                            object.end = 0;
                        }
                        if (message.start != null && message.hasOwnProperty("start"))
                            object.start = message.start;
                        if (message.end != null && message.hasOwnProperty("end"))
                            object.end = message.end;
                        return object;
                    };
    
                    /**
                     * Converts this ExtensionRange to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ExtensionRange.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return ExtensionRange;
                })();
    
                DescriptorProto.ReservedRange = (function() {
    
                    /**
                     * Properties of a ReservedRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @interface IReservedRange
                     * @property {number|null} [start] ReservedRange start
                     * @property {number|null} [end] ReservedRange end
                     */
    
                    /**
                     * Constructs a new ReservedRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @classdesc Represents a ReservedRange.
                     * @implements IReservedRange
                     * @constructor
                     * @param {google.protobuf.DescriptorProto.IReservedRange=} [properties] Properties to set
                     */
                    function ReservedRange(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ReservedRange start.
                     * @member {number} start
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @instance
                     */
                    ReservedRange.prototype.start = 0;
    
                    /**
                     * ReservedRange end.
                     * @member {number} end
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @instance
                     */
                    ReservedRange.prototype.end = 0;
    
                    /**
                     * Creates a new ReservedRange instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IReservedRange=} [properties] Properties to set
                     * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange instance
                     */
                    ReservedRange.create = function create(properties) {
                        return new ReservedRange(properties);
                    };
    
                    /**
                     * Encodes the specified ReservedRange message. Does not implicitly {@link google.protobuf.DescriptorProto.ReservedRange.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IReservedRange} message ReservedRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ReservedRange.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.start != null && message.hasOwnProperty("start"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                        if (message.end != null && message.hasOwnProperty("end"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ReservedRange message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.ReservedRange.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IReservedRange} message ReservedRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ReservedRange.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ReservedRange message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ReservedRange.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto.ReservedRange();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.start = reader.int32();
                                break;
                            case 2:
                                message.end = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ReservedRange message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ReservedRange.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ReservedRange message.
                     * @function verify
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ReservedRange.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.start != null && message.hasOwnProperty("start"))
                            if (!$util.isInteger(message.start))
                                return "start: integer expected";
                        if (message.end != null && message.hasOwnProperty("end"))
                            if (!$util.isInteger(message.end))
                                return "end: integer expected";
                        return null;
                    };
    
                    /**
                     * Creates a ReservedRange message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                     */
                    ReservedRange.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.DescriptorProto.ReservedRange)
                            return object;
                        var message = new $root.google.protobuf.DescriptorProto.ReservedRange();
                        if (object.start != null)
                            message.start = object.start | 0;
                        if (object.end != null)
                            message.end = object.end | 0;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ReservedRange message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.ReservedRange} message ReservedRange
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ReservedRange.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.start = 0;
                            object.end = 0;
                        }
                        if (message.start != null && message.hasOwnProperty("start"))
                            object.start = message.start;
                        if (message.end != null && message.hasOwnProperty("end"))
                            object.end = message.end;
                        return object;
                    };
    
                    /**
                     * Converts this ReservedRange to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ReservedRange.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return ReservedRange;
                })();
    
                return DescriptorProto;
            })();
    
            protobuf.FieldDescriptorProto = (function() {
    
                /**
                 * Properties of a FieldDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IFieldDescriptorProto
                 * @property {string|null} [name] FieldDescriptorProto name
                 * @property {number|null} [number] FieldDescriptorProto number
                 * @property {google.protobuf.FieldDescriptorProto.Label|null} [label] FieldDescriptorProto label
                 * @property {google.protobuf.FieldDescriptorProto.Type|null} [type] FieldDescriptorProto type
                 * @property {string|null} [type_name] FieldDescriptorProto type_name
                 * @property {string|null} [extendee] FieldDescriptorProto extendee
                 * @property {string|null} [default_value] FieldDescriptorProto default_value
                 * @property {number|null} [oneof_index] FieldDescriptorProto oneof_index
                 * @property {string|null} [json_name] FieldDescriptorProto json_name
                 * @property {google.protobuf.IFieldOptions|null} [options] FieldDescriptorProto options
                 */
    
                /**
                 * Constructs a new FieldDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a FieldDescriptorProto.
                 * @implements IFieldDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IFieldDescriptorProto=} [properties] Properties to set
                 */
                function FieldDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FieldDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.name = "";
    
                /**
                 * FieldDescriptorProto number.
                 * @member {number} number
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.number = 0;
    
                /**
                 * FieldDescriptorProto label.
                 * @member {google.protobuf.FieldDescriptorProto.Label} label
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.label = 1;
    
                /**
                 * FieldDescriptorProto type.
                 * @member {google.protobuf.FieldDescriptorProto.Type} type
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.type = 1;
    
                /**
                 * FieldDescriptorProto type_name.
                 * @member {string} type_name
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.type_name = "";
    
                /**
                 * FieldDescriptorProto extendee.
                 * @member {string} extendee
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.extendee = "";
    
                /**
                 * FieldDescriptorProto default_value.
                 * @member {string} default_value
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.default_value = "";
    
                /**
                 * FieldDescriptorProto oneof_index.
                 * @member {number} oneof_index
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.oneof_index = 0;
    
                /**
                 * FieldDescriptorProto json_name.
                 * @member {string} json_name
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.json_name = "";
    
                /**
                 * FieldDescriptorProto options.
                 * @member {google.protobuf.IFieldOptions|null|undefined} options
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.options = null;
    
                /**
                 * Creates a new FieldDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.IFieldDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto instance
                 */
                FieldDescriptorProto.create = function create(properties) {
                    return new FieldDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified FieldDescriptorProto message. Does not implicitly {@link google.protobuf.FieldDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.IFieldDescriptorProto} message FieldDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && message.hasOwnProperty("name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.extendee != null && message.hasOwnProperty("extendee"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.extendee);
                    if (message.number != null && message.hasOwnProperty("number"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.number);
                    if (message.label != null && message.hasOwnProperty("label"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.label);
                    if (message.type != null && message.hasOwnProperty("type"))
                        writer.uint32(/* id 5, wireType 0 =*/40).int32(message.type);
                    if (message.type_name != null && message.hasOwnProperty("type_name"))
                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.type_name);
                    if (message.default_value != null && message.hasOwnProperty("default_value"))
                        writer.uint32(/* id 7, wireType 2 =*/58).string(message.default_value);
                    if (message.options != null && message.hasOwnProperty("options"))
                        $root.google.protobuf.FieldOptions.encode(message.options, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.oneof_index != null && message.hasOwnProperty("oneof_index"))
                        writer.uint32(/* id 9, wireType 0 =*/72).int32(message.oneof_index);
                    if (message.json_name != null && message.hasOwnProperty("json_name"))
                        writer.uint32(/* id 10, wireType 2 =*/82).string(message.json_name);
                    return writer;
                };
    
                /**
                 * Encodes the specified FieldDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.FieldDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.IFieldDescriptorProto} message FieldDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FieldDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 3:
                            message.number = reader.int32();
                            break;
                        case 4:
                            message.label = reader.int32();
                            break;
                        case 5:
                            message.type = reader.int32();
                            break;
                        case 6:
                            message.type_name = reader.string();
                            break;
                        case 2:
                            message.extendee = reader.string();
                            break;
                        case 7:
                            message.default_value = reader.string();
                            break;
                        case 9:
                            message.oneof_index = reader.int32();
                            break;
                        case 10:
                            message.json_name = reader.string();
                            break;
                        case 8:
                            message.options = $root.google.protobuf.FieldOptions.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FieldDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FieldDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FieldDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.number != null && message.hasOwnProperty("number"))
                        if (!$util.isInteger(message.number))
                            return "number: integer expected";
                    if (message.label != null && message.hasOwnProperty("label"))
                        switch (message.label) {
                        default:
                            return "label: enum value expected";
                        case 1:
                        case 2:
                        case 3:
                            break;
                        }
                    if (message.type != null && message.hasOwnProperty("type"))
                        switch (message.type) {
                        default:
                            return "type: enum value expected";
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                        case 8:
                        case 9:
                        case 10:
                        case 11:
                        case 12:
                        case 13:
                        case 14:
                        case 15:
                        case 16:
                        case 17:
                        case 18:
                            break;
                        }
                    if (message.type_name != null && message.hasOwnProperty("type_name"))
                        if (!$util.isString(message.type_name))
                            return "type_name: string expected";
                    if (message.extendee != null && message.hasOwnProperty("extendee"))
                        if (!$util.isString(message.extendee))
                            return "extendee: string expected";
                    if (message.default_value != null && message.hasOwnProperty("default_value"))
                        if (!$util.isString(message.default_value))
                            return "default_value: string expected";
                    if (message.oneof_index != null && message.hasOwnProperty("oneof_index"))
                        if (!$util.isInteger(message.oneof_index))
                            return "oneof_index: integer expected";
                    if (message.json_name != null && message.hasOwnProperty("json_name"))
                        if (!$util.isString(message.json_name))
                            return "json_name: string expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.FieldOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a FieldDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
                 */
                FieldDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FieldDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.FieldDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.number != null)
                        message.number = object.number | 0;
                    switch (object.label) {
                    case "LABEL_OPTIONAL":
                    case 1:
                        message.label = 1;
                        break;
                    case "LABEL_REQUIRED":
                    case 2:
                        message.label = 2;
                        break;
                    case "LABEL_REPEATED":
                    case 3:
                        message.label = 3;
                        break;
                    }
                    switch (object.type) {
                    case "TYPE_DOUBLE":
                    case 1:
                        message.type = 1;
                        break;
                    case "TYPE_FLOAT":
                    case 2:
                        message.type = 2;
                        break;
                    case "TYPE_INT64":
                    case 3:
                        message.type = 3;
                        break;
                    case "TYPE_UINT64":
                    case 4:
                        message.type = 4;
                        break;
                    case "TYPE_INT32":
                    case 5:
                        message.type = 5;
                        break;
                    case "TYPE_FIXED64":
                    case 6:
                        message.type = 6;
                        break;
                    case "TYPE_FIXED32":
                    case 7:
                        message.type = 7;
                        break;
                    case "TYPE_BOOL":
                    case 8:
                        message.type = 8;
                        break;
                    case "TYPE_STRING":
                    case 9:
                        message.type = 9;
                        break;
                    case "TYPE_GROUP":
                    case 10:
                        message.type = 10;
                        break;
                    case "TYPE_MESSAGE":
                    case 11:
                        message.type = 11;
                        break;
                    case "TYPE_BYTES":
                    case 12:
                        message.type = 12;
                        break;
                    case "TYPE_UINT32":
                    case 13:
                        message.type = 13;
                        break;
                    case "TYPE_ENUM":
                    case 14:
                        message.type = 14;
                        break;
                    case "TYPE_SFIXED32":
                    case 15:
                        message.type = 15;
                        break;
                    case "TYPE_SFIXED64":
                    case 16:
                        message.type = 16;
                        break;
                    case "TYPE_SINT32":
                    case 17:
                        message.type = 17;
                        break;
                    case "TYPE_SINT64":
                    case 18:
                        message.type = 18;
                        break;
                    }
                    if (object.type_name != null)
                        message.type_name = String(object.type_name);
                    if (object.extendee != null)
                        message.extendee = String(object.extendee);
                    if (object.default_value != null)
                        message.default_value = String(object.default_value);
                    if (object.oneof_index != null)
                        message.oneof_index = object.oneof_index | 0;
                    if (object.json_name != null)
                        message.json_name = String(object.json_name);
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.FieldDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.FieldOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FieldDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.FieldDescriptorProto} message FieldDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FieldDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.extendee = "";
                        object.number = 0;
                        object.label = options.enums === String ? "LABEL_OPTIONAL" : 1;
                        object.type = options.enums === String ? "TYPE_DOUBLE" : 1;
                        object.type_name = "";
                        object.default_value = "";
                        object.options = null;
                        object.oneof_index = 0;
                        object.json_name = "";
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.extendee != null && message.hasOwnProperty("extendee"))
                        object.extendee = message.extendee;
                    if (message.number != null && message.hasOwnProperty("number"))
                        object.number = message.number;
                    if (message.label != null && message.hasOwnProperty("label"))
                        object.label = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Label[message.label] : message.label;
                    if (message.type != null && message.hasOwnProperty("type"))
                        object.type = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Type[message.type] : message.type;
                    if (message.type_name != null && message.hasOwnProperty("type_name"))
                        object.type_name = message.type_name;
                    if (message.default_value != null && message.hasOwnProperty("default_value"))
                        object.default_value = message.default_value;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.FieldOptions.toObject(message.options, options);
                    if (message.oneof_index != null && message.hasOwnProperty("oneof_index"))
                        object.oneof_index = message.oneof_index;
                    if (message.json_name != null && message.hasOwnProperty("json_name"))
                        object.json_name = message.json_name;
                    return object;
                };
    
                /**
                 * Converts this FieldDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FieldDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Type enum.
                 * @name google.protobuf.FieldDescriptorProto.Type
                 * @enum {string}
                 * @property {number} TYPE_DOUBLE=1 TYPE_DOUBLE value
                 * @property {number} TYPE_FLOAT=2 TYPE_FLOAT value
                 * @property {number} TYPE_INT64=3 TYPE_INT64 value
                 * @property {number} TYPE_UINT64=4 TYPE_UINT64 value
                 * @property {number} TYPE_INT32=5 TYPE_INT32 value
                 * @property {number} TYPE_FIXED64=6 TYPE_FIXED64 value
                 * @property {number} TYPE_FIXED32=7 TYPE_FIXED32 value
                 * @property {number} TYPE_BOOL=8 TYPE_BOOL value
                 * @property {number} TYPE_STRING=9 TYPE_STRING value
                 * @property {number} TYPE_GROUP=10 TYPE_GROUP value
                 * @property {number} TYPE_MESSAGE=11 TYPE_MESSAGE value
                 * @property {number} TYPE_BYTES=12 TYPE_BYTES value
                 * @property {number} TYPE_UINT32=13 TYPE_UINT32 value
                 * @property {number} TYPE_ENUM=14 TYPE_ENUM value
                 * @property {number} TYPE_SFIXED32=15 TYPE_SFIXED32 value
                 * @property {number} TYPE_SFIXED64=16 TYPE_SFIXED64 value
                 * @property {number} TYPE_SINT32=17 TYPE_SINT32 value
                 * @property {number} TYPE_SINT64=18 TYPE_SINT64 value
                 */
                FieldDescriptorProto.Type = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[1] = "TYPE_DOUBLE"] = 1;
                    values[valuesById[2] = "TYPE_FLOAT"] = 2;
                    values[valuesById[3] = "TYPE_INT64"] = 3;
                    values[valuesById[4] = "TYPE_UINT64"] = 4;
                    values[valuesById[5] = "TYPE_INT32"] = 5;
                    values[valuesById[6] = "TYPE_FIXED64"] = 6;
                    values[valuesById[7] = "TYPE_FIXED32"] = 7;
                    values[valuesById[8] = "TYPE_BOOL"] = 8;
                    values[valuesById[9] = "TYPE_STRING"] = 9;
                    values[valuesById[10] = "TYPE_GROUP"] = 10;
                    values[valuesById[11] = "TYPE_MESSAGE"] = 11;
                    values[valuesById[12] = "TYPE_BYTES"] = 12;
                    values[valuesById[13] = "TYPE_UINT32"] = 13;
                    values[valuesById[14] = "TYPE_ENUM"] = 14;
                    values[valuesById[15] = "TYPE_SFIXED32"] = 15;
                    values[valuesById[16] = "TYPE_SFIXED64"] = 16;
                    values[valuesById[17] = "TYPE_SINT32"] = 17;
                    values[valuesById[18] = "TYPE_SINT64"] = 18;
                    return values;
                })();
    
                /**
                 * Label enum.
                 * @name google.protobuf.FieldDescriptorProto.Label
                 * @enum {string}
                 * @property {number} LABEL_OPTIONAL=1 LABEL_OPTIONAL value
                 * @property {number} LABEL_REQUIRED=2 LABEL_REQUIRED value
                 * @property {number} LABEL_REPEATED=3 LABEL_REPEATED value
                 */
                FieldDescriptorProto.Label = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[1] = "LABEL_OPTIONAL"] = 1;
                    values[valuesById[2] = "LABEL_REQUIRED"] = 2;
                    values[valuesById[3] = "LABEL_REPEATED"] = 3;
                    return values;
                })();
    
                return FieldDescriptorProto;
            })();
    
            protobuf.OneofDescriptorProto = (function() {
    
                /**
                 * Properties of an OneofDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IOneofDescriptorProto
                 * @property {string|null} [name] OneofDescriptorProto name
                 * @property {google.protobuf.IOneofOptions|null} [options] OneofDescriptorProto options
                 */
    
                /**
                 * Constructs a new OneofDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents an OneofDescriptorProto.
                 * @implements IOneofDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IOneofDescriptorProto=} [properties] Properties to set
                 */
                function OneofDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * OneofDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @instance
                 */
                OneofDescriptorProto.prototype.name = "";
    
                /**
                 * OneofDescriptorProto options.
                 * @member {google.protobuf.IOneofOptions|null|undefined} options
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @instance
                 */
                OneofDescriptorProto.prototype.options = null;
    
                /**
                 * Creates a new OneofDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.IOneofDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto instance
                 */
                OneofDescriptorProto.create = function create(properties) {
                    return new OneofDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified OneofDescriptorProto message. Does not implicitly {@link google.protobuf.OneofDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.IOneofDescriptorProto} message OneofDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && message.hasOwnProperty("name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.options != null && message.hasOwnProperty("options"))
                        $root.google.protobuf.OneofOptions.encode(message.options, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified OneofDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.OneofDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.IOneofDescriptorProto} message OneofDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an OneofDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.OneofDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            message.options = $root.google.protobuf.OneofOptions.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an OneofDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an OneofDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                OneofDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.OneofOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates an OneofDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
                 */
                OneofDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.OneofDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.OneofDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.OneofDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.OneofOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an OneofDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.OneofDescriptorProto} message OneofDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                OneofDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.OneofOptions.toObject(message.options, options);
                    return object;
                };
    
                /**
                 * Converts this OneofDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                OneofDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return OneofDescriptorProto;
            })();
    
            protobuf.EnumDescriptorProto = (function() {
    
                /**
                 * Properties of an EnumDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IEnumDescriptorProto
                 * @property {string|null} [name] EnumDescriptorProto name
                 * @property {Array.<google.protobuf.IEnumValueDescriptorProto>|null} [value] EnumDescriptorProto value
                 * @property {google.protobuf.IEnumOptions|null} [options] EnumDescriptorProto options
                 */
    
                /**
                 * Constructs a new EnumDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumDescriptorProto.
                 * @implements IEnumDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IEnumDescriptorProto=} [properties] Properties to set
                 */
                function EnumDescriptorProto(properties) {
                    this.value = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.name = "";
    
                /**
                 * EnumDescriptorProto value.
                 * @member {Array.<google.protobuf.IEnumValueDescriptorProto>} value
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.value = $util.emptyArray;
    
                /**
                 * EnumDescriptorProto options.
                 * @member {google.protobuf.IEnumOptions|null|undefined} options
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.options = null;
    
                /**
                 * Creates a new EnumDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto instance
                 */
                EnumDescriptorProto.create = function create(properties) {
                    return new EnumDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified EnumDescriptorProto message. Does not implicitly {@link google.protobuf.EnumDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumDescriptorProto} message EnumDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && message.hasOwnProperty("name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.value != null && message.value.length)
                        for (var i = 0; i < message.value.length; ++i)
                            $root.google.protobuf.EnumValueDescriptorProto.encode(message.value[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.options != null && message.hasOwnProperty("options"))
                        $root.google.protobuf.EnumOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.EnumDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumDescriptorProto} message EnumDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            if (!(message.value && message.value.length))
                                message.value = [];
                            message.value.push($root.google.protobuf.EnumValueDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 3:
                            message.options = $root.google.protobuf.EnumOptions.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.value != null && message.hasOwnProperty("value")) {
                        if (!Array.isArray(message.value))
                            return "value: array expected";
                        for (var i = 0; i < message.value.length; ++i) {
                            var error = $root.google.protobuf.EnumValueDescriptorProto.verify(message.value[i]);
                            if (error)
                                return "value." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.EnumOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates an EnumDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
                 */
                EnumDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.EnumDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.value) {
                        if (!Array.isArray(object.value))
                            throw TypeError(".google.protobuf.EnumDescriptorProto.value: array expected");
                        message.value = [];
                        for (var i = 0; i < object.value.length; ++i) {
                            if (typeof object.value[i] !== "object")
                                throw TypeError(".google.protobuf.EnumDescriptorProto.value: object expected");
                            message.value[i] = $root.google.protobuf.EnumValueDescriptorProto.fromObject(object.value[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.EnumDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.EnumOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.EnumDescriptorProto} message EnumDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.value = [];
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.value && message.value.length) {
                        object.value = [];
                        for (var j = 0; j < message.value.length; ++j)
                            object.value[j] = $root.google.protobuf.EnumValueDescriptorProto.toObject(message.value[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.EnumOptions.toObject(message.options, options);
                    return object;
                };
    
                /**
                 * Converts this EnumDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return EnumDescriptorProto;
            })();
    
            protobuf.EnumValueDescriptorProto = (function() {
    
                /**
                 * Properties of an EnumValueDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IEnumValueDescriptorProto
                 * @property {string|null} [name] EnumValueDescriptorProto name
                 * @property {number|null} [number] EnumValueDescriptorProto number
                 * @property {google.protobuf.IEnumValueOptions|null} [options] EnumValueDescriptorProto options
                 */
    
                /**
                 * Constructs a new EnumValueDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumValueDescriptorProto.
                 * @implements IEnumValueDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IEnumValueDescriptorProto=} [properties] Properties to set
                 */
                function EnumValueDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumValueDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 */
                EnumValueDescriptorProto.prototype.name = "";
    
                /**
                 * EnumValueDescriptorProto number.
                 * @member {number} number
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 */
                EnumValueDescriptorProto.prototype.number = 0;
    
                /**
                 * EnumValueDescriptorProto options.
                 * @member {google.protobuf.IEnumValueOptions|null|undefined} options
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 */
                EnumValueDescriptorProto.prototype.options = null;
    
                /**
                 * Creates a new EnumValueDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumValueDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto instance
                 */
                EnumValueDescriptorProto.create = function create(properties) {
                    return new EnumValueDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified EnumValueDescriptorProto message. Does not implicitly {@link google.protobuf.EnumValueDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumValueDescriptorProto} message EnumValueDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && message.hasOwnProperty("name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.number != null && message.hasOwnProperty("number"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.number);
                    if (message.options != null && message.hasOwnProperty("options"))
                        $root.google.protobuf.EnumValueOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumValueDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.EnumValueDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumValueDescriptorProto} message EnumValueDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumValueDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumValueDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            message.number = reader.int32();
                            break;
                        case 3:
                            message.options = $root.google.protobuf.EnumValueOptions.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumValueDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumValueDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumValueDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.number != null && message.hasOwnProperty("number"))
                        if (!$util.isInteger(message.number))
                            return "number: integer expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.EnumValueOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates an EnumValueDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
                 */
                EnumValueDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumValueDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.EnumValueDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.number != null)
                        message.number = object.number | 0;
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.EnumValueDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.EnumValueOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumValueDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.EnumValueDescriptorProto} message EnumValueDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumValueDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.number = 0;
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.number != null && message.hasOwnProperty("number"))
                        object.number = message.number;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.EnumValueOptions.toObject(message.options, options);
                    return object;
                };
    
                /**
                 * Converts this EnumValueDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumValueDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return EnumValueDescriptorProto;
            })();
    
            protobuf.ServiceDescriptorProto = (function() {
    
                /**
                 * Properties of a ServiceDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IServiceDescriptorProto
                 * @property {string|null} [name] ServiceDescriptorProto name
                 * @property {Array.<google.protobuf.IMethodDescriptorProto>|null} [method] ServiceDescriptorProto method
                 * @property {google.protobuf.IServiceOptions|null} [options] ServiceDescriptorProto options
                 */
    
                /**
                 * Constructs a new ServiceDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a ServiceDescriptorProto.
                 * @implements IServiceDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IServiceDescriptorProto=} [properties] Properties to set
                 */
                function ServiceDescriptorProto(properties) {
                    this.method = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ServiceDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 */
                ServiceDescriptorProto.prototype.name = "";
    
                /**
                 * ServiceDescriptorProto method.
                 * @member {Array.<google.protobuf.IMethodDescriptorProto>} method
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 */
                ServiceDescriptorProto.prototype.method = $util.emptyArray;
    
                /**
                 * ServiceDescriptorProto options.
                 * @member {google.protobuf.IServiceOptions|null|undefined} options
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 */
                ServiceDescriptorProto.prototype.options = null;
    
                /**
                 * Creates a new ServiceDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.IServiceDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto instance
                 */
                ServiceDescriptorProto.create = function create(properties) {
                    return new ServiceDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified ServiceDescriptorProto message. Does not implicitly {@link google.protobuf.ServiceDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.IServiceDescriptorProto} message ServiceDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && message.hasOwnProperty("name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.method != null && message.method.length)
                        for (var i = 0; i < message.method.length; ++i)
                            $root.google.protobuf.MethodDescriptorProto.encode(message.method[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.options != null && message.hasOwnProperty("options"))
                        $root.google.protobuf.ServiceOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified ServiceDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.ServiceDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.IServiceDescriptorProto} message ServiceDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ServiceDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ServiceDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            if (!(message.method && message.method.length))
                                message.method = [];
                            message.method.push($root.google.protobuf.MethodDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 3:
                            message.options = $root.google.protobuf.ServiceOptions.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ServiceDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ServiceDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ServiceDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.method != null && message.hasOwnProperty("method")) {
                        if (!Array.isArray(message.method))
                            return "method: array expected";
                        for (var i = 0; i < message.method.length; ++i) {
                            var error = $root.google.protobuf.MethodDescriptorProto.verify(message.method[i]);
                            if (error)
                                return "method." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.ServiceOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a ServiceDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
                 */
                ServiceDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.ServiceDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.ServiceDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.method) {
                        if (!Array.isArray(object.method))
                            throw TypeError(".google.protobuf.ServiceDescriptorProto.method: array expected");
                        message.method = [];
                        for (var i = 0; i < object.method.length; ++i) {
                            if (typeof object.method[i] !== "object")
                                throw TypeError(".google.protobuf.ServiceDescriptorProto.method: object expected");
                            message.method[i] = $root.google.protobuf.MethodDescriptorProto.fromObject(object.method[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.ServiceDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.ServiceOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a ServiceDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.ServiceDescriptorProto} message ServiceDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ServiceDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.method = [];
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.method && message.method.length) {
                        object.method = [];
                        for (var j = 0; j < message.method.length; ++j)
                            object.method[j] = $root.google.protobuf.MethodDescriptorProto.toObject(message.method[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.ServiceOptions.toObject(message.options, options);
                    return object;
                };
    
                /**
                 * Converts this ServiceDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ServiceDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ServiceDescriptorProto;
            })();
    
            protobuf.MethodDescriptorProto = (function() {
    
                /**
                 * Properties of a MethodDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IMethodDescriptorProto
                 * @property {string|null} [name] MethodDescriptorProto name
                 * @property {string|null} [input_type] MethodDescriptorProto input_type
                 * @property {string|null} [output_type] MethodDescriptorProto output_type
                 * @property {google.protobuf.IMethodOptions|null} [options] MethodDescriptorProto options
                 * @property {boolean|null} [client_streaming] MethodDescriptorProto client_streaming
                 * @property {boolean|null} [server_streaming] MethodDescriptorProto server_streaming
                 */
    
                /**
                 * Constructs a new MethodDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a MethodDescriptorProto.
                 * @implements IMethodDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IMethodDescriptorProto=} [properties] Properties to set
                 */
                function MethodDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MethodDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.name = "";
    
                /**
                 * MethodDescriptorProto input_type.
                 * @member {string} input_type
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.input_type = "";
    
                /**
                 * MethodDescriptorProto output_type.
                 * @member {string} output_type
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.output_type = "";
    
                /**
                 * MethodDescriptorProto options.
                 * @member {google.protobuf.IMethodOptions|null|undefined} options
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.options = null;
    
                /**
                 * MethodDescriptorProto client_streaming.
                 * @member {boolean} client_streaming
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.client_streaming = false;
    
                /**
                 * MethodDescriptorProto server_streaming.
                 * @member {boolean} server_streaming
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.server_streaming = false;
    
                /**
                 * Creates a new MethodDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.IMethodDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto instance
                 */
                MethodDescriptorProto.create = function create(properties) {
                    return new MethodDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified MethodDescriptorProto message. Does not implicitly {@link google.protobuf.MethodDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.IMethodDescriptorProto} message MethodDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && message.hasOwnProperty("name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.input_type != null && message.hasOwnProperty("input_type"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.input_type);
                    if (message.output_type != null && message.hasOwnProperty("output_type"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.output_type);
                    if (message.options != null && message.hasOwnProperty("options"))
                        $root.google.protobuf.MethodOptions.encode(message.options, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.client_streaming != null && message.hasOwnProperty("client_streaming"))
                        writer.uint32(/* id 5, wireType 0 =*/40).bool(message.client_streaming);
                    if (message.server_streaming != null && message.hasOwnProperty("server_streaming"))
                        writer.uint32(/* id 6, wireType 0 =*/48).bool(message.server_streaming);
                    return writer;
                };
    
                /**
                 * Encodes the specified MethodDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.MethodDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.IMethodDescriptorProto} message MethodDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MethodDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MethodDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            message.input_type = reader.string();
                            break;
                        case 3:
                            message.output_type = reader.string();
                            break;
                        case 4:
                            message.options = $root.google.protobuf.MethodOptions.decode(reader, reader.uint32());
                            break;
                        case 5:
                            message.client_streaming = reader.bool();
                            break;
                        case 6:
                            message.server_streaming = reader.bool();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MethodDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MethodDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MethodDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.input_type != null && message.hasOwnProperty("input_type"))
                        if (!$util.isString(message.input_type))
                            return "input_type: string expected";
                    if (message.output_type != null && message.hasOwnProperty("output_type"))
                        if (!$util.isString(message.output_type))
                            return "output_type: string expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.MethodOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.client_streaming != null && message.hasOwnProperty("client_streaming"))
                        if (typeof message.client_streaming !== "boolean")
                            return "client_streaming: boolean expected";
                    if (message.server_streaming != null && message.hasOwnProperty("server_streaming"))
                        if (typeof message.server_streaming !== "boolean")
                            return "server_streaming: boolean expected";
                    return null;
                };
    
                /**
                 * Creates a MethodDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
                 */
                MethodDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.MethodDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.MethodDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.input_type != null)
                        message.input_type = String(object.input_type);
                    if (object.output_type != null)
                        message.output_type = String(object.output_type);
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.MethodDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.MethodOptions.fromObject(object.options);
                    }
                    if (object.client_streaming != null)
                        message.client_streaming = Boolean(object.client_streaming);
                    if (object.server_streaming != null)
                        message.server_streaming = Boolean(object.server_streaming);
                    return message;
                };
    
                /**
                 * Creates a plain object from a MethodDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.MethodDescriptorProto} message MethodDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MethodDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.input_type = "";
                        object.output_type = "";
                        object.options = null;
                        object.client_streaming = false;
                        object.server_streaming = false;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.input_type != null && message.hasOwnProperty("input_type"))
                        object.input_type = message.input_type;
                    if (message.output_type != null && message.hasOwnProperty("output_type"))
                        object.output_type = message.output_type;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.MethodOptions.toObject(message.options, options);
                    if (message.client_streaming != null && message.hasOwnProperty("client_streaming"))
                        object.client_streaming = message.client_streaming;
                    if (message.server_streaming != null && message.hasOwnProperty("server_streaming"))
                        object.server_streaming = message.server_streaming;
                    return object;
                };
    
                /**
                 * Converts this MethodDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MethodDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return MethodDescriptorProto;
            })();
    
            protobuf.FileOptions = (function() {
    
                /**
                 * Properties of a FileOptions.
                 * @memberof google.protobuf
                 * @interface IFileOptions
                 * @property {string|null} [java_package] FileOptions java_package
                 * @property {string|null} [java_outer_classname] FileOptions java_outer_classname
                 * @property {boolean|null} [java_multiple_files] FileOptions java_multiple_files
                 * @property {boolean|null} [java_generate_equals_and_hash] FileOptions java_generate_equals_and_hash
                 * @property {boolean|null} [java_string_check_utf8] FileOptions java_string_check_utf8
                 * @property {google.protobuf.FileOptions.OptimizeMode|null} [optimize_for] FileOptions optimize_for
                 * @property {string|null} [go_package] FileOptions go_package
                 * @property {boolean|null} [cc_generic_services] FileOptions cc_generic_services
                 * @property {boolean|null} [java_generic_services] FileOptions java_generic_services
                 * @property {boolean|null} [py_generic_services] FileOptions py_generic_services
                 * @property {boolean|null} [deprecated] FileOptions deprecated
                 * @property {boolean|null} [cc_enable_arenas] FileOptions cc_enable_arenas
                 * @property {string|null} [objc_class_prefix] FileOptions objc_class_prefix
                 * @property {string|null} [csharp_namespace] FileOptions csharp_namespace
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] FileOptions uninterpreted_option
                 * @property {boolean|null} [".force_php_generation"] FileOptions .force_php_generation
                 */
    
                /**
                 * Constructs a new FileOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a FileOptions.
                 * @implements IFileOptions
                 * @constructor
                 * @param {google.protobuf.IFileOptions=} [properties] Properties to set
                 */
                function FileOptions(properties) {
                    this.uninterpreted_option = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FileOptions java_package.
                 * @member {string} java_package
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.java_package = "";
    
                /**
                 * FileOptions java_outer_classname.
                 * @member {string} java_outer_classname
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.java_outer_classname = "";
    
                /**
                 * FileOptions java_multiple_files.
                 * @member {boolean} java_multiple_files
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.java_multiple_files = false;
    
                /**
                 * FileOptions java_generate_equals_and_hash.
                 * @member {boolean} java_generate_equals_and_hash
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.java_generate_equals_and_hash = false;
    
                /**
                 * FileOptions java_string_check_utf8.
                 * @member {boolean} java_string_check_utf8
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.java_string_check_utf8 = false;
    
                /**
                 * FileOptions optimize_for.
                 * @member {google.protobuf.FileOptions.OptimizeMode} optimize_for
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.optimize_for = 1;
    
                /**
                 * FileOptions go_package.
                 * @member {string} go_package
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.go_package = "";
    
                /**
                 * FileOptions cc_generic_services.
                 * @member {boolean} cc_generic_services
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.cc_generic_services = false;
    
                /**
                 * FileOptions java_generic_services.
                 * @member {boolean} java_generic_services
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.java_generic_services = false;
    
                /**
                 * FileOptions py_generic_services.
                 * @member {boolean} py_generic_services
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.py_generic_services = false;
    
                /**
                 * FileOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.deprecated = false;
    
                /**
                 * FileOptions cc_enable_arenas.
                 * @member {boolean} cc_enable_arenas
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.cc_enable_arenas = false;
    
                /**
                 * FileOptions objc_class_prefix.
                 * @member {string} objc_class_prefix
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.objc_class_prefix = "";
    
                /**
                 * FileOptions csharp_namespace.
                 * @member {string} csharp_namespace
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.csharp_namespace = "";
    
                /**
                 * FileOptions uninterpreted_option.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.uninterpreted_option = $util.emptyArray;
    
                /**
                 * FileOptions .force_php_generation.
                 * @member {boolean} .force_php_generation
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype[".force_php_generation"] = false;
    
                /**
                 * Creates a new FileOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.IFileOptions=} [properties] Properties to set
                 * @returns {google.protobuf.FileOptions} FileOptions instance
                 */
                FileOptions.create = function create(properties) {
                    return new FileOptions(properties);
                };
    
                /**
                 * Encodes the specified FileOptions message. Does not implicitly {@link google.protobuf.FileOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.IFileOptions} message FileOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.java_package != null && message.hasOwnProperty("java_package"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.java_package);
                    if (message.java_outer_classname != null && message.hasOwnProperty("java_outer_classname"))
                        writer.uint32(/* id 8, wireType 2 =*/66).string(message.java_outer_classname);
                    if (message.optimize_for != null && message.hasOwnProperty("optimize_for"))
                        writer.uint32(/* id 9, wireType 0 =*/72).int32(message.optimize_for);
                    if (message.java_multiple_files != null && message.hasOwnProperty("java_multiple_files"))
                        writer.uint32(/* id 10, wireType 0 =*/80).bool(message.java_multiple_files);
                    if (message.go_package != null && message.hasOwnProperty("go_package"))
                        writer.uint32(/* id 11, wireType 2 =*/90).string(message.go_package);
                    if (message.cc_generic_services != null && message.hasOwnProperty("cc_generic_services"))
                        writer.uint32(/* id 16, wireType 0 =*/128).bool(message.cc_generic_services);
                    if (message.java_generic_services != null && message.hasOwnProperty("java_generic_services"))
                        writer.uint32(/* id 17, wireType 0 =*/136).bool(message.java_generic_services);
                    if (message.py_generic_services != null && message.hasOwnProperty("py_generic_services"))
                        writer.uint32(/* id 18, wireType 0 =*/144).bool(message.py_generic_services);
                    if (message.java_generate_equals_and_hash != null && message.hasOwnProperty("java_generate_equals_and_hash"))
                        writer.uint32(/* id 20, wireType 0 =*/160).bool(message.java_generate_equals_and_hash);
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        writer.uint32(/* id 23, wireType 0 =*/184).bool(message.deprecated);
                    if (message.java_string_check_utf8 != null && message.hasOwnProperty("java_string_check_utf8"))
                        writer.uint32(/* id 27, wireType 0 =*/216).bool(message.java_string_check_utf8);
                    if (message.cc_enable_arenas != null && message.hasOwnProperty("cc_enable_arenas"))
                        writer.uint32(/* id 31, wireType 0 =*/248).bool(message.cc_enable_arenas);
                    if (message.objc_class_prefix != null && message.hasOwnProperty("objc_class_prefix"))
                        writer.uint32(/* id 36, wireType 2 =*/290).string(message.objc_class_prefix);
                    if (message.csharp_namespace != null && message.hasOwnProperty("csharp_namespace"))
                        writer.uint32(/* id 37, wireType 2 =*/298).string(message.csharp_namespace);
                    if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                        for (var i = 0; i < message.uninterpreted_option.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".force_php_generation"] != null && message.hasOwnProperty(".force_php_generation"))
                        writer.uint32(/* id 50000, wireType 0 =*/400000).bool(message[".force_php_generation"]);
                    return writer;
                };
    
                /**
                 * Encodes the specified FileOptions message, length delimited. Does not implicitly {@link google.protobuf.FileOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.IFileOptions} message FileOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FileOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FileOptions} FileOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.java_package = reader.string();
                            break;
                        case 8:
                            message.java_outer_classname = reader.string();
                            break;
                        case 10:
                            message.java_multiple_files = reader.bool();
                            break;
                        case 20:
                            message.java_generate_equals_and_hash = reader.bool();
                            break;
                        case 27:
                            message.java_string_check_utf8 = reader.bool();
                            break;
                        case 9:
                            message.optimize_for = reader.int32();
                            break;
                        case 11:
                            message.go_package = reader.string();
                            break;
                        case 16:
                            message.cc_generic_services = reader.bool();
                            break;
                        case 17:
                            message.java_generic_services = reader.bool();
                            break;
                        case 18:
                            message.py_generic_services = reader.bool();
                            break;
                        case 23:
                            message.deprecated = reader.bool();
                            break;
                        case 31:
                            message.cc_enable_arenas = reader.bool();
                            break;
                        case 36:
                            message.objc_class_prefix = reader.string();
                            break;
                        case 37:
                            message.csharp_namespace = reader.string();
                            break;
                        case 999:
                            if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                                message.uninterpreted_option = [];
                            message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        case 50000:
                            message[".force_php_generation"] = reader.bool();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FileOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FileOptions} FileOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FileOptions message.
                 * @function verify
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FileOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.java_package != null && message.hasOwnProperty("java_package"))
                        if (!$util.isString(message.java_package))
                            return "java_package: string expected";
                    if (message.java_outer_classname != null && message.hasOwnProperty("java_outer_classname"))
                        if (!$util.isString(message.java_outer_classname))
                            return "java_outer_classname: string expected";
                    if (message.java_multiple_files != null && message.hasOwnProperty("java_multiple_files"))
                        if (typeof message.java_multiple_files !== "boolean")
                            return "java_multiple_files: boolean expected";
                    if (message.java_generate_equals_and_hash != null && message.hasOwnProperty("java_generate_equals_and_hash"))
                        if (typeof message.java_generate_equals_and_hash !== "boolean")
                            return "java_generate_equals_and_hash: boolean expected";
                    if (message.java_string_check_utf8 != null && message.hasOwnProperty("java_string_check_utf8"))
                        if (typeof message.java_string_check_utf8 !== "boolean")
                            return "java_string_check_utf8: boolean expected";
                    if (message.optimize_for != null && message.hasOwnProperty("optimize_for"))
                        switch (message.optimize_for) {
                        default:
                            return "optimize_for: enum value expected";
                        case 1:
                        case 2:
                        case 3:
                            break;
                        }
                    if (message.go_package != null && message.hasOwnProperty("go_package"))
                        if (!$util.isString(message.go_package))
                            return "go_package: string expected";
                    if (message.cc_generic_services != null && message.hasOwnProperty("cc_generic_services"))
                        if (typeof message.cc_generic_services !== "boolean")
                            return "cc_generic_services: boolean expected";
                    if (message.java_generic_services != null && message.hasOwnProperty("java_generic_services"))
                        if (typeof message.java_generic_services !== "boolean")
                            return "java_generic_services: boolean expected";
                    if (message.py_generic_services != null && message.hasOwnProperty("py_generic_services"))
                        if (typeof message.py_generic_services !== "boolean")
                            return "py_generic_services: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.cc_enable_arenas != null && message.hasOwnProperty("cc_enable_arenas"))
                        if (typeof message.cc_enable_arenas !== "boolean")
                            return "cc_enable_arenas: boolean expected";
                    if (message.objc_class_prefix != null && message.hasOwnProperty("objc_class_prefix"))
                        if (!$util.isString(message.objc_class_prefix))
                            return "objc_class_prefix: string expected";
                    if (message.csharp_namespace != null && message.hasOwnProperty("csharp_namespace"))
                        if (!$util.isString(message.csharp_namespace))
                            return "csharp_namespace: string expected";
                    if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                        if (!Array.isArray(message.uninterpreted_option))
                            return "uninterpreted_option: array expected";
                        for (var i = 0; i < message.uninterpreted_option.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                            if (error)
                                return "uninterpreted_option." + error;
                        }
                    }
                    if (message[".force_php_generation"] != null && message.hasOwnProperty(".force_php_generation"))
                        if (typeof message[".force_php_generation"] !== "boolean")
                            return ".force_php_generation: boolean expected";
                    return null;
                };
    
                /**
                 * Creates a FileOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FileOptions} FileOptions
                 */
                FileOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FileOptions)
                        return object;
                    var message = new $root.google.protobuf.FileOptions();
                    if (object.java_package != null)
                        message.java_package = String(object.java_package);
                    if (object.java_outer_classname != null)
                        message.java_outer_classname = String(object.java_outer_classname);
                    if (object.java_multiple_files != null)
                        message.java_multiple_files = Boolean(object.java_multiple_files);
                    if (object.java_generate_equals_and_hash != null)
                        message.java_generate_equals_and_hash = Boolean(object.java_generate_equals_and_hash);
                    if (object.java_string_check_utf8 != null)
                        message.java_string_check_utf8 = Boolean(object.java_string_check_utf8);
                    switch (object.optimize_for) {
                    case "SPEED":
                    case 1:
                        message.optimize_for = 1;
                        break;
                    case "CODE_SIZE":
                    case 2:
                        message.optimize_for = 2;
                        break;
                    case "LITE_RUNTIME":
                    case 3:
                        message.optimize_for = 3;
                        break;
                    }
                    if (object.go_package != null)
                        message.go_package = String(object.go_package);
                    if (object.cc_generic_services != null)
                        message.cc_generic_services = Boolean(object.cc_generic_services);
                    if (object.java_generic_services != null)
                        message.java_generic_services = Boolean(object.java_generic_services);
                    if (object.py_generic_services != null)
                        message.py_generic_services = Boolean(object.py_generic_services);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.cc_enable_arenas != null)
                        message.cc_enable_arenas = Boolean(object.cc_enable_arenas);
                    if (object.objc_class_prefix != null)
                        message.objc_class_prefix = String(object.objc_class_prefix);
                    if (object.csharp_namespace != null)
                        message.csharp_namespace = String(object.csharp_namespace);
                    if (object.uninterpreted_option) {
                        if (!Array.isArray(object.uninterpreted_option))
                            throw TypeError(".google.protobuf.FileOptions.uninterpreted_option: array expected");
                        message.uninterpreted_option = [];
                        for (var i = 0; i < object.uninterpreted_option.length; ++i) {
                            if (typeof object.uninterpreted_option[i] !== "object")
                                throw TypeError(".google.protobuf.FileOptions.uninterpreted_option: object expected");
                            message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                        }
                    }
                    if (object[".force_php_generation"] != null)
                        message[".force_php_generation"] = Boolean(object[".force_php_generation"]);
                    return message;
                };
    
                /**
                 * Creates a plain object from a FileOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.FileOptions} message FileOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FileOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpreted_option = [];
                    if (options.defaults) {
                        object.java_package = "";
                        object.java_outer_classname = "";
                        object.optimize_for = options.enums === String ? "SPEED" : 1;
                        object.java_multiple_files = false;
                        object.go_package = "";
                        object.cc_generic_services = false;
                        object.java_generic_services = false;
                        object.py_generic_services = false;
                        object.java_generate_equals_and_hash = false;
                        object.deprecated = false;
                        object.java_string_check_utf8 = false;
                        object.cc_enable_arenas = false;
                        object.objc_class_prefix = "";
                        object.csharp_namespace = "";
                        object[".force_php_generation"] = false;
                    }
                    if (message.java_package != null && message.hasOwnProperty("java_package"))
                        object.java_package = message.java_package;
                    if (message.java_outer_classname != null && message.hasOwnProperty("java_outer_classname"))
                        object.java_outer_classname = message.java_outer_classname;
                    if (message.optimize_for != null && message.hasOwnProperty("optimize_for"))
                        object.optimize_for = options.enums === String ? $root.google.protobuf.FileOptions.OptimizeMode[message.optimize_for] : message.optimize_for;
                    if (message.java_multiple_files != null && message.hasOwnProperty("java_multiple_files"))
                        object.java_multiple_files = message.java_multiple_files;
                    if (message.go_package != null && message.hasOwnProperty("go_package"))
                        object.go_package = message.go_package;
                    if (message.cc_generic_services != null && message.hasOwnProperty("cc_generic_services"))
                        object.cc_generic_services = message.cc_generic_services;
                    if (message.java_generic_services != null && message.hasOwnProperty("java_generic_services"))
                        object.java_generic_services = message.java_generic_services;
                    if (message.py_generic_services != null && message.hasOwnProperty("py_generic_services"))
                        object.py_generic_services = message.py_generic_services;
                    if (message.java_generate_equals_and_hash != null && message.hasOwnProperty("java_generate_equals_and_hash"))
                        object.java_generate_equals_and_hash = message.java_generate_equals_and_hash;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.java_string_check_utf8 != null && message.hasOwnProperty("java_string_check_utf8"))
                        object.java_string_check_utf8 = message.java_string_check_utf8;
                    if (message.cc_enable_arenas != null && message.hasOwnProperty("cc_enable_arenas"))
                        object.cc_enable_arenas = message.cc_enable_arenas;
                    if (message.objc_class_prefix != null && message.hasOwnProperty("objc_class_prefix"))
                        object.objc_class_prefix = message.objc_class_prefix;
                    if (message.csharp_namespace != null && message.hasOwnProperty("csharp_namespace"))
                        object.csharp_namespace = message.csharp_namespace;
                    if (message.uninterpreted_option && message.uninterpreted_option.length) {
                        object.uninterpreted_option = [];
                        for (var j = 0; j < message.uninterpreted_option.length; ++j)
                            object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                    }
                    if (message[".force_php_generation"] != null && message.hasOwnProperty(".force_php_generation"))
                        object[".force_php_generation"] = message[".force_php_generation"];
                    return object;
                };
    
                /**
                 * Converts this FileOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FileOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * OptimizeMode enum.
                 * @name google.protobuf.FileOptions.OptimizeMode
                 * @enum {string}
                 * @property {number} SPEED=1 SPEED value
                 * @property {number} CODE_SIZE=2 CODE_SIZE value
                 * @property {number} LITE_RUNTIME=3 LITE_RUNTIME value
                 */
                FileOptions.OptimizeMode = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[1] = "SPEED"] = 1;
                    values[valuesById[2] = "CODE_SIZE"] = 2;
                    values[valuesById[3] = "LITE_RUNTIME"] = 3;
                    return values;
                })();
    
                return FileOptions;
            })();
    
            protobuf.MessageOptions = (function() {
    
                /**
                 * Properties of a MessageOptions.
                 * @memberof google.protobuf
                 * @interface IMessageOptions
                 * @property {boolean|null} [message_set_wire_format] MessageOptions message_set_wire_format
                 * @property {boolean|null} [no_standard_descriptor_accessor] MessageOptions no_standard_descriptor_accessor
                 * @property {boolean|null} [deprecated] MessageOptions deprecated
                 * @property {boolean|null} [map_entry] MessageOptions map_entry
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] MessageOptions uninterpreted_option
                 * @property {number|null} [".msgpool_soft_limit"] MessageOptions .msgpool_soft_limit
                 * @property {number|null} [".msgpool_hard_limit"] MessageOptions .msgpool_hard_limit
                 */
    
                /**
                 * Constructs a new MessageOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a MessageOptions.
                 * @implements IMessageOptions
                 * @constructor
                 * @param {google.protobuf.IMessageOptions=} [properties] Properties to set
                 */
                function MessageOptions(properties) {
                    this.uninterpreted_option = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MessageOptions message_set_wire_format.
                 * @member {boolean} message_set_wire_format
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.message_set_wire_format = false;
    
                /**
                 * MessageOptions no_standard_descriptor_accessor.
                 * @member {boolean} no_standard_descriptor_accessor
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.no_standard_descriptor_accessor = false;
    
                /**
                 * MessageOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.deprecated = false;
    
                /**
                 * MessageOptions map_entry.
                 * @member {boolean} map_entry
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.map_entry = false;
    
                /**
                 * MessageOptions uninterpreted_option.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.uninterpreted_option = $util.emptyArray;
    
                /**
                 * MessageOptions .msgpool_soft_limit.
                 * @member {number} .msgpool_soft_limit
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype[".msgpool_soft_limit"] = 32;
    
                /**
                 * MessageOptions .msgpool_hard_limit.
                 * @member {number} .msgpool_hard_limit
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype[".msgpool_hard_limit"] = 384;
    
                /**
                 * Creates a new MessageOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.IMessageOptions=} [properties] Properties to set
                 * @returns {google.protobuf.MessageOptions} MessageOptions instance
                 */
                MessageOptions.create = function create(properties) {
                    return new MessageOptions(properties);
                };
    
                /**
                 * Encodes the specified MessageOptions message. Does not implicitly {@link google.protobuf.MessageOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.IMessageOptions} message MessageOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MessageOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.message_set_wire_format != null && message.hasOwnProperty("message_set_wire_format"))
                        writer.uint32(/* id 1, wireType 0 =*/8).bool(message.message_set_wire_format);
                    if (message.no_standard_descriptor_accessor != null && message.hasOwnProperty("no_standard_descriptor_accessor"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.no_standard_descriptor_accessor);
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                    if (message.map_entry != null && message.hasOwnProperty("map_entry"))
                        writer.uint32(/* id 7, wireType 0 =*/56).bool(message.map_entry);
                    if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                        for (var i = 0; i < message.uninterpreted_option.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".msgpool_soft_limit"] != null && message.hasOwnProperty(".msgpool_soft_limit"))
                        writer.uint32(/* id 50000, wireType 0 =*/400000).int32(message[".msgpool_soft_limit"]);
                    if (message[".msgpool_hard_limit"] != null && message.hasOwnProperty(".msgpool_hard_limit"))
                        writer.uint32(/* id 50001, wireType 0 =*/400008).int32(message[".msgpool_hard_limit"]);
                    return writer;
                };
    
                /**
                 * Encodes the specified MessageOptions message, length delimited. Does not implicitly {@link google.protobuf.MessageOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.IMessageOptions} message MessageOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MessageOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MessageOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.MessageOptions} MessageOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MessageOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MessageOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.message_set_wire_format = reader.bool();
                            break;
                        case 2:
                            message.no_standard_descriptor_accessor = reader.bool();
                            break;
                        case 3:
                            message.deprecated = reader.bool();
                            break;
                        case 7:
                            message.map_entry = reader.bool();
                            break;
                        case 999:
                            if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                                message.uninterpreted_option = [];
                            message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        case 50000:
                            message[".msgpool_soft_limit"] = reader.int32();
                            break;
                        case 50001:
                            message[".msgpool_hard_limit"] = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MessageOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.MessageOptions} MessageOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MessageOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MessageOptions message.
                 * @function verify
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MessageOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.message_set_wire_format != null && message.hasOwnProperty("message_set_wire_format"))
                        if (typeof message.message_set_wire_format !== "boolean")
                            return "message_set_wire_format: boolean expected";
                    if (message.no_standard_descriptor_accessor != null && message.hasOwnProperty("no_standard_descriptor_accessor"))
                        if (typeof message.no_standard_descriptor_accessor !== "boolean")
                            return "no_standard_descriptor_accessor: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.map_entry != null && message.hasOwnProperty("map_entry"))
                        if (typeof message.map_entry !== "boolean")
                            return "map_entry: boolean expected";
                    if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                        if (!Array.isArray(message.uninterpreted_option))
                            return "uninterpreted_option: array expected";
                        for (var i = 0; i < message.uninterpreted_option.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                            if (error)
                                return "uninterpreted_option." + error;
                        }
                    }
                    if (message[".msgpool_soft_limit"] != null && message.hasOwnProperty(".msgpool_soft_limit"))
                        if (!$util.isInteger(message[".msgpool_soft_limit"]))
                            return ".msgpool_soft_limit: integer expected";
                    if (message[".msgpool_hard_limit"] != null && message.hasOwnProperty(".msgpool_hard_limit"))
                        if (!$util.isInteger(message[".msgpool_hard_limit"]))
                            return ".msgpool_hard_limit: integer expected";
                    return null;
                };
    
                /**
                 * Creates a MessageOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.MessageOptions} MessageOptions
                 */
                MessageOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.MessageOptions)
                        return object;
                    var message = new $root.google.protobuf.MessageOptions();
                    if (object.message_set_wire_format != null)
                        message.message_set_wire_format = Boolean(object.message_set_wire_format);
                    if (object.no_standard_descriptor_accessor != null)
                        message.no_standard_descriptor_accessor = Boolean(object.no_standard_descriptor_accessor);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.map_entry != null)
                        message.map_entry = Boolean(object.map_entry);
                    if (object.uninterpreted_option) {
                        if (!Array.isArray(object.uninterpreted_option))
                            throw TypeError(".google.protobuf.MessageOptions.uninterpreted_option: array expected");
                        message.uninterpreted_option = [];
                        for (var i = 0; i < object.uninterpreted_option.length; ++i) {
                            if (typeof object.uninterpreted_option[i] !== "object")
                                throw TypeError(".google.protobuf.MessageOptions.uninterpreted_option: object expected");
                            message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                        }
                    }
                    if (object[".msgpool_soft_limit"] != null)
                        message[".msgpool_soft_limit"] = object[".msgpool_soft_limit"] | 0;
                    if (object[".msgpool_hard_limit"] != null)
                        message[".msgpool_hard_limit"] = object[".msgpool_hard_limit"] | 0;
                    return message;
                };
    
                /**
                 * Creates a plain object from a MessageOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.MessageOptions} message MessageOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MessageOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpreted_option = [];
                    if (options.defaults) {
                        object.message_set_wire_format = false;
                        object.no_standard_descriptor_accessor = false;
                        object.deprecated = false;
                        object.map_entry = false;
                        object[".msgpool_soft_limit"] = 32;
                        object[".msgpool_hard_limit"] = 384;
                    }
                    if (message.message_set_wire_format != null && message.hasOwnProperty("message_set_wire_format"))
                        object.message_set_wire_format = message.message_set_wire_format;
                    if (message.no_standard_descriptor_accessor != null && message.hasOwnProperty("no_standard_descriptor_accessor"))
                        object.no_standard_descriptor_accessor = message.no_standard_descriptor_accessor;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.map_entry != null && message.hasOwnProperty("map_entry"))
                        object.map_entry = message.map_entry;
                    if (message.uninterpreted_option && message.uninterpreted_option.length) {
                        object.uninterpreted_option = [];
                        for (var j = 0; j < message.uninterpreted_option.length; ++j)
                            object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                    }
                    if (message[".msgpool_soft_limit"] != null && message.hasOwnProperty(".msgpool_soft_limit"))
                        object[".msgpool_soft_limit"] = message[".msgpool_soft_limit"];
                    if (message[".msgpool_hard_limit"] != null && message.hasOwnProperty(".msgpool_hard_limit"))
                        object[".msgpool_hard_limit"] = message[".msgpool_hard_limit"];
                    return object;
                };
    
                /**
                 * Converts this MessageOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MessageOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return MessageOptions;
            })();
    
            protobuf.FieldOptions = (function() {
    
                /**
                 * Properties of a FieldOptions.
                 * @memberof google.protobuf
                 * @interface IFieldOptions
                 * @property {google.protobuf.FieldOptions.CType|null} [ctype] FieldOptions ctype
                 * @property {boolean|null} [packed] FieldOptions packed
                 * @property {google.protobuf.FieldOptions.JSType|null} [jstype] FieldOptions jstype
                 * @property {boolean|null} [lazy] FieldOptions lazy
                 * @property {boolean|null} [deprecated] FieldOptions deprecated
                 * @property {boolean|null} [weak] FieldOptions weak
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] FieldOptions uninterpreted_option
                 * @property {string|null} [".description"] FieldOptions .description
                 * @property {boolean|null} [".php_output_always_number"] FieldOptions .php_output_always_number
                 */
    
                /**
                 * Constructs a new FieldOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a FieldOptions.
                 * @implements IFieldOptions
                 * @constructor
                 * @param {google.protobuf.IFieldOptions=} [properties] Properties to set
                 */
                function FieldOptions(properties) {
                    this.uninterpreted_option = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FieldOptions ctype.
                 * @member {google.protobuf.FieldOptions.CType} ctype
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.ctype = 0;
    
                /**
                 * FieldOptions packed.
                 * @member {boolean} packed
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.packed = false;
    
                /**
                 * FieldOptions jstype.
                 * @member {google.protobuf.FieldOptions.JSType} jstype
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.jstype = 0;
    
                /**
                 * FieldOptions lazy.
                 * @member {boolean} lazy
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.lazy = false;
    
                /**
                 * FieldOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.deprecated = false;
    
                /**
                 * FieldOptions weak.
                 * @member {boolean} weak
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.weak = false;
    
                /**
                 * FieldOptions uninterpreted_option.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.uninterpreted_option = $util.emptyArray;
    
                /**
                 * FieldOptions .description.
                 * @member {string} .description
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype[".description"] = "";
    
                /**
                 * FieldOptions .php_output_always_number.
                 * @member {boolean} .php_output_always_number
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype[".php_output_always_number"] = false;
    
                /**
                 * Creates a new FieldOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.IFieldOptions=} [properties] Properties to set
                 * @returns {google.protobuf.FieldOptions} FieldOptions instance
                 */
                FieldOptions.create = function create(properties) {
                    return new FieldOptions(properties);
                };
    
                /**
                 * Encodes the specified FieldOptions message. Does not implicitly {@link google.protobuf.FieldOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.IFieldOptions} message FieldOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.ctype != null && message.hasOwnProperty("ctype"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.ctype);
                    if (message.packed != null && message.hasOwnProperty("packed"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.packed);
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                    if (message.lazy != null && message.hasOwnProperty("lazy"))
                        writer.uint32(/* id 5, wireType 0 =*/40).bool(message.lazy);
                    if (message.jstype != null && message.hasOwnProperty("jstype"))
                        writer.uint32(/* id 6, wireType 0 =*/48).int32(message.jstype);
                    if (message.weak != null && message.hasOwnProperty("weak"))
                        writer.uint32(/* id 10, wireType 0 =*/80).bool(message.weak);
                    if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                        for (var i = 0; i < message.uninterpreted_option.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".description"] != null && message.hasOwnProperty(".description"))
                        writer.uint32(/* id 50000, wireType 2 =*/400002).string(message[".description"]);
                    if (message[".php_output_always_number"] != null && message.hasOwnProperty(".php_output_always_number"))
                        writer.uint32(/* id 50020, wireType 0 =*/400160).bool(message[".php_output_always_number"]);
                    return writer;
                };
    
                /**
                 * Encodes the specified FieldOptions message, length delimited. Does not implicitly {@link google.protobuf.FieldOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.IFieldOptions} message FieldOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FieldOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FieldOptions} FieldOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.ctype = reader.int32();
                            break;
                        case 2:
                            message.packed = reader.bool();
                            break;
                        case 6:
                            message.jstype = reader.int32();
                            break;
                        case 5:
                            message.lazy = reader.bool();
                            break;
                        case 3:
                            message.deprecated = reader.bool();
                            break;
                        case 10:
                            message.weak = reader.bool();
                            break;
                        case 999:
                            if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                                message.uninterpreted_option = [];
                            message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        case 50000:
                            message[".description"] = reader.string();
                            break;
                        case 50020:
                            message[".php_output_always_number"] = reader.bool();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FieldOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FieldOptions} FieldOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FieldOptions message.
                 * @function verify
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FieldOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.ctype != null && message.hasOwnProperty("ctype"))
                        switch (message.ctype) {
                        default:
                            return "ctype: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.packed != null && message.hasOwnProperty("packed"))
                        if (typeof message.packed !== "boolean")
                            return "packed: boolean expected";
                    if (message.jstype != null && message.hasOwnProperty("jstype"))
                        switch (message.jstype) {
                        default:
                            return "jstype: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.lazy != null && message.hasOwnProperty("lazy"))
                        if (typeof message.lazy !== "boolean")
                            return "lazy: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.weak != null && message.hasOwnProperty("weak"))
                        if (typeof message.weak !== "boolean")
                            return "weak: boolean expected";
                    if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                        if (!Array.isArray(message.uninterpreted_option))
                            return "uninterpreted_option: array expected";
                        for (var i = 0; i < message.uninterpreted_option.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                            if (error)
                                return "uninterpreted_option." + error;
                        }
                    }
                    if (message[".description"] != null && message.hasOwnProperty(".description"))
                        if (!$util.isString(message[".description"]))
                            return ".description: string expected";
                    if (message[".php_output_always_number"] != null && message.hasOwnProperty(".php_output_always_number"))
                        if (typeof message[".php_output_always_number"] !== "boolean")
                            return ".php_output_always_number: boolean expected";
                    return null;
                };
    
                /**
                 * Creates a FieldOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FieldOptions} FieldOptions
                 */
                FieldOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FieldOptions)
                        return object;
                    var message = new $root.google.protobuf.FieldOptions();
                    switch (object.ctype) {
                    case "STRING":
                    case 0:
                        message.ctype = 0;
                        break;
                    case "CORD":
                    case 1:
                        message.ctype = 1;
                        break;
                    case "STRING_PIECE":
                    case 2:
                        message.ctype = 2;
                        break;
                    }
                    if (object.packed != null)
                        message.packed = Boolean(object.packed);
                    switch (object.jstype) {
                    case "JS_NORMAL":
                    case 0:
                        message.jstype = 0;
                        break;
                    case "JS_STRING":
                    case 1:
                        message.jstype = 1;
                        break;
                    case "JS_NUMBER":
                    case 2:
                        message.jstype = 2;
                        break;
                    }
                    if (object.lazy != null)
                        message.lazy = Boolean(object.lazy);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.weak != null)
                        message.weak = Boolean(object.weak);
                    if (object.uninterpreted_option) {
                        if (!Array.isArray(object.uninterpreted_option))
                            throw TypeError(".google.protobuf.FieldOptions.uninterpreted_option: array expected");
                        message.uninterpreted_option = [];
                        for (var i = 0; i < object.uninterpreted_option.length; ++i) {
                            if (typeof object.uninterpreted_option[i] !== "object")
                                throw TypeError(".google.protobuf.FieldOptions.uninterpreted_option: object expected");
                            message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                        }
                    }
                    if (object[".description"] != null)
                        message[".description"] = String(object[".description"]);
                    if (object[".php_output_always_number"] != null)
                        message[".php_output_always_number"] = Boolean(object[".php_output_always_number"]);
                    return message;
                };
    
                /**
                 * Creates a plain object from a FieldOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.FieldOptions} message FieldOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FieldOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpreted_option = [];
                    if (options.defaults) {
                        object.ctype = options.enums === String ? "STRING" : 0;
                        object.packed = false;
                        object.deprecated = false;
                        object.lazy = false;
                        object.jstype = options.enums === String ? "JS_NORMAL" : 0;
                        object.weak = false;
                        object[".description"] = "";
                        object[".php_output_always_number"] = false;
                    }
                    if (message.ctype != null && message.hasOwnProperty("ctype"))
                        object.ctype = options.enums === String ? $root.google.protobuf.FieldOptions.CType[message.ctype] : message.ctype;
                    if (message.packed != null && message.hasOwnProperty("packed"))
                        object.packed = message.packed;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.lazy != null && message.hasOwnProperty("lazy"))
                        object.lazy = message.lazy;
                    if (message.jstype != null && message.hasOwnProperty("jstype"))
                        object.jstype = options.enums === String ? $root.google.protobuf.FieldOptions.JSType[message.jstype] : message.jstype;
                    if (message.weak != null && message.hasOwnProperty("weak"))
                        object.weak = message.weak;
                    if (message.uninterpreted_option && message.uninterpreted_option.length) {
                        object.uninterpreted_option = [];
                        for (var j = 0; j < message.uninterpreted_option.length; ++j)
                            object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                    }
                    if (message[".description"] != null && message.hasOwnProperty(".description"))
                        object[".description"] = message[".description"];
                    if (message[".php_output_always_number"] != null && message.hasOwnProperty(".php_output_always_number"))
                        object[".php_output_always_number"] = message[".php_output_always_number"];
                    return object;
                };
    
                /**
                 * Converts this FieldOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FieldOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * CType enum.
                 * @name google.protobuf.FieldOptions.CType
                 * @enum {string}
                 * @property {number} STRING=0 STRING value
                 * @property {number} CORD=1 CORD value
                 * @property {number} STRING_PIECE=2 STRING_PIECE value
                 */
                FieldOptions.CType = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "STRING"] = 0;
                    values[valuesById[1] = "CORD"] = 1;
                    values[valuesById[2] = "STRING_PIECE"] = 2;
                    return values;
                })();
    
                /**
                 * JSType enum.
                 * @name google.protobuf.FieldOptions.JSType
                 * @enum {string}
                 * @property {number} JS_NORMAL=0 JS_NORMAL value
                 * @property {number} JS_STRING=1 JS_STRING value
                 * @property {number} JS_NUMBER=2 JS_NUMBER value
                 */
                FieldOptions.JSType = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "JS_NORMAL"] = 0;
                    values[valuesById[1] = "JS_STRING"] = 1;
                    values[valuesById[2] = "JS_NUMBER"] = 2;
                    return values;
                })();
    
                return FieldOptions;
            })();
    
            protobuf.OneofOptions = (function() {
    
                /**
                 * Properties of an OneofOptions.
                 * @memberof google.protobuf
                 * @interface IOneofOptions
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] OneofOptions uninterpreted_option
                 */
    
                /**
                 * Constructs a new OneofOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an OneofOptions.
                 * @implements IOneofOptions
                 * @constructor
                 * @param {google.protobuf.IOneofOptions=} [properties] Properties to set
                 */
                function OneofOptions(properties) {
                    this.uninterpreted_option = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * OneofOptions uninterpreted_option.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
                 * @memberof google.protobuf.OneofOptions
                 * @instance
                 */
                OneofOptions.prototype.uninterpreted_option = $util.emptyArray;
    
                /**
                 * Creates a new OneofOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {google.protobuf.IOneofOptions=} [properties] Properties to set
                 * @returns {google.protobuf.OneofOptions} OneofOptions instance
                 */
                OneofOptions.create = function create(properties) {
                    return new OneofOptions(properties);
                };
    
                /**
                 * Encodes the specified OneofOptions message. Does not implicitly {@link google.protobuf.OneofOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {google.protobuf.IOneofOptions} message OneofOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                        for (var i = 0; i < message.uninterpreted_option.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified OneofOptions message, length delimited. Does not implicitly {@link google.protobuf.OneofOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {google.protobuf.IOneofOptions} message OneofOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an OneofOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.OneofOptions} OneofOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.OneofOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 999:
                            if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                                message.uninterpreted_option = [];
                            message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an OneofOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.OneofOptions} OneofOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an OneofOptions message.
                 * @function verify
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                OneofOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                        if (!Array.isArray(message.uninterpreted_option))
                            return "uninterpreted_option: array expected";
                        for (var i = 0; i < message.uninterpreted_option.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                            if (error)
                                return "uninterpreted_option." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates an OneofOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.OneofOptions} OneofOptions
                 */
                OneofOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.OneofOptions)
                        return object;
                    var message = new $root.google.protobuf.OneofOptions();
                    if (object.uninterpreted_option) {
                        if (!Array.isArray(object.uninterpreted_option))
                            throw TypeError(".google.protobuf.OneofOptions.uninterpreted_option: array expected");
                        message.uninterpreted_option = [];
                        for (var i = 0; i < object.uninterpreted_option.length; ++i) {
                            if (typeof object.uninterpreted_option[i] !== "object")
                                throw TypeError(".google.protobuf.OneofOptions.uninterpreted_option: object expected");
                            message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an OneofOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {google.protobuf.OneofOptions} message OneofOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                OneofOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpreted_option = [];
                    if (message.uninterpreted_option && message.uninterpreted_option.length) {
                        object.uninterpreted_option = [];
                        for (var j = 0; j < message.uninterpreted_option.length; ++j)
                            object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this OneofOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.OneofOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                OneofOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return OneofOptions;
            })();
    
            protobuf.EnumOptions = (function() {
    
                /**
                 * Properties of an EnumOptions.
                 * @memberof google.protobuf
                 * @interface IEnumOptions
                 * @property {boolean|null} [allow_alias] EnumOptions allow_alias
                 * @property {boolean|null} [deprecated] EnumOptions deprecated
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] EnumOptions uninterpreted_option
                 * @property {string|null} [".enum_description"] EnumOptions .enum_description
                 */
    
                /**
                 * Constructs a new EnumOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumOptions.
                 * @implements IEnumOptions
                 * @constructor
                 * @param {google.protobuf.IEnumOptions=} [properties] Properties to set
                 */
                function EnumOptions(properties) {
                    this.uninterpreted_option = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumOptions allow_alias.
                 * @member {boolean} allow_alias
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype.allow_alias = false;
    
                /**
                 * EnumOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype.deprecated = false;
    
                /**
                 * EnumOptions uninterpreted_option.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype.uninterpreted_option = $util.emptyArray;
    
                /**
                 * EnumOptions .enum_description.
                 * @member {string} .enum_description
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype[".enum_description"] = "";
    
                /**
                 * Creates a new EnumOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.IEnumOptions=} [properties] Properties to set
                 * @returns {google.protobuf.EnumOptions} EnumOptions instance
                 */
                EnumOptions.create = function create(properties) {
                    return new EnumOptions(properties);
                };
    
                /**
                 * Encodes the specified EnumOptions message. Does not implicitly {@link google.protobuf.EnumOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.IEnumOptions} message EnumOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.allow_alias != null && message.hasOwnProperty("allow_alias"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.allow_alias);
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                    if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                        for (var i = 0; i < message.uninterpreted_option.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".enum_description"] != null && message.hasOwnProperty(".enum_description"))
                        writer.uint32(/* id 50000, wireType 2 =*/400002).string(message[".enum_description"]);
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumOptions message, length delimited. Does not implicitly {@link google.protobuf.EnumOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.IEnumOptions} message EnumOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumOptions} EnumOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2:
                            message.allow_alias = reader.bool();
                            break;
                        case 3:
                            message.deprecated = reader.bool();
                            break;
                        case 999:
                            if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                                message.uninterpreted_option = [];
                            message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        case 50000:
                            message[".enum_description"] = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumOptions} EnumOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumOptions message.
                 * @function verify
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.allow_alias != null && message.hasOwnProperty("allow_alias"))
                        if (typeof message.allow_alias !== "boolean")
                            return "allow_alias: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                        if (!Array.isArray(message.uninterpreted_option))
                            return "uninterpreted_option: array expected";
                        for (var i = 0; i < message.uninterpreted_option.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                            if (error)
                                return "uninterpreted_option." + error;
                        }
                    }
                    if (message[".enum_description"] != null && message.hasOwnProperty(".enum_description"))
                        if (!$util.isString(message[".enum_description"]))
                            return ".enum_description: string expected";
                    return null;
                };
    
                /**
                 * Creates an EnumOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumOptions} EnumOptions
                 */
                EnumOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumOptions)
                        return object;
                    var message = new $root.google.protobuf.EnumOptions();
                    if (object.allow_alias != null)
                        message.allow_alias = Boolean(object.allow_alias);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.uninterpreted_option) {
                        if (!Array.isArray(object.uninterpreted_option))
                            throw TypeError(".google.protobuf.EnumOptions.uninterpreted_option: array expected");
                        message.uninterpreted_option = [];
                        for (var i = 0; i < object.uninterpreted_option.length; ++i) {
                            if (typeof object.uninterpreted_option[i] !== "object")
                                throw TypeError(".google.protobuf.EnumOptions.uninterpreted_option: object expected");
                            message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                        }
                    }
                    if (object[".enum_description"] != null)
                        message[".enum_description"] = String(object[".enum_description"]);
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.EnumOptions} message EnumOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpreted_option = [];
                    if (options.defaults) {
                        object.allow_alias = false;
                        object.deprecated = false;
                        object[".enum_description"] = "";
                    }
                    if (message.allow_alias != null && message.hasOwnProperty("allow_alias"))
                        object.allow_alias = message.allow_alias;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.uninterpreted_option && message.uninterpreted_option.length) {
                        object.uninterpreted_option = [];
                        for (var j = 0; j < message.uninterpreted_option.length; ++j)
                            object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                    }
                    if (message[".enum_description"] != null && message.hasOwnProperty(".enum_description"))
                        object[".enum_description"] = message[".enum_description"];
                    return object;
                };
    
                /**
                 * Converts this EnumOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return EnumOptions;
            })();
    
            protobuf.EnumValueOptions = (function() {
    
                /**
                 * Properties of an EnumValueOptions.
                 * @memberof google.protobuf
                 * @interface IEnumValueOptions
                 * @property {boolean|null} [deprecated] EnumValueOptions deprecated
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] EnumValueOptions uninterpreted_option
                 * @property {string|null} [".enum_value_description"] EnumValueOptions .enum_value_description
                 */
    
                /**
                 * Constructs a new EnumValueOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumValueOptions.
                 * @implements IEnumValueOptions
                 * @constructor
                 * @param {google.protobuf.IEnumValueOptions=} [properties] Properties to set
                 */
                function EnumValueOptions(properties) {
                    this.uninterpreted_option = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumValueOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.EnumValueOptions
                 * @instance
                 */
                EnumValueOptions.prototype.deprecated = false;
    
                /**
                 * EnumValueOptions uninterpreted_option.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
                 * @memberof google.protobuf.EnumValueOptions
                 * @instance
                 */
                EnumValueOptions.prototype.uninterpreted_option = $util.emptyArray;
    
                /**
                 * EnumValueOptions .enum_value_description.
                 * @member {string} .enum_value_description
                 * @memberof google.protobuf.EnumValueOptions
                 * @instance
                 */
                EnumValueOptions.prototype[".enum_value_description"] = "";
    
                /**
                 * Creates a new EnumValueOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.IEnumValueOptions=} [properties] Properties to set
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions instance
                 */
                EnumValueOptions.create = function create(properties) {
                    return new EnumValueOptions(properties);
                };
    
                /**
                 * Encodes the specified EnumValueOptions message. Does not implicitly {@link google.protobuf.EnumValueOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.IEnumValueOptions} message EnumValueOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        writer.uint32(/* id 1, wireType 0 =*/8).bool(message.deprecated);
                    if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                        for (var i = 0; i < message.uninterpreted_option.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".enum_value_description"] != null && message.hasOwnProperty(".enum_value_description"))
                        writer.uint32(/* id 50000, wireType 2 =*/400002).string(message[".enum_value_description"]);
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumValueOptions message, length delimited. Does not implicitly {@link google.protobuf.EnumValueOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.IEnumValueOptions} message EnumValueOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumValueOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumValueOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.deprecated = reader.bool();
                            break;
                        case 999:
                            if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                                message.uninterpreted_option = [];
                            message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        case 50000:
                            message[".enum_value_description"] = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumValueOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumValueOptions message.
                 * @function verify
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumValueOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                        if (!Array.isArray(message.uninterpreted_option))
                            return "uninterpreted_option: array expected";
                        for (var i = 0; i < message.uninterpreted_option.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                            if (error)
                                return "uninterpreted_option." + error;
                        }
                    }
                    if (message[".enum_value_description"] != null && message.hasOwnProperty(".enum_value_description"))
                        if (!$util.isString(message[".enum_value_description"]))
                            return ".enum_value_description: string expected";
                    return null;
                };
    
                /**
                 * Creates an EnumValueOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
                 */
                EnumValueOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumValueOptions)
                        return object;
                    var message = new $root.google.protobuf.EnumValueOptions();
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.uninterpreted_option) {
                        if (!Array.isArray(object.uninterpreted_option))
                            throw TypeError(".google.protobuf.EnumValueOptions.uninterpreted_option: array expected");
                        message.uninterpreted_option = [];
                        for (var i = 0; i < object.uninterpreted_option.length; ++i) {
                            if (typeof object.uninterpreted_option[i] !== "object")
                                throw TypeError(".google.protobuf.EnumValueOptions.uninterpreted_option: object expected");
                            message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                        }
                    }
                    if (object[".enum_value_description"] != null)
                        message[".enum_value_description"] = String(object[".enum_value_description"]);
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumValueOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.EnumValueOptions} message EnumValueOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumValueOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpreted_option = [];
                    if (options.defaults) {
                        object.deprecated = false;
                        object[".enum_value_description"] = "";
                    }
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.uninterpreted_option && message.uninterpreted_option.length) {
                        object.uninterpreted_option = [];
                        for (var j = 0; j < message.uninterpreted_option.length; ++j)
                            object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                    }
                    if (message[".enum_value_description"] != null && message.hasOwnProperty(".enum_value_description"))
                        object[".enum_value_description"] = message[".enum_value_description"];
                    return object;
                };
    
                /**
                 * Converts this EnumValueOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumValueOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumValueOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return EnumValueOptions;
            })();
    
            protobuf.ServiceOptions = (function() {
    
                /**
                 * Properties of a ServiceOptions.
                 * @memberof google.protobuf
                 * @interface IServiceOptions
                 * @property {boolean|null} [deprecated] ServiceOptions deprecated
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] ServiceOptions uninterpreted_option
                 * @property {string|null} [".service_description"] ServiceOptions .service_description
                 * @property {EProtoExecutionSite|null} [".service_execution_site"] ServiceOptions .service_execution_site
                 */
    
                /**
                 * Constructs a new ServiceOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a ServiceOptions.
                 * @implements IServiceOptions
                 * @constructor
                 * @param {google.protobuf.IServiceOptions=} [properties] Properties to set
                 */
                function ServiceOptions(properties) {
                    this.uninterpreted_option = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ServiceOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 */
                ServiceOptions.prototype.deprecated = false;
    
                /**
                 * ServiceOptions uninterpreted_option.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 */
                ServiceOptions.prototype.uninterpreted_option = $util.emptyArray;
    
                /**
                 * ServiceOptions .service_description.
                 * @member {string} .service_description
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 */
                ServiceOptions.prototype[".service_description"] = "";
    
                /**
                 * ServiceOptions .service_execution_site.
                 * @member {EProtoExecutionSite} .service_execution_site
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 */
                ServiceOptions.prototype[".service_execution_site"] = 0;
    
                /**
                 * Creates a new ServiceOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.IServiceOptions=} [properties] Properties to set
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions instance
                 */
                ServiceOptions.create = function create(properties) {
                    return new ServiceOptions(properties);
                };
    
                /**
                 * Encodes the specified ServiceOptions message. Does not implicitly {@link google.protobuf.ServiceOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.IServiceOptions} message ServiceOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        writer.uint32(/* id 33, wireType 0 =*/264).bool(message.deprecated);
                    if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                        for (var i = 0; i < message.uninterpreted_option.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".service_description"] != null && message.hasOwnProperty(".service_description"))
                        writer.uint32(/* id 50000, wireType 2 =*/400002).string(message[".service_description"]);
                    if (message[".service_execution_site"] != null && message.hasOwnProperty(".service_execution_site"))
                        writer.uint32(/* id 50008, wireType 0 =*/400064).int32(message[".service_execution_site"]);
                    return writer;
                };
    
                /**
                 * Encodes the specified ServiceOptions message, length delimited. Does not implicitly {@link google.protobuf.ServiceOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.IServiceOptions} message ServiceOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ServiceOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ServiceOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 33:
                            message.deprecated = reader.bool();
                            break;
                        case 999:
                            if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                                message.uninterpreted_option = [];
                            message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        case 50000:
                            message[".service_description"] = reader.string();
                            break;
                        case 50008:
                            message[".service_execution_site"] = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ServiceOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ServiceOptions message.
                 * @function verify
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ServiceOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                        if (!Array.isArray(message.uninterpreted_option))
                            return "uninterpreted_option: array expected";
                        for (var i = 0; i < message.uninterpreted_option.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                            if (error)
                                return "uninterpreted_option." + error;
                        }
                    }
                    if (message[".service_description"] != null && message.hasOwnProperty(".service_description"))
                        if (!$util.isString(message[".service_description"]))
                            return ".service_description: string expected";
                    if (message[".service_execution_site"] != null && message.hasOwnProperty(".service_execution_site"))
                        switch (message[".service_execution_site"]) {
                        default:
                            return ".service_execution_site: enum value expected";
                        case 0:
                        case 2:
                            break;
                        }
                    return null;
                };
    
                /**
                 * Creates a ServiceOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions
                 */
                ServiceOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.ServiceOptions)
                        return object;
                    var message = new $root.google.protobuf.ServiceOptions();
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.uninterpreted_option) {
                        if (!Array.isArray(object.uninterpreted_option))
                            throw TypeError(".google.protobuf.ServiceOptions.uninterpreted_option: array expected");
                        message.uninterpreted_option = [];
                        for (var i = 0; i < object.uninterpreted_option.length; ++i) {
                            if (typeof object.uninterpreted_option[i] !== "object")
                                throw TypeError(".google.protobuf.ServiceOptions.uninterpreted_option: object expected");
                            message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                        }
                    }
                    if (object[".service_description"] != null)
                        message[".service_description"] = String(object[".service_description"]);
                    switch (object[".service_execution_site"]) {
                    case "k_EProtoExecutionSiteUnknown":
                    case 0:
                        message[".service_execution_site"] = 0;
                        break;
                    case "k_EProtoExecutionSiteSteamClient":
                    case 2:
                        message[".service_execution_site"] = 2;
                        break;
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a ServiceOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.ServiceOptions} message ServiceOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ServiceOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpreted_option = [];
                    if (options.defaults) {
                        object.deprecated = false;
                        object[".service_description"] = "";
                        object[".service_execution_site"] = options.enums === String ? "k_EProtoExecutionSiteUnknown" : 0;
                    }
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.uninterpreted_option && message.uninterpreted_option.length) {
                        object.uninterpreted_option = [];
                        for (var j = 0; j < message.uninterpreted_option.length; ++j)
                            object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                    }
                    if (message[".service_description"] != null && message.hasOwnProperty(".service_description"))
                        object[".service_description"] = message[".service_description"];
                    if (message[".service_execution_site"] != null && message.hasOwnProperty(".service_execution_site"))
                        object[".service_execution_site"] = options.enums === String ? $root.EProtoExecutionSite[message[".service_execution_site"]] : message[".service_execution_site"];
                    return object;
                };
    
                /**
                 * Converts this ServiceOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ServiceOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ServiceOptions;
            })();
    
            protobuf.MethodOptions = (function() {
    
                /**
                 * Properties of a MethodOptions.
                 * @memberof google.protobuf
                 * @interface IMethodOptions
                 * @property {boolean|null} [deprecated] MethodOptions deprecated
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] MethodOptions uninterpreted_option
                 * @property {string|null} [".method_description"] MethodOptions .method_description
                 */
    
                /**
                 * Constructs a new MethodOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a MethodOptions.
                 * @implements IMethodOptions
                 * @constructor
                 * @param {google.protobuf.IMethodOptions=} [properties] Properties to set
                 */
                function MethodOptions(properties) {
                    this.uninterpreted_option = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MethodOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype.deprecated = false;
    
                /**
                 * MethodOptions uninterpreted_option.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype.uninterpreted_option = $util.emptyArray;
    
                /**
                 * MethodOptions .method_description.
                 * @member {string} .method_description
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype[".method_description"] = "";
    
                /**
                 * Creates a new MethodOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.IMethodOptions=} [properties] Properties to set
                 * @returns {google.protobuf.MethodOptions} MethodOptions instance
                 */
                MethodOptions.create = function create(properties) {
                    return new MethodOptions(properties);
                };
    
                /**
                 * Encodes the specified MethodOptions message. Does not implicitly {@link google.protobuf.MethodOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.IMethodOptions} message MethodOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        writer.uint32(/* id 33, wireType 0 =*/264).bool(message.deprecated);
                    if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                        for (var i = 0; i < message.uninterpreted_option.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".method_description"] != null && message.hasOwnProperty(".method_description"))
                        writer.uint32(/* id 50000, wireType 2 =*/400002).string(message[".method_description"]);
                    return writer;
                };
    
                /**
                 * Encodes the specified MethodOptions message, length delimited. Does not implicitly {@link google.protobuf.MethodOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.IMethodOptions} message MethodOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MethodOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.MethodOptions} MethodOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MethodOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 33:
                            message.deprecated = reader.bool();
                            break;
                        case 999:
                            if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                                message.uninterpreted_option = [];
                            message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        case 50000:
                            message[".method_description"] = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MethodOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.MethodOptions} MethodOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MethodOptions message.
                 * @function verify
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MethodOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                        if (!Array.isArray(message.uninterpreted_option))
                            return "uninterpreted_option: array expected";
                        for (var i = 0; i < message.uninterpreted_option.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                            if (error)
                                return "uninterpreted_option." + error;
                        }
                    }
                    if (message[".method_description"] != null && message.hasOwnProperty(".method_description"))
                        if (!$util.isString(message[".method_description"]))
                            return ".method_description: string expected";
                    return null;
                };
    
                /**
                 * Creates a MethodOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.MethodOptions} MethodOptions
                 */
                MethodOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.MethodOptions)
                        return object;
                    var message = new $root.google.protobuf.MethodOptions();
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.uninterpreted_option) {
                        if (!Array.isArray(object.uninterpreted_option))
                            throw TypeError(".google.protobuf.MethodOptions.uninterpreted_option: array expected");
                        message.uninterpreted_option = [];
                        for (var i = 0; i < object.uninterpreted_option.length; ++i) {
                            if (typeof object.uninterpreted_option[i] !== "object")
                                throw TypeError(".google.protobuf.MethodOptions.uninterpreted_option: object expected");
                            message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                        }
                    }
                    if (object[".method_description"] != null)
                        message[".method_description"] = String(object[".method_description"]);
                    return message;
                };
    
                /**
                 * Creates a plain object from a MethodOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.MethodOptions} message MethodOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MethodOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpreted_option = [];
                    if (options.defaults) {
                        object.deprecated = false;
                        object[".method_description"] = "";
                    }
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.uninterpreted_option && message.uninterpreted_option.length) {
                        object.uninterpreted_option = [];
                        for (var j = 0; j < message.uninterpreted_option.length; ++j)
                            object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                    }
                    if (message[".method_description"] != null && message.hasOwnProperty(".method_description"))
                        object[".method_description"] = message[".method_description"];
                    return object;
                };
    
                /**
                 * Converts this MethodOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MethodOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return MethodOptions;
            })();
    
            protobuf.UninterpretedOption = (function() {
    
                /**
                 * Properties of an UninterpretedOption.
                 * @memberof google.protobuf
                 * @interface IUninterpretedOption
                 * @property {Array.<google.protobuf.UninterpretedOption.INamePart>|null} [name] UninterpretedOption name
                 * @property {string|null} [identifier_value] UninterpretedOption identifier_value
                 * @property {number|Long|null} [positive_int_value] UninterpretedOption positive_int_value
                 * @property {number|Long|null} [negative_int_value] UninterpretedOption negative_int_value
                 * @property {number|null} [double_value] UninterpretedOption double_value
                 * @property {Uint8Array|null} [string_value] UninterpretedOption string_value
                 * @property {string|null} [aggregate_value] UninterpretedOption aggregate_value
                 */
    
                /**
                 * Constructs a new UninterpretedOption.
                 * @memberof google.protobuf
                 * @classdesc Represents an UninterpretedOption.
                 * @implements IUninterpretedOption
                 * @constructor
                 * @param {google.protobuf.IUninterpretedOption=} [properties] Properties to set
                 */
                function UninterpretedOption(properties) {
                    this.name = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * UninterpretedOption name.
                 * @member {Array.<google.protobuf.UninterpretedOption.INamePart>} name
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.name = $util.emptyArray;
    
                /**
                 * UninterpretedOption identifier_value.
                 * @member {string} identifier_value
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.identifier_value = "";
    
                /**
                 * UninterpretedOption positive_int_value.
                 * @member {number|Long} positive_int_value
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.positive_int_value = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * UninterpretedOption negative_int_value.
                 * @member {number|Long} negative_int_value
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.negative_int_value = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * UninterpretedOption double_value.
                 * @member {number} double_value
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.double_value = 0;
    
                /**
                 * UninterpretedOption string_value.
                 * @member {Uint8Array} string_value
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.string_value = $util.newBuffer([]);
    
                /**
                 * UninterpretedOption aggregate_value.
                 * @member {string} aggregate_value
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.aggregate_value = "";
    
                /**
                 * Creates a new UninterpretedOption instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.IUninterpretedOption=} [properties] Properties to set
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption instance
                 */
                UninterpretedOption.create = function create(properties) {
                    return new UninterpretedOption(properties);
                };
    
                /**
                 * Encodes the specified UninterpretedOption message. Does not implicitly {@link google.protobuf.UninterpretedOption.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.IUninterpretedOption} message UninterpretedOption message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UninterpretedOption.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && message.name.length)
                        for (var i = 0; i < message.name.length; ++i)
                            $root.google.protobuf.UninterpretedOption.NamePart.encode(message.name[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.identifier_value != null && message.hasOwnProperty("identifier_value"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.identifier_value);
                    if (message.positive_int_value != null && message.hasOwnProperty("positive_int_value"))
                        writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.positive_int_value);
                    if (message.negative_int_value != null && message.hasOwnProperty("negative_int_value"))
                        writer.uint32(/* id 5, wireType 0 =*/40).int64(message.negative_int_value);
                    if (message.double_value != null && message.hasOwnProperty("double_value"))
                        writer.uint32(/* id 6, wireType 1 =*/49).double(message.double_value);
                    if (message.string_value != null && message.hasOwnProperty("string_value"))
                        writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.string_value);
                    if (message.aggregate_value != null && message.hasOwnProperty("aggregate_value"))
                        writer.uint32(/* id 8, wireType 2 =*/66).string(message.aggregate_value);
                    return writer;
                };
    
                /**
                 * Encodes the specified UninterpretedOption message, length delimited. Does not implicitly {@link google.protobuf.UninterpretedOption.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.IUninterpretedOption} message UninterpretedOption message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UninterpretedOption.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an UninterpretedOption message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UninterpretedOption.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.UninterpretedOption();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2:
                            if (!(message.name && message.name.length))
                                message.name = [];
                            message.name.push($root.google.protobuf.UninterpretedOption.NamePart.decode(reader, reader.uint32()));
                            break;
                        case 3:
                            message.identifier_value = reader.string();
                            break;
                        case 4:
                            message.positive_int_value = reader.uint64();
                            break;
                        case 5:
                            message.negative_int_value = reader.int64();
                            break;
                        case 6:
                            message.double_value = reader.double();
                            break;
                        case 7:
                            message.string_value = reader.bytes();
                            break;
                        case 8:
                            message.aggregate_value = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an UninterpretedOption message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UninterpretedOption.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an UninterpretedOption message.
                 * @function verify
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                UninterpretedOption.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name")) {
                        if (!Array.isArray(message.name))
                            return "name: array expected";
                        for (var i = 0; i < message.name.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.NamePart.verify(message.name[i]);
                            if (error)
                                return "name." + error;
                        }
                    }
                    if (message.identifier_value != null && message.hasOwnProperty("identifier_value"))
                        if (!$util.isString(message.identifier_value))
                            return "identifier_value: string expected";
                    if (message.positive_int_value != null && message.hasOwnProperty("positive_int_value"))
                        if (!$util.isInteger(message.positive_int_value) && !(message.positive_int_value && $util.isInteger(message.positive_int_value.low) && $util.isInteger(message.positive_int_value.high)))
                            return "positive_int_value: integer|Long expected";
                    if (message.negative_int_value != null && message.hasOwnProperty("negative_int_value"))
                        if (!$util.isInteger(message.negative_int_value) && !(message.negative_int_value && $util.isInteger(message.negative_int_value.low) && $util.isInteger(message.negative_int_value.high)))
                            return "negative_int_value: integer|Long expected";
                    if (message.double_value != null && message.hasOwnProperty("double_value"))
                        if (typeof message.double_value !== "number")
                            return "double_value: number expected";
                    if (message.string_value != null && message.hasOwnProperty("string_value"))
                        if (!(message.string_value && typeof message.string_value.length === "number" || $util.isString(message.string_value)))
                            return "string_value: buffer expected";
                    if (message.aggregate_value != null && message.hasOwnProperty("aggregate_value"))
                        if (!$util.isString(message.aggregate_value))
                            return "aggregate_value: string expected";
                    return null;
                };
    
                /**
                 * Creates an UninterpretedOption message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
                 */
                UninterpretedOption.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.UninterpretedOption)
                        return object;
                    var message = new $root.google.protobuf.UninterpretedOption();
                    if (object.name) {
                        if (!Array.isArray(object.name))
                            throw TypeError(".google.protobuf.UninterpretedOption.name: array expected");
                        message.name = [];
                        for (var i = 0; i < object.name.length; ++i) {
                            if (typeof object.name[i] !== "object")
                                throw TypeError(".google.protobuf.UninterpretedOption.name: object expected");
                            message.name[i] = $root.google.protobuf.UninterpretedOption.NamePart.fromObject(object.name[i]);
                        }
                    }
                    if (object.identifier_value != null)
                        message.identifier_value = String(object.identifier_value);
                    if (object.positive_int_value != null)
                        if ($util.Long)
                            (message.positive_int_value = $util.Long.fromValue(object.positive_int_value)).unsigned = true;
                        else if (typeof object.positive_int_value === "string")
                            message.positive_int_value = parseInt(object.positive_int_value, 10);
                        else if (typeof object.positive_int_value === "number")
                            message.positive_int_value = object.positive_int_value;
                        else if (typeof object.positive_int_value === "object")
                            message.positive_int_value = new $util.LongBits(object.positive_int_value.low >>> 0, object.positive_int_value.high >>> 0).toNumber(true);
                    if (object.negative_int_value != null)
                        if ($util.Long)
                            (message.negative_int_value = $util.Long.fromValue(object.negative_int_value)).unsigned = false;
                        else if (typeof object.negative_int_value === "string")
                            message.negative_int_value = parseInt(object.negative_int_value, 10);
                        else if (typeof object.negative_int_value === "number")
                            message.negative_int_value = object.negative_int_value;
                        else if (typeof object.negative_int_value === "object")
                            message.negative_int_value = new $util.LongBits(object.negative_int_value.low >>> 0, object.negative_int_value.high >>> 0).toNumber();
                    if (object.double_value != null)
                        message.double_value = Number(object.double_value);
                    if (object.string_value != null)
                        if (typeof object.string_value === "string")
                            $util.base64.decode(object.string_value, message.string_value = $util.newBuffer($util.base64.length(object.string_value)), 0);
                        else if (object.string_value.length)
                            message.string_value = object.string_value;
                    if (object.aggregate_value != null)
                        message.aggregate_value = String(object.aggregate_value);
                    return message;
                };
    
                /**
                 * Creates a plain object from an UninterpretedOption message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.UninterpretedOption} message UninterpretedOption
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                UninterpretedOption.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.name = [];
                    if (options.defaults) {
                        object.identifier_value = "";
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.positive_int_value = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.positive_int_value = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.negative_int_value = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.negative_int_value = options.longs === String ? "0" : 0;
                        object.double_value = 0;
                        if (options.bytes === String)
                            object.string_value = "";
                        else {
                            object.string_value = [];
                            if (options.bytes !== Array)
                                object.string_value = $util.newBuffer(object.string_value);
                        }
                        object.aggregate_value = "";
                    }
                    if (message.name && message.name.length) {
                        object.name = [];
                        for (var j = 0; j < message.name.length; ++j)
                            object.name[j] = $root.google.protobuf.UninterpretedOption.NamePart.toObject(message.name[j], options);
                    }
                    if (message.identifier_value != null && message.hasOwnProperty("identifier_value"))
                        object.identifier_value = message.identifier_value;
                    if (message.positive_int_value != null && message.hasOwnProperty("positive_int_value"))
                        if (typeof message.positive_int_value === "number")
                            object.positive_int_value = options.longs === String ? String(message.positive_int_value) : message.positive_int_value;
                        else
                            object.positive_int_value = options.longs === String ? $util.Long.prototype.toString.call(message.positive_int_value) : options.longs === Number ? new $util.LongBits(message.positive_int_value.low >>> 0, message.positive_int_value.high >>> 0).toNumber(true) : message.positive_int_value;
                    if (message.negative_int_value != null && message.hasOwnProperty("negative_int_value"))
                        if (typeof message.negative_int_value === "number")
                            object.negative_int_value = options.longs === String ? String(message.negative_int_value) : message.negative_int_value;
                        else
                            object.negative_int_value = options.longs === String ? $util.Long.prototype.toString.call(message.negative_int_value) : options.longs === Number ? new $util.LongBits(message.negative_int_value.low >>> 0, message.negative_int_value.high >>> 0).toNumber() : message.negative_int_value;
                    if (message.double_value != null && message.hasOwnProperty("double_value"))
                        object.double_value = options.json && !isFinite(message.double_value) ? String(message.double_value) : message.double_value;
                    if (message.string_value != null && message.hasOwnProperty("string_value"))
                        object.string_value = options.bytes === String ? $util.base64.encode(message.string_value, 0, message.string_value.length) : options.bytes === Array ? Array.prototype.slice.call(message.string_value) : message.string_value;
                    if (message.aggregate_value != null && message.hasOwnProperty("aggregate_value"))
                        object.aggregate_value = message.aggregate_value;
                    return object;
                };
    
                /**
                 * Converts this UninterpretedOption to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                UninterpretedOption.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                UninterpretedOption.NamePart = (function() {
    
                    /**
                     * Properties of a NamePart.
                     * @memberof google.protobuf.UninterpretedOption
                     * @interface INamePart
                     * @property {string} name_part NamePart name_part
                     * @property {boolean} is_extension NamePart is_extension
                     */
    
                    /**
                     * Constructs a new NamePart.
                     * @memberof google.protobuf.UninterpretedOption
                     * @classdesc Represents a NamePart.
                     * @implements INamePart
                     * @constructor
                     * @param {google.protobuf.UninterpretedOption.INamePart=} [properties] Properties to set
                     */
                    function NamePart(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * NamePart name_part.
                     * @member {string} name_part
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @instance
                     */
                    NamePart.prototype.name_part = "";
    
                    /**
                     * NamePart is_extension.
                     * @member {boolean} is_extension
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @instance
                     */
                    NamePart.prototype.is_extension = false;
    
                    /**
                     * Creates a new NamePart instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.INamePart=} [properties] Properties to set
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart instance
                     */
                    NamePart.create = function create(properties) {
                        return new NamePart(properties);
                    };
    
                    /**
                     * Encodes the specified NamePart message. Does not implicitly {@link google.protobuf.UninterpretedOption.NamePart.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.INamePart} message NamePart message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NamePart.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name_part);
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.is_extension);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified NamePart message, length delimited. Does not implicitly {@link google.protobuf.UninterpretedOption.NamePart.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.INamePart} message NamePart message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NamePart.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a NamePart message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NamePart.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.UninterpretedOption.NamePart();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.name_part = reader.string();
                                break;
                            case 2:
                                message.is_extension = reader.bool();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        if (!message.hasOwnProperty("name_part"))
                            throw $util.ProtocolError("missing required 'name_part'", { instance: message });
                        if (!message.hasOwnProperty("is_extension"))
                            throw $util.ProtocolError("missing required 'is_extension'", { instance: message });
                        return message;
                    };
    
                    /**
                     * Decodes a NamePart message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NamePart.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a NamePart message.
                     * @function verify
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    NamePart.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (!$util.isString(message.name_part))
                            return "name_part: string expected";
                        if (typeof message.is_extension !== "boolean")
                            return "is_extension: boolean expected";
                        return null;
                    };
    
                    /**
                     * Creates a NamePart message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                     */
                    NamePart.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.UninterpretedOption.NamePart)
                            return object;
                        var message = new $root.google.protobuf.UninterpretedOption.NamePart();
                        if (object.name_part != null)
                            message.name_part = String(object.name_part);
                        if (object.is_extension != null)
                            message.is_extension = Boolean(object.is_extension);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a NamePart message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.NamePart} message NamePart
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    NamePart.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.name_part = "";
                            object.is_extension = false;
                        }
                        if (message.name_part != null && message.hasOwnProperty("name_part"))
                            object.name_part = message.name_part;
                        if (message.is_extension != null && message.hasOwnProperty("is_extension"))
                            object.is_extension = message.is_extension;
                        return object;
                    };
    
                    /**
                     * Converts this NamePart to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    NamePart.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return NamePart;
                })();
    
                return UninterpretedOption;
            })();
    
            protobuf.SourceCodeInfo = (function() {
    
                /**
                 * Properties of a SourceCodeInfo.
                 * @memberof google.protobuf
                 * @interface ISourceCodeInfo
                 * @property {Array.<google.protobuf.SourceCodeInfo.ILocation>|null} [location] SourceCodeInfo location
                 */
    
                /**
                 * Constructs a new SourceCodeInfo.
                 * @memberof google.protobuf
                 * @classdesc Represents a SourceCodeInfo.
                 * @implements ISourceCodeInfo
                 * @constructor
                 * @param {google.protobuf.ISourceCodeInfo=} [properties] Properties to set
                 */
                function SourceCodeInfo(properties) {
                    this.location = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * SourceCodeInfo location.
                 * @member {Array.<google.protobuf.SourceCodeInfo.ILocation>} location
                 * @memberof google.protobuf.SourceCodeInfo
                 * @instance
                 */
                SourceCodeInfo.prototype.location = $util.emptyArray;
    
                /**
                 * Creates a new SourceCodeInfo instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.ISourceCodeInfo=} [properties] Properties to set
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo instance
                 */
                SourceCodeInfo.create = function create(properties) {
                    return new SourceCodeInfo(properties);
                };
    
                /**
                 * Encodes the specified SourceCodeInfo message. Does not implicitly {@link google.protobuf.SourceCodeInfo.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.ISourceCodeInfo} message SourceCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SourceCodeInfo.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.location != null && message.location.length)
                        for (var i = 0; i < message.location.length; ++i)
                            $root.google.protobuf.SourceCodeInfo.Location.encode(message.location[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified SourceCodeInfo message, length delimited. Does not implicitly {@link google.protobuf.SourceCodeInfo.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.ISourceCodeInfo} message SourceCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SourceCodeInfo.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a SourceCodeInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SourceCodeInfo.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.SourceCodeInfo();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.location && message.location.length))
                                message.location = [];
                            message.location.push($root.google.protobuf.SourceCodeInfo.Location.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a SourceCodeInfo message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SourceCodeInfo.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a SourceCodeInfo message.
                 * @function verify
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                SourceCodeInfo.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.location != null && message.hasOwnProperty("location")) {
                        if (!Array.isArray(message.location))
                            return "location: array expected";
                        for (var i = 0; i < message.location.length; ++i) {
                            var error = $root.google.protobuf.SourceCodeInfo.Location.verify(message.location[i]);
                            if (error)
                                return "location." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a SourceCodeInfo message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
                 */
                SourceCodeInfo.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.SourceCodeInfo)
                        return object;
                    var message = new $root.google.protobuf.SourceCodeInfo();
                    if (object.location) {
                        if (!Array.isArray(object.location))
                            throw TypeError(".google.protobuf.SourceCodeInfo.location: array expected");
                        message.location = [];
                        for (var i = 0; i < object.location.length; ++i) {
                            if (typeof object.location[i] !== "object")
                                throw TypeError(".google.protobuf.SourceCodeInfo.location: object expected");
                            message.location[i] = $root.google.protobuf.SourceCodeInfo.Location.fromObject(object.location[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a SourceCodeInfo message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.SourceCodeInfo} message SourceCodeInfo
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                SourceCodeInfo.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.location = [];
                    if (message.location && message.location.length) {
                        object.location = [];
                        for (var j = 0; j < message.location.length; ++j)
                            object.location[j] = $root.google.protobuf.SourceCodeInfo.Location.toObject(message.location[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this SourceCodeInfo to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.SourceCodeInfo
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                SourceCodeInfo.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                SourceCodeInfo.Location = (function() {
    
                    /**
                     * Properties of a Location.
                     * @memberof google.protobuf.SourceCodeInfo
                     * @interface ILocation
                     * @property {Array.<number>|null} [path] Location path
                     * @property {Array.<number>|null} [span] Location span
                     * @property {string|null} [leading_comments] Location leading_comments
                     * @property {string|null} [trailing_comments] Location trailing_comments
                     * @property {Array.<string>|null} [leading_detached_comments] Location leading_detached_comments
                     */
    
                    /**
                     * Constructs a new Location.
                     * @memberof google.protobuf.SourceCodeInfo
                     * @classdesc Represents a Location.
                     * @implements ILocation
                     * @constructor
                     * @param {google.protobuf.SourceCodeInfo.ILocation=} [properties] Properties to set
                     */
                    function Location(properties) {
                        this.path = [];
                        this.span = [];
                        this.leading_detached_comments = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Location path.
                     * @member {Array.<number>} path
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.path = $util.emptyArray;
    
                    /**
                     * Location span.
                     * @member {Array.<number>} span
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.span = $util.emptyArray;
    
                    /**
                     * Location leading_comments.
                     * @member {string} leading_comments
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.leading_comments = "";
    
                    /**
                     * Location trailing_comments.
                     * @member {string} trailing_comments
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.trailing_comments = "";
    
                    /**
                     * Location leading_detached_comments.
                     * @member {Array.<string>} leading_detached_comments
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.leading_detached_comments = $util.emptyArray;
    
                    /**
                     * Creates a new Location instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.ILocation=} [properties] Properties to set
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location instance
                     */
                    Location.create = function create(properties) {
                        return new Location(properties);
                    };
    
                    /**
                     * Encodes the specified Location message. Does not implicitly {@link google.protobuf.SourceCodeInfo.Location.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.ILocation} message Location message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Location.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && message.path.length) {
                            writer.uint32(/* id 1, wireType 2 =*/10).fork();
                            for (var i = 0; i < message.path.length; ++i)
                                writer.int32(message.path[i]);
                            writer.ldelim();
                        }
                        if (message.span != null && message.span.length) {
                            writer.uint32(/* id 2, wireType 2 =*/18).fork();
                            for (var i = 0; i < message.span.length; ++i)
                                writer.int32(message.span[i]);
                            writer.ldelim();
                        }
                        if (message.leading_comments != null && message.hasOwnProperty("leading_comments"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.leading_comments);
                        if (message.trailing_comments != null && message.hasOwnProperty("trailing_comments"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.trailing_comments);
                        if (message.leading_detached_comments != null && message.leading_detached_comments.length)
                            for (var i = 0; i < message.leading_detached_comments.length; ++i)
                                writer.uint32(/* id 6, wireType 2 =*/50).string(message.leading_detached_comments[i]);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Location message, length delimited. Does not implicitly {@link google.protobuf.SourceCodeInfo.Location.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.ILocation} message Location message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Location.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Location message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Location.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.SourceCodeInfo.Location();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.path && message.path.length))
                                    message.path = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.path.push(reader.int32());
                                } else
                                    message.path.push(reader.int32());
                                break;
                            case 2:
                                if (!(message.span && message.span.length))
                                    message.span = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.span.push(reader.int32());
                                } else
                                    message.span.push(reader.int32());
                                break;
                            case 3:
                                message.leading_comments = reader.string();
                                break;
                            case 4:
                                message.trailing_comments = reader.string();
                                break;
                            case 6:
                                if (!(message.leading_detached_comments && message.leading_detached_comments.length))
                                    message.leading_detached_comments = [];
                                message.leading_detached_comments.push(reader.string());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Location message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Location.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Location message.
                     * @function verify
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Location.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path")) {
                            if (!Array.isArray(message.path))
                                return "path: array expected";
                            for (var i = 0; i < message.path.length; ++i)
                                if (!$util.isInteger(message.path[i]))
                                    return "path: integer[] expected";
                        }
                        if (message.span != null && message.hasOwnProperty("span")) {
                            if (!Array.isArray(message.span))
                                return "span: array expected";
                            for (var i = 0; i < message.span.length; ++i)
                                if (!$util.isInteger(message.span[i]))
                                    return "span: integer[] expected";
                        }
                        if (message.leading_comments != null && message.hasOwnProperty("leading_comments"))
                            if (!$util.isString(message.leading_comments))
                                return "leading_comments: string expected";
                        if (message.trailing_comments != null && message.hasOwnProperty("trailing_comments"))
                            if (!$util.isString(message.trailing_comments))
                                return "trailing_comments: string expected";
                        if (message.leading_detached_comments != null && message.hasOwnProperty("leading_detached_comments")) {
                            if (!Array.isArray(message.leading_detached_comments))
                                return "leading_detached_comments: array expected";
                            for (var i = 0; i < message.leading_detached_comments.length; ++i)
                                if (!$util.isString(message.leading_detached_comments[i]))
                                    return "leading_detached_comments: string[] expected";
                        }
                        return null;
                    };
    
                    /**
                     * Creates a Location message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location
                     */
                    Location.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.SourceCodeInfo.Location)
                            return object;
                        var message = new $root.google.protobuf.SourceCodeInfo.Location();
                        if (object.path) {
                            if (!Array.isArray(object.path))
                                throw TypeError(".google.protobuf.SourceCodeInfo.Location.path: array expected");
                            message.path = [];
                            for (var i = 0; i < object.path.length; ++i)
                                message.path[i] = object.path[i] | 0;
                        }
                        if (object.span) {
                            if (!Array.isArray(object.span))
                                throw TypeError(".google.protobuf.SourceCodeInfo.Location.span: array expected");
                            message.span = [];
                            for (var i = 0; i < object.span.length; ++i)
                                message.span[i] = object.span[i] | 0;
                        }
                        if (object.leading_comments != null)
                            message.leading_comments = String(object.leading_comments);
                        if (object.trailing_comments != null)
                            message.trailing_comments = String(object.trailing_comments);
                        if (object.leading_detached_comments) {
                            if (!Array.isArray(object.leading_detached_comments))
                                throw TypeError(".google.protobuf.SourceCodeInfo.Location.leading_detached_comments: array expected");
                            message.leading_detached_comments = [];
                            for (var i = 0; i < object.leading_detached_comments.length; ++i)
                                message.leading_detached_comments[i] = String(object.leading_detached_comments[i]);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Location message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.Location} message Location
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Location.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults) {
                            object.path = [];
                            object.span = [];
                            object.leading_detached_comments = [];
                        }
                        if (options.defaults) {
                            object.leading_comments = "";
                            object.trailing_comments = "";
                        }
                        if (message.path && message.path.length) {
                            object.path = [];
                            for (var j = 0; j < message.path.length; ++j)
                                object.path[j] = message.path[j];
                        }
                        if (message.span && message.span.length) {
                            object.span = [];
                            for (var j = 0; j < message.span.length; ++j)
                                object.span[j] = message.span[j];
                        }
                        if (message.leading_comments != null && message.hasOwnProperty("leading_comments"))
                            object.leading_comments = message.leading_comments;
                        if (message.trailing_comments != null && message.hasOwnProperty("trailing_comments"))
                            object.trailing_comments = message.trailing_comments;
                        if (message.leading_detached_comments && message.leading_detached_comments.length) {
                            object.leading_detached_comments = [];
                            for (var j = 0; j < message.leading_detached_comments.length; ++j)
                                object.leading_detached_comments[j] = message.leading_detached_comments[j];
                        }
                        return object;
                    };
    
                    /**
                     * Converts this Location to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Location.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return Location;
                })();
    
                return SourceCodeInfo;
            })();
    
            protobuf.GeneratedCodeInfo = (function() {
    
                /**
                 * Properties of a GeneratedCodeInfo.
                 * @memberof google.protobuf
                 * @interface IGeneratedCodeInfo
                 * @property {Array.<google.protobuf.GeneratedCodeInfo.IAnnotation>|null} [annotation] GeneratedCodeInfo annotation
                 */
    
                /**
                 * Constructs a new GeneratedCodeInfo.
                 * @memberof google.protobuf
                 * @classdesc Represents a GeneratedCodeInfo.
                 * @implements IGeneratedCodeInfo
                 * @constructor
                 * @param {google.protobuf.IGeneratedCodeInfo=} [properties] Properties to set
                 */
                function GeneratedCodeInfo(properties) {
                    this.annotation = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * GeneratedCodeInfo annotation.
                 * @member {Array.<google.protobuf.GeneratedCodeInfo.IAnnotation>} annotation
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @instance
                 */
                GeneratedCodeInfo.prototype.annotation = $util.emptyArray;
    
                /**
                 * Creates a new GeneratedCodeInfo instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {google.protobuf.IGeneratedCodeInfo=} [properties] Properties to set
                 * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo instance
                 */
                GeneratedCodeInfo.create = function create(properties) {
                    return new GeneratedCodeInfo(properties);
                };
    
                /**
                 * Encodes the specified GeneratedCodeInfo message. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {google.protobuf.IGeneratedCodeInfo} message GeneratedCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GeneratedCodeInfo.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.annotation != null && message.annotation.length)
                        for (var i = 0; i < message.annotation.length; ++i)
                            $root.google.protobuf.GeneratedCodeInfo.Annotation.encode(message.annotation[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified GeneratedCodeInfo message, length delimited. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {google.protobuf.IGeneratedCodeInfo} message GeneratedCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GeneratedCodeInfo.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a GeneratedCodeInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GeneratedCodeInfo.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.GeneratedCodeInfo();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.annotation && message.annotation.length))
                                message.annotation = [];
                            message.annotation.push($root.google.protobuf.GeneratedCodeInfo.Annotation.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a GeneratedCodeInfo message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GeneratedCodeInfo.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a GeneratedCodeInfo message.
                 * @function verify
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GeneratedCodeInfo.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.annotation != null && message.hasOwnProperty("annotation")) {
                        if (!Array.isArray(message.annotation))
                            return "annotation: array expected";
                        for (var i = 0; i < message.annotation.length; ++i) {
                            var error = $root.google.protobuf.GeneratedCodeInfo.Annotation.verify(message.annotation[i]);
                            if (error)
                                return "annotation." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a GeneratedCodeInfo message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
                 */
                GeneratedCodeInfo.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.GeneratedCodeInfo)
                        return object;
                    var message = new $root.google.protobuf.GeneratedCodeInfo();
                    if (object.annotation) {
                        if (!Array.isArray(object.annotation))
                            throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: array expected");
                        message.annotation = [];
                        for (var i = 0; i < object.annotation.length; ++i) {
                            if (typeof object.annotation[i] !== "object")
                                throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: object expected");
                            message.annotation[i] = $root.google.protobuf.GeneratedCodeInfo.Annotation.fromObject(object.annotation[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a GeneratedCodeInfo message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {google.protobuf.GeneratedCodeInfo} message GeneratedCodeInfo
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GeneratedCodeInfo.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.annotation = [];
                    if (message.annotation && message.annotation.length) {
                        object.annotation = [];
                        for (var j = 0; j < message.annotation.length; ++j)
                            object.annotation[j] = $root.google.protobuf.GeneratedCodeInfo.Annotation.toObject(message.annotation[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this GeneratedCodeInfo to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GeneratedCodeInfo.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                GeneratedCodeInfo.Annotation = (function() {
    
                    /**
                     * Properties of an Annotation.
                     * @memberof google.protobuf.GeneratedCodeInfo
                     * @interface IAnnotation
                     * @property {Array.<number>|null} [path] Annotation path
                     * @property {string|null} [source_file] Annotation source_file
                     * @property {number|null} [begin] Annotation begin
                     * @property {number|null} [end] Annotation end
                     */
    
                    /**
                     * Constructs a new Annotation.
                     * @memberof google.protobuf.GeneratedCodeInfo
                     * @classdesc Represents an Annotation.
                     * @implements IAnnotation
                     * @constructor
                     * @param {google.protobuf.GeneratedCodeInfo.IAnnotation=} [properties] Properties to set
                     */
                    function Annotation(properties) {
                        this.path = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Annotation path.
                     * @member {Array.<number>} path
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.path = $util.emptyArray;
    
                    /**
                     * Annotation source_file.
                     * @member {string} source_file
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.source_file = "";
    
                    /**
                     * Annotation begin.
                     * @member {number} begin
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.begin = 0;
    
                    /**
                     * Annotation end.
                     * @member {number} end
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.end = 0;
    
                    /**
                     * Creates a new Annotation instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {google.protobuf.GeneratedCodeInfo.IAnnotation=} [properties] Properties to set
                     * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation instance
                     */
                    Annotation.create = function create(properties) {
                        return new Annotation(properties);
                    };
    
                    /**
                     * Encodes the specified Annotation message. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.Annotation.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {google.protobuf.GeneratedCodeInfo.IAnnotation} message Annotation message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Annotation.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && message.path.length) {
                            writer.uint32(/* id 1, wireType 2 =*/10).fork();
                            for (var i = 0; i < message.path.length; ++i)
                                writer.int32(message.path[i]);
                            writer.ldelim();
                        }
                        if (message.source_file != null && message.hasOwnProperty("source_file"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.source_file);
                        if (message.begin != null && message.hasOwnProperty("begin"))
                            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.begin);
                        if (message.end != null && message.hasOwnProperty("end"))
                            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.end);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Annotation message, length delimited. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.Annotation.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {google.protobuf.GeneratedCodeInfo.IAnnotation} message Annotation message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Annotation.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an Annotation message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Annotation.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.GeneratedCodeInfo.Annotation();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.path && message.path.length))
                                    message.path = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.path.push(reader.int32());
                                } else
                                    message.path.push(reader.int32());
                                break;
                            case 2:
                                message.source_file = reader.string();
                                break;
                            case 3:
                                message.begin = reader.int32();
                                break;
                            case 4:
                                message.end = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an Annotation message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Annotation.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an Annotation message.
                     * @function verify
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Annotation.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path")) {
                            if (!Array.isArray(message.path))
                                return "path: array expected";
                            for (var i = 0; i < message.path.length; ++i)
                                if (!$util.isInteger(message.path[i]))
                                    return "path: integer[] expected";
                        }
                        if (message.source_file != null && message.hasOwnProperty("source_file"))
                            if (!$util.isString(message.source_file))
                                return "source_file: string expected";
                        if (message.begin != null && message.hasOwnProperty("begin"))
                            if (!$util.isInteger(message.begin))
                                return "begin: integer expected";
                        if (message.end != null && message.hasOwnProperty("end"))
                            if (!$util.isInteger(message.end))
                                return "end: integer expected";
                        return null;
                    };
    
                    /**
                     * Creates an Annotation message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                     */
                    Annotation.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.GeneratedCodeInfo.Annotation)
                            return object;
                        var message = new $root.google.protobuf.GeneratedCodeInfo.Annotation();
                        if (object.path) {
                            if (!Array.isArray(object.path))
                                throw TypeError(".google.protobuf.GeneratedCodeInfo.Annotation.path: array expected");
                            message.path = [];
                            for (var i = 0; i < object.path.length; ++i)
                                message.path[i] = object.path[i] | 0;
                        }
                        if (object.source_file != null)
                            message.source_file = String(object.source_file);
                        if (object.begin != null)
                            message.begin = object.begin | 0;
                        if (object.end != null)
                            message.end = object.end | 0;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an Annotation message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {google.protobuf.GeneratedCodeInfo.Annotation} message Annotation
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Annotation.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.path = [];
                        if (options.defaults) {
                            object.source_file = "";
                            object.begin = 0;
                            object.end = 0;
                        }
                        if (message.path && message.path.length) {
                            object.path = [];
                            for (var j = 0; j < message.path.length; ++j)
                                object.path[j] = message.path[j];
                        }
                        if (message.source_file != null && message.hasOwnProperty("source_file"))
                            object.source_file = message.source_file;
                        if (message.begin != null && message.hasOwnProperty("begin"))
                            object.begin = message.begin;
                        if (message.end != null && message.hasOwnProperty("end"))
                            object.end = message.end;
                        return object;
                    };
    
                    /**
                     * Converts this Annotation to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Annotation.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return Annotation;
                })();
    
                return GeneratedCodeInfo;
            })();
    
            return protobuf;
        })();
    
        return google;
    })();
    
    /**
     * EPublishedFileQueryType enum.
     * @exports EPublishedFileQueryType
     * @enum {string}
     * @property {number} k_PublishedFileQueryType_RankedByVote=0 k_PublishedFileQueryType_RankedByVote value
     * @property {number} k_PublishedFileQueryType_RankedByPublicationDate=1 k_PublishedFileQueryType_RankedByPublicationDate value
     * @property {number} k_PublishedFileQueryType_AcceptedForGameRankedByAcceptanceDate=2 k_PublishedFileQueryType_AcceptedForGameRankedByAcceptanceDate value
     * @property {number} k_PublishedFileQueryType_RankedByTrend=3 k_PublishedFileQueryType_RankedByTrend value
     * @property {number} k_PublishedFileQueryType_FavoritedByFriendsRankedByPublicationDate=4 k_PublishedFileQueryType_FavoritedByFriendsRankedByPublicationDate value
     * @property {number} k_PublishedFileQueryType_CreatedByFriendsRankedByPublicationDate=5 k_PublishedFileQueryType_CreatedByFriendsRankedByPublicationDate value
     * @property {number} k_PublishedFileQueryType_RankedByNumTimesReported=6 k_PublishedFileQueryType_RankedByNumTimesReported value
     * @property {number} k_PublishedFileQueryType_CreatedByFollowedUsersRankedByPublicationDate=7 k_PublishedFileQueryType_CreatedByFollowedUsersRankedByPublicationDate value
     * @property {number} k_PublishedFileQueryType_NotYetRated=8 k_PublishedFileQueryType_NotYetRated value
     * @property {number} k_PublishedFileQueryType_RankedByTotalUniqueSubscriptions=9 k_PublishedFileQueryType_RankedByTotalUniqueSubscriptions value
     * @property {number} k_PublishedFileQueryType_RankedByTotalVotesAsc=10 k_PublishedFileQueryType_RankedByTotalVotesAsc value
     * @property {number} k_PublishedFileQueryType_RankedByVotesUp=11 k_PublishedFileQueryType_RankedByVotesUp value
     * @property {number} k_PublishedFileQueryType_RankedByTextSearch=12 k_PublishedFileQueryType_RankedByTextSearch value
     * @property {number} k_PublishedFileQueryType_RankedByPlaytimeTrend=13 k_PublishedFileQueryType_RankedByPlaytimeTrend value
     * @property {number} k_PublishedFileQueryType_RankedByTotalPlaytime=14 k_PublishedFileQueryType_RankedByTotalPlaytime value
     * @property {number} k_PublishedFileQueryType_RankedByAveragePlaytimeTrend=15 k_PublishedFileQueryType_RankedByAveragePlaytimeTrend value
     * @property {number} k_PublishedFileQueryType_RankedByLifetimeAveragePlaytime=16 k_PublishedFileQueryType_RankedByLifetimeAveragePlaytime value
     * @property {number} k_PublishedFileQueryType_RankedByPlaytimeSessionsTrend=17 k_PublishedFileQueryType_RankedByPlaytimeSessionsTrend value
     * @property {number} k_PublishedFileQueryType_RankedByLifetimePlaytimeSessions=18 k_PublishedFileQueryType_RankedByLifetimePlaytimeSessions value
     * @property {number} k_PublishedFileQueryType_RankedByInappropriateContentRating=19 k_PublishedFileQueryType_RankedByInappropriateContentRating value
     * @property {number} k_PublishedFileQueryType_RankedByBanContentCheck=20 k_PublishedFileQueryType_RankedByBanContentCheck value
     * @property {number} k_PublishedFileQueryType_RankedByLastUpdatedDate=21 k_PublishedFileQueryType_RankedByLastUpdatedDate value
     */
    $root.EPublishedFileQueryType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "k_PublishedFileQueryType_RankedByVote"] = 0;
        values[valuesById[1] = "k_PublishedFileQueryType_RankedByPublicationDate"] = 1;
        values[valuesById[2] = "k_PublishedFileQueryType_AcceptedForGameRankedByAcceptanceDate"] = 2;
        values[valuesById[3] = "k_PublishedFileQueryType_RankedByTrend"] = 3;
        values[valuesById[4] = "k_PublishedFileQueryType_FavoritedByFriendsRankedByPublicationDate"] = 4;
        values[valuesById[5] = "k_PublishedFileQueryType_CreatedByFriendsRankedByPublicationDate"] = 5;
        values[valuesById[6] = "k_PublishedFileQueryType_RankedByNumTimesReported"] = 6;
        values[valuesById[7] = "k_PublishedFileQueryType_CreatedByFollowedUsersRankedByPublicationDate"] = 7;
        values[valuesById[8] = "k_PublishedFileQueryType_NotYetRated"] = 8;
        values[valuesById[9] = "k_PublishedFileQueryType_RankedByTotalUniqueSubscriptions"] = 9;
        values[valuesById[10] = "k_PublishedFileQueryType_RankedByTotalVotesAsc"] = 10;
        values[valuesById[11] = "k_PublishedFileQueryType_RankedByVotesUp"] = 11;
        values[valuesById[12] = "k_PublishedFileQueryType_RankedByTextSearch"] = 12;
        values[valuesById[13] = "k_PublishedFileQueryType_RankedByPlaytimeTrend"] = 13;
        values[valuesById[14] = "k_PublishedFileQueryType_RankedByTotalPlaytime"] = 14;
        values[valuesById[15] = "k_PublishedFileQueryType_RankedByAveragePlaytimeTrend"] = 15;
        values[valuesById[16] = "k_PublishedFileQueryType_RankedByLifetimeAveragePlaytime"] = 16;
        values[valuesById[17] = "k_PublishedFileQueryType_RankedByPlaytimeSessionsTrend"] = 17;
        values[valuesById[18] = "k_PublishedFileQueryType_RankedByLifetimePlaytimeSessions"] = 18;
        values[valuesById[19] = "k_PublishedFileQueryType_RankedByInappropriateContentRating"] = 19;
        values[valuesById[20] = "k_PublishedFileQueryType_RankedByBanContentCheck"] = 20;
        values[valuesById[21] = "k_PublishedFileQueryType_RankedByLastUpdatedDate"] = 21;
        return values;
    })();
    
    /**
     * EPublishedFileInappropriateProvider enum.
     * @exports EPublishedFileInappropriateProvider
     * @enum {string}
     * @property {number} k_EPublishedFileInappropriateProvider_Invalid=0 k_EPublishedFileInappropriateProvider_Invalid value
     * @property {number} k_EPublishedFileInappropriateProvider_Google=1 k_EPublishedFileInappropriateProvider_Google value
     * @property {number} k_EPublishedFileInappropriateProvider_Amazon=2 k_EPublishedFileInappropriateProvider_Amazon value
     */
    $root.EPublishedFileInappropriateProvider = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "k_EPublishedFileInappropriateProvider_Invalid"] = 0;
        values[valuesById[1] = "k_EPublishedFileInappropriateProvider_Google"] = 1;
        values[valuesById[2] = "k_EPublishedFileInappropriateProvider_Amazon"] = 2;
        return values;
    })();
    
    /**
     * EPublishedFileInappropriateResult enum.
     * @exports EPublishedFileInappropriateResult
     * @enum {string}
     * @property {number} k_EPublishedFileInappropriateResult_NotScanned=0 k_EPublishedFileInappropriateResult_NotScanned value
     * @property {number} k_EPublishedFileInappropriateResult_VeryUnlikely=1 k_EPublishedFileInappropriateResult_VeryUnlikely value
     * @property {number} k_EPublishedFileInappropriateResult_Unlikely=30 k_EPublishedFileInappropriateResult_Unlikely value
     * @property {number} k_EPublishedFileInappropriateResult_Possible=50 k_EPublishedFileInappropriateResult_Possible value
     * @property {number} k_EPublishedFileInappropriateResult_Likely=75 k_EPublishedFileInappropriateResult_Likely value
     * @property {number} k_EPublishedFileInappropriateResult_VeryLikely=100 k_EPublishedFileInappropriateResult_VeryLikely value
     */
    $root.EPublishedFileInappropriateResult = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "k_EPublishedFileInappropriateResult_NotScanned"] = 0;
        values[valuesById[1] = "k_EPublishedFileInappropriateResult_VeryUnlikely"] = 1;
        values[valuesById[30] = "k_EPublishedFileInappropriateResult_Unlikely"] = 30;
        values[valuesById[50] = "k_EPublishedFileInappropriateResult_Possible"] = 50;
        values[valuesById[75] = "k_EPublishedFileInappropriateResult_Likely"] = 75;
        values[valuesById[100] = "k_EPublishedFileInappropriateResult_VeryLikely"] = 100;
        return values;
    })();
    
    /**
     * EPersonaStateFlag enum.
     * @exports EPersonaStateFlag
     * @enum {string}
     * @property {number} k_EPersonaStateFlag_HasRichPresence=1 k_EPersonaStateFlag_HasRichPresence value
     * @property {number} k_EPersonaStateFlag_InJoinableGame=2 k_EPersonaStateFlag_InJoinableGame value
     * @property {number} k_EPersonaStateFlag_Golden=4 k_EPersonaStateFlag_Golden value
     * @property {number} k_EPersonaStateFlag_RemotePlayTogether=8 k_EPersonaStateFlag_RemotePlayTogether value
     * @property {number} k_EPersonaStateFlag_ClientTypeWeb=256 k_EPersonaStateFlag_ClientTypeWeb value
     * @property {number} k_EPersonaStateFlag_ClientTypeMobile=512 k_EPersonaStateFlag_ClientTypeMobile value
     * @property {number} k_EPersonaStateFlag_ClientTypeTenfoot=1024 k_EPersonaStateFlag_ClientTypeTenfoot value
     * @property {number} k_EPersonaStateFlag_ClientTypeVR=2048 k_EPersonaStateFlag_ClientTypeVR value
     * @property {number} k_EPersonaStateFlag_LaunchTypeGamepad=4096 k_EPersonaStateFlag_LaunchTypeGamepad value
     * @property {number} k_EPersonaStateFlag_LaunchTypeCompatTool=8192 k_EPersonaStateFlag_LaunchTypeCompatTool value
     */
    $root.EPersonaStateFlag = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "k_EPersonaStateFlag_HasRichPresence"] = 1;
        values[valuesById[2] = "k_EPersonaStateFlag_InJoinableGame"] = 2;
        values[valuesById[4] = "k_EPersonaStateFlag_Golden"] = 4;
        values[valuesById[8] = "k_EPersonaStateFlag_RemotePlayTogether"] = 8;
        values[valuesById[256] = "k_EPersonaStateFlag_ClientTypeWeb"] = 256;
        values[valuesById[512] = "k_EPersonaStateFlag_ClientTypeMobile"] = 512;
        values[valuesById[1024] = "k_EPersonaStateFlag_ClientTypeTenfoot"] = 1024;
        values[valuesById[2048] = "k_EPersonaStateFlag_ClientTypeVR"] = 2048;
        values[valuesById[4096] = "k_EPersonaStateFlag_LaunchTypeGamepad"] = 4096;
        values[valuesById[8192] = "k_EPersonaStateFlag_LaunchTypeCompatTool"] = 8192;
        return values;
    })();
    
    /**
     * EContentCheckProvider enum.
     * @exports EContentCheckProvider
     * @enum {string}
     * @property {number} k_EContentCheckProvider_Invalid=0 k_EContentCheckProvider_Invalid value
     * @property {number} k_EContentCheckProvider_Google=1 k_EContentCheckProvider_Google value
     * @property {number} k_EContentCheckProvider_Amazon=2 k_EContentCheckProvider_Amazon value
     * @property {number} k_EContentCheckProvider_Local=3 k_EContentCheckProvider_Local value
     */
    $root.EContentCheckProvider = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "k_EContentCheckProvider_Invalid"] = 0;
        values[valuesById[1] = "k_EContentCheckProvider_Google"] = 1;
        values[valuesById[2] = "k_EContentCheckProvider_Amazon"] = 2;
        values[valuesById[3] = "k_EContentCheckProvider_Local"] = 3;
        return values;
    })();
    
    /**
     * EBanContentCheckResult enum.
     * @exports EBanContentCheckResult
     * @enum {string}
     * @property {number} k_EBanContentCheckResult_NotScanned=0 k_EBanContentCheckResult_NotScanned value
     * @property {number} k_EBanContentCheckResult_Reset=1 k_EBanContentCheckResult_Reset value
     * @property {number} k_EBanContentCheckResult_NeedsChecking=2 k_EBanContentCheckResult_NeedsChecking value
     * @property {number} k_EBanContentCheckResult_VeryUnlikely=5 k_EBanContentCheckResult_VeryUnlikely value
     * @property {number} k_EBanContentCheckResult_Unlikely=30 k_EBanContentCheckResult_Unlikely value
     * @property {number} k_EBanContentCheckResult_Possible=50 k_EBanContentCheckResult_Possible value
     * @property {number} k_EBanContentCheckResult_Likely=75 k_EBanContentCheckResult_Likely value
     * @property {number} k_EBanContentCheckResult_VeryLikely=100 k_EBanContentCheckResult_VeryLikely value
     */
    $root.EBanContentCheckResult = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "k_EBanContentCheckResult_NotScanned"] = 0;
        values[valuesById[1] = "k_EBanContentCheckResult_Reset"] = 1;
        values[valuesById[2] = "k_EBanContentCheckResult_NeedsChecking"] = 2;
        values[valuesById[5] = "k_EBanContentCheckResult_VeryUnlikely"] = 5;
        values[valuesById[30] = "k_EBanContentCheckResult_Unlikely"] = 30;
        values[valuesById[50] = "k_EBanContentCheckResult_Possible"] = 50;
        values[valuesById[75] = "k_EBanContentCheckResult_Likely"] = 75;
        values[valuesById[100] = "k_EBanContentCheckResult_VeryLikely"] = 100;
        return values;
    })();
    
    /**
     * EProfileCustomizationType enum.
     * @exports EProfileCustomizationType
     * @enum {string}
     * @property {number} k_EProfileCustomizationTypeInvalid=0 k_EProfileCustomizationTypeInvalid value
     * @property {number} k_EProfileCustomizationTypeRareAchievementShowcase=1 k_EProfileCustomizationTypeRareAchievementShowcase value
     * @property {number} k_EProfileCustomizationTypeGameCollector=2 k_EProfileCustomizationTypeGameCollector value
     * @property {number} k_EProfileCustomizationTypeItemShowcase=3 k_EProfileCustomizationTypeItemShowcase value
     * @property {number} k_EProfileCustomizationTypeTradeShowcase=4 k_EProfileCustomizationTypeTradeShowcase value
     * @property {number} k_EProfileCustomizationTypeBadges=5 k_EProfileCustomizationTypeBadges value
     * @property {number} k_EProfileCustomizationTypeFavoriteGame=6 k_EProfileCustomizationTypeFavoriteGame value
     * @property {number} k_EProfileCustomizationTypeScreenshotShowcase=7 k_EProfileCustomizationTypeScreenshotShowcase value
     * @property {number} k_EProfileCustomizationTypeCustomText=8 k_EProfileCustomizationTypeCustomText value
     * @property {number} k_EProfileCustomizationTypeFavoriteGroup=9 k_EProfileCustomizationTypeFavoriteGroup value
     * @property {number} k_EProfileCustomizationTypeRecommendation=10 k_EProfileCustomizationTypeRecommendation value
     * @property {number} k_EProfileCustomizationTypeWorkshopItem=11 k_EProfileCustomizationTypeWorkshopItem value
     * @property {number} k_EProfileCustomizationTypeMyWorkshop=12 k_EProfileCustomizationTypeMyWorkshop value
     * @property {number} k_EProfileCustomizationTypeArtworkShowcase=13 k_EProfileCustomizationTypeArtworkShowcase value
     * @property {number} k_EProfileCustomizationTypeVideoShowcase=14 k_EProfileCustomizationTypeVideoShowcase value
     * @property {number} k_EProfileCustomizationTypeGuides=15 k_EProfileCustomizationTypeGuides value
     * @property {number} k_EProfileCustomizationTypeMyGuides=16 k_EProfileCustomizationTypeMyGuides value
     * @property {number} k_EProfileCustomizationTypeAchievements=17 k_EProfileCustomizationTypeAchievements value
     * @property {number} k_EProfileCustomizationTypeGreenlight=18 k_EProfileCustomizationTypeGreenlight value
     * @property {number} k_EProfileCustomizationTypeMyGreenlight=19 k_EProfileCustomizationTypeMyGreenlight value
     * @property {number} k_EProfileCustomizationTypeSalien=20 k_EProfileCustomizationTypeSalien value
     * @property {number} k_EProfileCustomizationTypeLoyaltyRewardReactions=21 k_EProfileCustomizationTypeLoyaltyRewardReactions value
     * @property {number} k_EProfileCustomizationTypeSingleArtworkShowcase=22 k_EProfileCustomizationTypeSingleArtworkShowcase value
     * @property {number} k_EProfileCustomizationTypeAchievementsCompletionist=23 k_EProfileCustomizationTypeAchievementsCompletionist value
     */
    $root.EProfileCustomizationType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "k_EProfileCustomizationTypeInvalid"] = 0;
        values[valuesById[1] = "k_EProfileCustomizationTypeRareAchievementShowcase"] = 1;
        values[valuesById[2] = "k_EProfileCustomizationTypeGameCollector"] = 2;
        values[valuesById[3] = "k_EProfileCustomizationTypeItemShowcase"] = 3;
        values[valuesById[4] = "k_EProfileCustomizationTypeTradeShowcase"] = 4;
        values[valuesById[5] = "k_EProfileCustomizationTypeBadges"] = 5;
        values[valuesById[6] = "k_EProfileCustomizationTypeFavoriteGame"] = 6;
        values[valuesById[7] = "k_EProfileCustomizationTypeScreenshotShowcase"] = 7;
        values[valuesById[8] = "k_EProfileCustomizationTypeCustomText"] = 8;
        values[valuesById[9] = "k_EProfileCustomizationTypeFavoriteGroup"] = 9;
        values[valuesById[10] = "k_EProfileCustomizationTypeRecommendation"] = 10;
        values[valuesById[11] = "k_EProfileCustomizationTypeWorkshopItem"] = 11;
        values[valuesById[12] = "k_EProfileCustomizationTypeMyWorkshop"] = 12;
        values[valuesById[13] = "k_EProfileCustomizationTypeArtworkShowcase"] = 13;
        values[valuesById[14] = "k_EProfileCustomizationTypeVideoShowcase"] = 14;
        values[valuesById[15] = "k_EProfileCustomizationTypeGuides"] = 15;
        values[valuesById[16] = "k_EProfileCustomizationTypeMyGuides"] = 16;
        values[valuesById[17] = "k_EProfileCustomizationTypeAchievements"] = 17;
        values[valuesById[18] = "k_EProfileCustomizationTypeGreenlight"] = 18;
        values[valuesById[19] = "k_EProfileCustomizationTypeMyGreenlight"] = 19;
        values[valuesById[20] = "k_EProfileCustomizationTypeSalien"] = 20;
        values[valuesById[21] = "k_EProfileCustomizationTypeLoyaltyRewardReactions"] = 21;
        values[valuesById[22] = "k_EProfileCustomizationTypeSingleArtworkShowcase"] = 22;
        values[valuesById[23] = "k_EProfileCustomizationTypeAchievementsCompletionist"] = 23;
        return values;
    })();
    
    /**
     * EPublishedFileStorageSystem enum.
     * @exports EPublishedFileStorageSystem
     * @enum {string}
     * @property {number} k_EPublishedFileStorageSystemInvalid=0 k_EPublishedFileStorageSystemInvalid value
     * @property {number} k_EPublishedFileStorageSystemLegacyCloud=1 k_EPublishedFileStorageSystemLegacyCloud value
     * @property {number} k_EPublishedFileStorageSystemDepot=2 k_EPublishedFileStorageSystemDepot value
     * @property {number} k_EPublishedFileStorageSystemUGCCloud=3 k_EPublishedFileStorageSystemUGCCloud value
     */
    $root.EPublishedFileStorageSystem = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "k_EPublishedFileStorageSystemInvalid"] = 0;
        values[valuesById[1] = "k_EPublishedFileStorageSystemLegacyCloud"] = 1;
        values[valuesById[2] = "k_EPublishedFileStorageSystemDepot"] = 2;
        values[valuesById[3] = "k_EPublishedFileStorageSystemUGCCloud"] = 3;
        return values;
    })();
    
    /**
     * ECloudStoragePersistState enum.
     * @exports ECloudStoragePersistState
     * @enum {string}
     * @property {number} k_ECloudStoragePersistStatePersisted=0 k_ECloudStoragePersistStatePersisted value
     * @property {number} k_ECloudStoragePersistStateForgotten=1 k_ECloudStoragePersistStateForgotten value
     * @property {number} k_ECloudStoragePersistStateDeleted=2 k_ECloudStoragePersistStateDeleted value
     */
    $root.ECloudStoragePersistState = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "k_ECloudStoragePersistStatePersisted"] = 0;
        values[valuesById[1] = "k_ECloudStoragePersistStateForgotten"] = 1;
        values[valuesById[2] = "k_ECloudStoragePersistStateDeleted"] = 2;
        return values;
    })();
    
    /**
     * EBluetoothDeviceType enum.
     * @exports EBluetoothDeviceType
     * @enum {string}
     * @property {number} k_BluetoothDeviceType_Invalid=0 k_BluetoothDeviceType_Invalid value
     * @property {number} k_BluetoothDeviceType_Unknown=1 k_BluetoothDeviceType_Unknown value
     * @property {number} k_BluetoothDeviceType_Phone=2 k_BluetoothDeviceType_Phone value
     * @property {number} k_BluetoothDeviceType_Computer=3 k_BluetoothDeviceType_Computer value
     * @property {number} k_BluetoothDeviceType_Headset=4 k_BluetoothDeviceType_Headset value
     * @property {number} k_BluetoothDeviceType_Headphones=5 k_BluetoothDeviceType_Headphones value
     * @property {number} k_BluetoothDeviceType_Speakers=6 k_BluetoothDeviceType_Speakers value
     * @property {number} k_BluetoothDeviceType_OtherAudio=7 k_BluetoothDeviceType_OtherAudio value
     * @property {number} k_BluetoothDeviceType_Mouse=8 k_BluetoothDeviceType_Mouse value
     * @property {number} k_BluetoothDeviceType_Joystick=9 k_BluetoothDeviceType_Joystick value
     * @property {number} k_BluetoothDeviceType_Gamepad=10 k_BluetoothDeviceType_Gamepad value
     * @property {number} k_BluetoothDeviceType_Keyboard=11 k_BluetoothDeviceType_Keyboard value
     */
    $root.EBluetoothDeviceType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "k_BluetoothDeviceType_Invalid"] = 0;
        values[valuesById[1] = "k_BluetoothDeviceType_Unknown"] = 1;
        values[valuesById[2] = "k_BluetoothDeviceType_Phone"] = 2;
        values[valuesById[3] = "k_BluetoothDeviceType_Computer"] = 3;
        values[valuesById[4] = "k_BluetoothDeviceType_Headset"] = 4;
        values[valuesById[5] = "k_BluetoothDeviceType_Headphones"] = 5;
        values[valuesById[6] = "k_BluetoothDeviceType_Speakers"] = 6;
        values[valuesById[7] = "k_BluetoothDeviceType_OtherAudio"] = 7;
        values[valuesById[8] = "k_BluetoothDeviceType_Mouse"] = 8;
        values[valuesById[9] = "k_BluetoothDeviceType_Joystick"] = 9;
        values[valuesById[10] = "k_BluetoothDeviceType_Gamepad"] = 10;
        values[valuesById[11] = "k_BluetoothDeviceType_Keyboard"] = 11;
        return values;
    })();
    
    /**
     * EStorageBlockContentType enum.
     * @exports EStorageBlockContentType
     * @enum {string}
     * @property {number} k_EStorageBlockContentType_Invalid=0 k_EStorageBlockContentType_Invalid value
     * @property {number} k_EStorageBlockContentType_Unknown=1 k_EStorageBlockContentType_Unknown value
     * @property {number} k_EStorageBlockContentType_FileSystem=2 k_EStorageBlockContentType_FileSystem value
     * @property {number} k_EStorageBlockContentType_Crypto=3 k_EStorageBlockContentType_Crypto value
     * @property {number} k_EStorageBlockContentType_Raid=4 k_EStorageBlockContentType_Raid value
     */
    $root.EStorageBlockContentType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "k_EStorageBlockContentType_Invalid"] = 0;
        values[valuesById[1] = "k_EStorageBlockContentType_Unknown"] = 1;
        values[valuesById[2] = "k_EStorageBlockContentType_FileSystem"] = 2;
        values[valuesById[3] = "k_EStorageBlockContentType_Crypto"] = 3;
        values[valuesById[4] = "k_EStorageBlockContentType_Raid"] = 4;
        return values;
    })();
    
    /**
     * EStorageBlockFileSystemType enum.
     * @exports EStorageBlockFileSystemType
     * @enum {string}
     * @property {number} k_EStorageBlockFileSystemType_Invalid=0 k_EStorageBlockFileSystemType_Invalid value
     * @property {number} k_EStorageBlockFileSystemType_Unknown=1 k_EStorageBlockFileSystemType_Unknown value
     * @property {number} k_EStorageBlockFileSystemType_VFat=2 k_EStorageBlockFileSystemType_VFat value
     * @property {number} k_EStorageBlockFileSystemType_Ext4=3 k_EStorageBlockFileSystemType_Ext4 value
     */
    $root.EStorageBlockFileSystemType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "k_EStorageBlockFileSystemType_Invalid"] = 0;
        values[valuesById[1] = "k_EStorageBlockFileSystemType_Unknown"] = 1;
        values[valuesById[2] = "k_EStorageBlockFileSystemType_VFat"] = 2;
        values[valuesById[3] = "k_EStorageBlockFileSystemType_Ext4"] = 3;
        return values;
    })();
    
    /**
     * EProtoClanEventType enum.
     * @exports EProtoClanEventType
     * @enum {string}
     * @property {number} k_EClanOtherEvent=1 k_EClanOtherEvent value
     * @property {number} k_EClanGameEvent=2 k_EClanGameEvent value
     * @property {number} k_EClanPartyEvent=3 k_EClanPartyEvent value
     * @property {number} k_EClanMeetingEvent=4 k_EClanMeetingEvent value
     * @property {number} k_EClanSpecialCauseEvent=5 k_EClanSpecialCauseEvent value
     * @property {number} k_EClanMusicAndArtsEvent=6 k_EClanMusicAndArtsEvent value
     * @property {number} k_EClanSportsEvent=7 k_EClanSportsEvent value
     * @property {number} k_EClanTripEvent=8 k_EClanTripEvent value
     * @property {number} k_EClanChatEvent=9 k_EClanChatEvent value
     * @property {number} k_EClanGameReleaseEvent=10 k_EClanGameReleaseEvent value
     * @property {number} k_EClanBroadcastEvent=11 k_EClanBroadcastEvent value
     * @property {number} k_EClanSmallUpdateEvent=12 k_EClanSmallUpdateEvent value
     * @property {number} k_EClanPreAnnounceMajorUpdateEvent=13 k_EClanPreAnnounceMajorUpdateEvent value
     * @property {number} k_EClanMajorUpdateEvent=14 k_EClanMajorUpdateEvent value
     * @property {number} k_EClanDLCReleaseEvent=15 k_EClanDLCReleaseEvent value
     * @property {number} k_EClanFutureReleaseEvent=16 k_EClanFutureReleaseEvent value
     * @property {number} k_EClanESportTournamentStreamEvent=17 k_EClanESportTournamentStreamEvent value
     * @property {number} k_EClanDevStreamEvent=18 k_EClanDevStreamEvent value
     * @property {number} k_EClanFamousStreamEvent=19 k_EClanFamousStreamEvent value
     * @property {number} k_EClanGameSalesEvent=20 k_EClanGameSalesEvent value
     * @property {number} k_EClanGameItemSalesEvent=21 k_EClanGameItemSalesEvent value
     * @property {number} k_EClanInGameBonusXPEvent=22 k_EClanInGameBonusXPEvent value
     * @property {number} k_EClanInGameLootEvent=23 k_EClanInGameLootEvent value
     * @property {number} k_EClanInGamePerksEvent=24 k_EClanInGamePerksEvent value
     * @property {number} k_EClanInGameChallengeEvent=25 k_EClanInGameChallengeEvent value
     * @property {number} k_EClanInGameContestEvent=26 k_EClanInGameContestEvent value
     * @property {number} k_EClanIRLEvent=27 k_EClanIRLEvent value
     * @property {number} k_EClanNewsEvent=28 k_EClanNewsEvent value
     * @property {number} k_EClanBetaReleaseEvent=29 k_EClanBetaReleaseEvent value
     * @property {number} k_EClanInGameContentReleaseEvent=30 k_EClanInGameContentReleaseEvent value
     * @property {number} k_EClanFreeTrial=31 k_EClanFreeTrial value
     * @property {number} k_EClanSeasonRelease=32 k_EClanSeasonRelease value
     * @property {number} k_EClanSeasonUpdate=33 k_EClanSeasonUpdate value
     * @property {number} k_EClanCrosspostEvent=34 k_EClanCrosspostEvent value
     * @property {number} k_EClanInGameEventGeneral=35 k_EClanInGameEventGeneral value
     */
    $root.EProtoClanEventType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "k_EClanOtherEvent"] = 1;
        values[valuesById[2] = "k_EClanGameEvent"] = 2;
        values[valuesById[3] = "k_EClanPartyEvent"] = 3;
        values[valuesById[4] = "k_EClanMeetingEvent"] = 4;
        values[valuesById[5] = "k_EClanSpecialCauseEvent"] = 5;
        values[valuesById[6] = "k_EClanMusicAndArtsEvent"] = 6;
        values[valuesById[7] = "k_EClanSportsEvent"] = 7;
        values[valuesById[8] = "k_EClanTripEvent"] = 8;
        values[valuesById[9] = "k_EClanChatEvent"] = 9;
        values[valuesById[10] = "k_EClanGameReleaseEvent"] = 10;
        values[valuesById[11] = "k_EClanBroadcastEvent"] = 11;
        values[valuesById[12] = "k_EClanSmallUpdateEvent"] = 12;
        values[valuesById[13] = "k_EClanPreAnnounceMajorUpdateEvent"] = 13;
        values[valuesById[14] = "k_EClanMajorUpdateEvent"] = 14;
        values[valuesById[15] = "k_EClanDLCReleaseEvent"] = 15;
        values[valuesById[16] = "k_EClanFutureReleaseEvent"] = 16;
        values[valuesById[17] = "k_EClanESportTournamentStreamEvent"] = 17;
        values[valuesById[18] = "k_EClanDevStreamEvent"] = 18;
        values[valuesById[19] = "k_EClanFamousStreamEvent"] = 19;
        values[valuesById[20] = "k_EClanGameSalesEvent"] = 20;
        values[valuesById[21] = "k_EClanGameItemSalesEvent"] = 21;
        values[valuesById[22] = "k_EClanInGameBonusXPEvent"] = 22;
        values[valuesById[23] = "k_EClanInGameLootEvent"] = 23;
        values[valuesById[24] = "k_EClanInGamePerksEvent"] = 24;
        values[valuesById[25] = "k_EClanInGameChallengeEvent"] = 25;
        values[valuesById[26] = "k_EClanInGameContestEvent"] = 26;
        values[valuesById[27] = "k_EClanIRLEvent"] = 27;
        values[valuesById[28] = "k_EClanNewsEvent"] = 28;
        values[valuesById[29] = "k_EClanBetaReleaseEvent"] = 29;
        values[valuesById[30] = "k_EClanInGameContentReleaseEvent"] = 30;
        values[valuesById[31] = "k_EClanFreeTrial"] = 31;
        values[valuesById[32] = "k_EClanSeasonRelease"] = 32;
        values[valuesById[33] = "k_EClanSeasonUpdate"] = 33;
        values[valuesById[34] = "k_EClanCrosspostEvent"] = 34;
        values[valuesById[35] = "k_EClanInGameEventGeneral"] = 35;
        return values;
    })();
    
    /**
     * PartnerEventNotificationType enum.
     * @exports PartnerEventNotificationType
     * @enum {string}
     * @property {number} k_EEventStart=0 k_EEventStart value
     * @property {number} k_EEventBroadcastStart=1 k_EEventBroadcastStart value
     * @property {number} k_EEventMatchStart=2 k_EEventMatchStart value
     * @property {number} k_EEventPartnerMaxType=3 k_EEventPartnerMaxType value
     */
    $root.PartnerEventNotificationType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "k_EEventStart"] = 0;
        values[valuesById[1] = "k_EEventBroadcastStart"] = 1;
        values[valuesById[2] = "k_EEventMatchStart"] = 2;
        values[valuesById[3] = "k_EEventPartnerMaxType"] = 3;
        return values;
    })();
    
    $root.CMsgIPAddress = (function() {
    
        /**
         * Properties of a CMsgIPAddress.
         * @exports ICMsgIPAddress
         * @interface ICMsgIPAddress
         * @property {number|null} [v4] CMsgIPAddress v4
         * @property {Uint8Array|null} [v6] CMsgIPAddress v6
         */
    
        /**
         * Constructs a new CMsgIPAddress.
         * @exports CMsgIPAddress
         * @classdesc Represents a CMsgIPAddress.
         * @implements ICMsgIPAddress
         * @constructor
         * @param {ICMsgIPAddress=} [properties] Properties to set
         */
        function CMsgIPAddress(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgIPAddress v4.
         * @member {number} v4
         * @memberof CMsgIPAddress
         * @instance
         */
        CMsgIPAddress.prototype.v4 = 0;
    
        /**
         * CMsgIPAddress v6.
         * @member {Uint8Array} v6
         * @memberof CMsgIPAddress
         * @instance
         */
        CMsgIPAddress.prototype.v6 = $util.newBuffer([]);
    
        // OneOf field names bound to virtual getters and setters
        var $oneOfFields;
    
        /**
         * CMsgIPAddress ip.
         * @member {"v4"|"v6"|undefined} ip
         * @memberof CMsgIPAddress
         * @instance
         */
        Object.defineProperty(CMsgIPAddress.prototype, "ip", {
            get: $util.oneOfGetter($oneOfFields = ["v4", "v6"]),
            set: $util.oneOfSetter($oneOfFields)
        });
    
        /**
         * Creates a new CMsgIPAddress instance using the specified properties.
         * @function create
         * @memberof CMsgIPAddress
         * @static
         * @param {ICMsgIPAddress=} [properties] Properties to set
         * @returns {CMsgIPAddress} CMsgIPAddress instance
         */
        CMsgIPAddress.create = function create(properties) {
            return new CMsgIPAddress(properties);
        };
    
        /**
         * Encodes the specified CMsgIPAddress message. Does not implicitly {@link CMsgIPAddress.verify|verify} messages.
         * @function encode
         * @memberof CMsgIPAddress
         * @static
         * @param {ICMsgIPAddress} message CMsgIPAddress message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgIPAddress.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.v4 != null && message.hasOwnProperty("v4"))
                writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.v4);
            if (message.v6 != null && message.hasOwnProperty("v6"))
                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.v6);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgIPAddress message, length delimited. Does not implicitly {@link CMsgIPAddress.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgIPAddress
         * @static
         * @param {ICMsgIPAddress} message CMsgIPAddress message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgIPAddress.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgIPAddress message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgIPAddress
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgIPAddress} CMsgIPAddress
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgIPAddress.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgIPAddress();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.v4 = reader.fixed32();
                    break;
                case 2:
                    message.v6 = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgIPAddress message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgIPAddress
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgIPAddress} CMsgIPAddress
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgIPAddress.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgIPAddress message.
         * @function verify
         * @memberof CMsgIPAddress
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgIPAddress.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            var properties = {};
            if (message.v4 != null && message.hasOwnProperty("v4")) {
                properties.ip = 1;
                if (!$util.isInteger(message.v4))
                    return "v4: integer expected";
            }
            if (message.v6 != null && message.hasOwnProperty("v6")) {
                if (properties.ip === 1)
                    return "ip: multiple values";
                properties.ip = 1;
                if (!(message.v6 && typeof message.v6.length === "number" || $util.isString(message.v6)))
                    return "v6: buffer expected";
            }
            return null;
        };
    
        /**
         * Creates a CMsgIPAddress message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgIPAddress
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgIPAddress} CMsgIPAddress
         */
        CMsgIPAddress.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgIPAddress)
                return object;
            var message = new $root.CMsgIPAddress();
            if (object.v4 != null)
                message.v4 = object.v4 >>> 0;
            if (object.v6 != null)
                if (typeof object.v6 === "string")
                    $util.base64.decode(object.v6, message.v6 = $util.newBuffer($util.base64.length(object.v6)), 0);
                else if (object.v6.length)
                    message.v6 = object.v6;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgIPAddress message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgIPAddress
         * @static
         * @param {CMsgIPAddress} message CMsgIPAddress
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgIPAddress.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (message.v4 != null && message.hasOwnProperty("v4")) {
                object.v4 = message.v4;
                if (options.oneofs)
                    object.ip = "v4";
            }
            if (message.v6 != null && message.hasOwnProperty("v6")) {
                object.v6 = options.bytes === String ? $util.base64.encode(message.v6, 0, message.v6.length) : options.bytes === Array ? Array.prototype.slice.call(message.v6) : message.v6;
                if (options.oneofs)
                    object.ip = "v6";
            }
            return object;
        };
    
        /**
         * Converts this CMsgIPAddress to JSON.
         * @function toJSON
         * @memberof CMsgIPAddress
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgIPAddress.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgIPAddress;
    })();
    
    $root.CMsgIPAddressBucket = (function() {
    
        /**
         * Properties of a CMsgIPAddressBucket.
         * @exports ICMsgIPAddressBucket
         * @interface ICMsgIPAddressBucket
         * @property {ICMsgIPAddress|null} [original_ip_address] CMsgIPAddressBucket original_ip_address
         * @property {number|Long|null} [bucket] CMsgIPAddressBucket bucket
         */
    
        /**
         * Constructs a new CMsgIPAddressBucket.
         * @exports CMsgIPAddressBucket
         * @classdesc Represents a CMsgIPAddressBucket.
         * @implements ICMsgIPAddressBucket
         * @constructor
         * @param {ICMsgIPAddressBucket=} [properties] Properties to set
         */
        function CMsgIPAddressBucket(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgIPAddressBucket original_ip_address.
         * @member {ICMsgIPAddress|null|undefined} original_ip_address
         * @memberof CMsgIPAddressBucket
         * @instance
         */
        CMsgIPAddressBucket.prototype.original_ip_address = null;
    
        /**
         * CMsgIPAddressBucket bucket.
         * @member {number|Long} bucket
         * @memberof CMsgIPAddressBucket
         * @instance
         */
        CMsgIPAddressBucket.prototype.bucket = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * Creates a new CMsgIPAddressBucket instance using the specified properties.
         * @function create
         * @memberof CMsgIPAddressBucket
         * @static
         * @param {ICMsgIPAddressBucket=} [properties] Properties to set
         * @returns {CMsgIPAddressBucket} CMsgIPAddressBucket instance
         */
        CMsgIPAddressBucket.create = function create(properties) {
            return new CMsgIPAddressBucket(properties);
        };
    
        /**
         * Encodes the specified CMsgIPAddressBucket message. Does not implicitly {@link CMsgIPAddressBucket.verify|verify} messages.
         * @function encode
         * @memberof CMsgIPAddressBucket
         * @static
         * @param {ICMsgIPAddressBucket} message CMsgIPAddressBucket message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgIPAddressBucket.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.original_ip_address != null && message.hasOwnProperty("original_ip_address"))
                $root.CMsgIPAddress.encode(message.original_ip_address, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.bucket != null && message.hasOwnProperty("bucket"))
                writer.uint32(/* id 2, wireType 1 =*/17).fixed64(message.bucket);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgIPAddressBucket message, length delimited. Does not implicitly {@link CMsgIPAddressBucket.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgIPAddressBucket
         * @static
         * @param {ICMsgIPAddressBucket} message CMsgIPAddressBucket message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgIPAddressBucket.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgIPAddressBucket message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgIPAddressBucket
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgIPAddressBucket} CMsgIPAddressBucket
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgIPAddressBucket.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgIPAddressBucket();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.original_ip_address = $root.CMsgIPAddress.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.bucket = reader.fixed64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgIPAddressBucket message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgIPAddressBucket
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgIPAddressBucket} CMsgIPAddressBucket
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgIPAddressBucket.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgIPAddressBucket message.
         * @function verify
         * @memberof CMsgIPAddressBucket
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgIPAddressBucket.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.original_ip_address != null && message.hasOwnProperty("original_ip_address")) {
                var error = $root.CMsgIPAddress.verify(message.original_ip_address);
                if (error)
                    return "original_ip_address." + error;
            }
            if (message.bucket != null && message.hasOwnProperty("bucket"))
                if (!$util.isInteger(message.bucket) && !(message.bucket && $util.isInteger(message.bucket.low) && $util.isInteger(message.bucket.high)))
                    return "bucket: integer|Long expected";
            return null;
        };
    
        /**
         * Creates a CMsgIPAddressBucket message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgIPAddressBucket
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgIPAddressBucket} CMsgIPAddressBucket
         */
        CMsgIPAddressBucket.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgIPAddressBucket)
                return object;
            var message = new $root.CMsgIPAddressBucket();
            if (object.original_ip_address != null) {
                if (typeof object.original_ip_address !== "object")
                    throw TypeError(".CMsgIPAddressBucket.original_ip_address: object expected");
                message.original_ip_address = $root.CMsgIPAddress.fromObject(object.original_ip_address);
            }
            if (object.bucket != null)
                if ($util.Long)
                    (message.bucket = $util.Long.fromValue(object.bucket)).unsigned = false;
                else if (typeof object.bucket === "string")
                    message.bucket = parseInt(object.bucket, 10);
                else if (typeof object.bucket === "number")
                    message.bucket = object.bucket;
                else if (typeof object.bucket === "object")
                    message.bucket = new $util.LongBits(object.bucket.low >>> 0, object.bucket.high >>> 0).toNumber();
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgIPAddressBucket message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgIPAddressBucket
         * @static
         * @param {CMsgIPAddressBucket} message CMsgIPAddressBucket
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgIPAddressBucket.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.original_ip_address = null;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.bucket = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.bucket = options.longs === String ? "0" : 0;
            }
            if (message.original_ip_address != null && message.hasOwnProperty("original_ip_address"))
                object.original_ip_address = $root.CMsgIPAddress.toObject(message.original_ip_address, options);
            if (message.bucket != null && message.hasOwnProperty("bucket"))
                if (typeof message.bucket === "number")
                    object.bucket = options.longs === String ? String(message.bucket) : message.bucket;
                else
                    object.bucket = options.longs === String ? $util.Long.prototype.toString.call(message.bucket) : options.longs === Number ? new $util.LongBits(message.bucket.low >>> 0, message.bucket.high >>> 0).toNumber() : message.bucket;
            return object;
        };
    
        /**
         * Converts this CMsgIPAddressBucket to JSON.
         * @function toJSON
         * @memberof CMsgIPAddressBucket
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgIPAddressBucket.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgIPAddressBucket;
    })();
    
    $root.CMsgProtoBufHeader = (function() {
    
        /**
         * Properties of a CMsgProtoBufHeader.
         * @exports ICMsgProtoBufHeader
         * @interface ICMsgProtoBufHeader
         * @property {number|Long|null} [steamid] CMsgProtoBufHeader steamid
         * @property {number|null} [client_sessionid] CMsgProtoBufHeader client_sessionid
         * @property {number|null} [routing_appid] CMsgProtoBufHeader routing_appid
         * @property {number|Long|null} [jobid_source] CMsgProtoBufHeader jobid_source
         * @property {number|Long|null} [jobid_target] CMsgProtoBufHeader jobid_target
         * @property {string|null} [target_job_name] CMsgProtoBufHeader target_job_name
         * @property {number|null} [seq_num] CMsgProtoBufHeader seq_num
         * @property {number|null} [eresult] CMsgProtoBufHeader eresult
         * @property {string|null} [error_message] CMsgProtoBufHeader error_message
         * @property {number|null} [auth_account_flags] CMsgProtoBufHeader auth_account_flags
         * @property {number|null} [token_source] CMsgProtoBufHeader token_source
         * @property {boolean|null} [admin_spoofing_user] CMsgProtoBufHeader admin_spoofing_user
         * @property {number|null} [transport_error] CMsgProtoBufHeader transport_error
         * @property {number|Long|null} [messageid] CMsgProtoBufHeader messageid
         * @property {number|null} [publisher_group_id] CMsgProtoBufHeader publisher_group_id
         * @property {number|null} [sysid] CMsgProtoBufHeader sysid
         * @property {number|Long|null} [trace_tag] CMsgProtoBufHeader trace_tag
         * @property {number|null} [webapi_key_id] CMsgProtoBufHeader webapi_key_id
         * @property {boolean|null} [is_from_external_source] CMsgProtoBufHeader is_from_external_source
         * @property {Array.<number>|null} [forward_to_sysid] CMsgProtoBufHeader forward_to_sysid
         * @property {number|null} [cm_sysid] CMsgProtoBufHeader cm_sysid
         * @property {string|null} [wg_token] CMsgProtoBufHeader wg_token
         * @property {number|null} [launcher_type] CMsgProtoBufHeader launcher_type
         * @property {number|null} [realm] CMsgProtoBufHeader realm
         * @property {number|null} [ip] CMsgProtoBufHeader ip
         * @property {Uint8Array|null} [ip_v6] CMsgProtoBufHeader ip_v6
         */
    
        /**
         * Constructs a new CMsgProtoBufHeader.
         * @exports CMsgProtoBufHeader
         * @classdesc Represents a CMsgProtoBufHeader.
         * @implements ICMsgProtoBufHeader
         * @constructor
         * @param {ICMsgProtoBufHeader=} [properties] Properties to set
         */
        function CMsgProtoBufHeader(properties) {
            this.forward_to_sysid = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgProtoBufHeader steamid.
         * @member {number|Long} steamid
         * @memberof CMsgProtoBufHeader
         * @instance
         */
        CMsgProtoBufHeader.prototype.steamid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CMsgProtoBufHeader client_sessionid.
         * @member {number} client_sessionid
         * @memberof CMsgProtoBufHeader
         * @instance
         */
        CMsgProtoBufHeader.prototype.client_sessionid = 0;
    
        /**
         * CMsgProtoBufHeader routing_appid.
         * @member {number} routing_appid
         * @memberof CMsgProtoBufHeader
         * @instance
         */
        CMsgProtoBufHeader.prototype.routing_appid = 0;
    
        /**
         * CMsgProtoBufHeader jobid_source.
         * @member {number|Long} jobid_source
         * @memberof CMsgProtoBufHeader
         * @instance
         */
        CMsgProtoBufHeader.prototype.jobid_source = $util.Long ? $util.Long.fromBits(-1,2147483647,false) : 9223372036854776000;
    
        /**
         * CMsgProtoBufHeader jobid_target.
         * @member {number|Long} jobid_target
         * @memberof CMsgProtoBufHeader
         * @instance
         */
        CMsgProtoBufHeader.prototype.jobid_target = $util.Long ? $util.Long.fromBits(-1,2147483647,false) : 9223372036854776000;
    
        /**
         * CMsgProtoBufHeader target_job_name.
         * @member {string} target_job_name
         * @memberof CMsgProtoBufHeader
         * @instance
         */
        CMsgProtoBufHeader.prototype.target_job_name = "";
    
        /**
         * CMsgProtoBufHeader seq_num.
         * @member {number} seq_num
         * @memberof CMsgProtoBufHeader
         * @instance
         */
        CMsgProtoBufHeader.prototype.seq_num = 0;
    
        /**
         * CMsgProtoBufHeader eresult.
         * @member {number} eresult
         * @memberof CMsgProtoBufHeader
         * @instance
         */
        CMsgProtoBufHeader.prototype.eresult = 2;
    
        /**
         * CMsgProtoBufHeader error_message.
         * @member {string} error_message
         * @memberof CMsgProtoBufHeader
         * @instance
         */
        CMsgProtoBufHeader.prototype.error_message = "";
    
        /**
         * CMsgProtoBufHeader auth_account_flags.
         * @member {number} auth_account_flags
         * @memberof CMsgProtoBufHeader
         * @instance
         */
        CMsgProtoBufHeader.prototype.auth_account_flags = 0;
    
        /**
         * CMsgProtoBufHeader token_source.
         * @member {number} token_source
         * @memberof CMsgProtoBufHeader
         * @instance
         */
        CMsgProtoBufHeader.prototype.token_source = 0;
    
        /**
         * CMsgProtoBufHeader admin_spoofing_user.
         * @member {boolean} admin_spoofing_user
         * @memberof CMsgProtoBufHeader
         * @instance
         */
        CMsgProtoBufHeader.prototype.admin_spoofing_user = false;
    
        /**
         * CMsgProtoBufHeader transport_error.
         * @member {number} transport_error
         * @memberof CMsgProtoBufHeader
         * @instance
         */
        CMsgProtoBufHeader.prototype.transport_error = 1;
    
        /**
         * CMsgProtoBufHeader messageid.
         * @member {number|Long} messageid
         * @memberof CMsgProtoBufHeader
         * @instance
         */
        CMsgProtoBufHeader.prototype.messageid = $util.Long ? $util.Long.fromBits(-1,-1,true) : 18446744073709552000;
    
        /**
         * CMsgProtoBufHeader publisher_group_id.
         * @member {number} publisher_group_id
         * @memberof CMsgProtoBufHeader
         * @instance
         */
        CMsgProtoBufHeader.prototype.publisher_group_id = 0;
    
        /**
         * CMsgProtoBufHeader sysid.
         * @member {number} sysid
         * @memberof CMsgProtoBufHeader
         * @instance
         */
        CMsgProtoBufHeader.prototype.sysid = 0;
    
        /**
         * CMsgProtoBufHeader trace_tag.
         * @member {number|Long} trace_tag
         * @memberof CMsgProtoBufHeader
         * @instance
         */
        CMsgProtoBufHeader.prototype.trace_tag = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CMsgProtoBufHeader webapi_key_id.
         * @member {number} webapi_key_id
         * @memberof CMsgProtoBufHeader
         * @instance
         */
        CMsgProtoBufHeader.prototype.webapi_key_id = 0;
    
        /**
         * CMsgProtoBufHeader is_from_external_source.
         * @member {boolean} is_from_external_source
         * @memberof CMsgProtoBufHeader
         * @instance
         */
        CMsgProtoBufHeader.prototype.is_from_external_source = false;
    
        /**
         * CMsgProtoBufHeader forward_to_sysid.
         * @member {Array.<number>} forward_to_sysid
         * @memberof CMsgProtoBufHeader
         * @instance
         */
        CMsgProtoBufHeader.prototype.forward_to_sysid = $util.emptyArray;
    
        /**
         * CMsgProtoBufHeader cm_sysid.
         * @member {number} cm_sysid
         * @memberof CMsgProtoBufHeader
         * @instance
         */
        CMsgProtoBufHeader.prototype.cm_sysid = 0;
    
        /**
         * CMsgProtoBufHeader wg_token.
         * @member {string} wg_token
         * @memberof CMsgProtoBufHeader
         * @instance
         */
        CMsgProtoBufHeader.prototype.wg_token = "";
    
        /**
         * CMsgProtoBufHeader launcher_type.
         * @member {number} launcher_type
         * @memberof CMsgProtoBufHeader
         * @instance
         */
        CMsgProtoBufHeader.prototype.launcher_type = 0;
    
        /**
         * CMsgProtoBufHeader realm.
         * @member {number} realm
         * @memberof CMsgProtoBufHeader
         * @instance
         */
        CMsgProtoBufHeader.prototype.realm = 0;
    
        /**
         * CMsgProtoBufHeader ip.
         * @member {number} ip
         * @memberof CMsgProtoBufHeader
         * @instance
         */
        CMsgProtoBufHeader.prototype.ip = 0;
    
        /**
         * CMsgProtoBufHeader ip_v6.
         * @member {Uint8Array} ip_v6
         * @memberof CMsgProtoBufHeader
         * @instance
         */
        CMsgProtoBufHeader.prototype.ip_v6 = $util.newBuffer([]);
    
        // OneOf field names bound to virtual getters and setters
        var $oneOfFields;
    
        /**
         * CMsgProtoBufHeader ip_addr.
         * @member {"ip"|"ip_v6"|undefined} ip_addr
         * @memberof CMsgProtoBufHeader
         * @instance
         */
        Object.defineProperty(CMsgProtoBufHeader.prototype, "ip_addr", {
            get: $util.oneOfGetter($oneOfFields = ["ip", "ip_v6"]),
            set: $util.oneOfSetter($oneOfFields)
        });
    
        /**
         * Creates a new CMsgProtoBufHeader instance using the specified properties.
         * @function create
         * @memberof CMsgProtoBufHeader
         * @static
         * @param {ICMsgProtoBufHeader=} [properties] Properties to set
         * @returns {CMsgProtoBufHeader} CMsgProtoBufHeader instance
         */
        CMsgProtoBufHeader.create = function create(properties) {
            return new CMsgProtoBufHeader(properties);
        };
    
        /**
         * Encodes the specified CMsgProtoBufHeader message. Does not implicitly {@link CMsgProtoBufHeader.verify|verify} messages.
         * @function encode
         * @memberof CMsgProtoBufHeader
         * @static
         * @param {ICMsgProtoBufHeader} message CMsgProtoBufHeader message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgProtoBufHeader.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.steamid);
            if (message.client_sessionid != null && message.hasOwnProperty("client_sessionid"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.client_sessionid);
            if (message.routing_appid != null && message.hasOwnProperty("routing_appid"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.routing_appid);
            if (message.jobid_source != null && message.hasOwnProperty("jobid_source"))
                writer.uint32(/* id 10, wireType 1 =*/81).fixed64(message.jobid_source);
            if (message.jobid_target != null && message.hasOwnProperty("jobid_target"))
                writer.uint32(/* id 11, wireType 1 =*/89).fixed64(message.jobid_target);
            if (message.target_job_name != null && message.hasOwnProperty("target_job_name"))
                writer.uint32(/* id 12, wireType 2 =*/98).string(message.target_job_name);
            if (message.eresult != null && message.hasOwnProperty("eresult"))
                writer.uint32(/* id 13, wireType 0 =*/104).int32(message.eresult);
            if (message.error_message != null && message.hasOwnProperty("error_message"))
                writer.uint32(/* id 14, wireType 2 =*/114).string(message.error_message);
            if (message.ip != null && message.hasOwnProperty("ip"))
                writer.uint32(/* id 15, wireType 0 =*/120).uint32(message.ip);
            if (message.auth_account_flags != null && message.hasOwnProperty("auth_account_flags"))
                writer.uint32(/* id 16, wireType 0 =*/128).uint32(message.auth_account_flags);
            if (message.transport_error != null && message.hasOwnProperty("transport_error"))
                writer.uint32(/* id 17, wireType 0 =*/136).int32(message.transport_error);
            if (message.messageid != null && message.hasOwnProperty("messageid"))
                writer.uint32(/* id 18, wireType 0 =*/144).uint64(message.messageid);
            if (message.publisher_group_id != null && message.hasOwnProperty("publisher_group_id"))
                writer.uint32(/* id 19, wireType 0 =*/152).uint32(message.publisher_group_id);
            if (message.sysid != null && message.hasOwnProperty("sysid"))
                writer.uint32(/* id 20, wireType 0 =*/160).uint32(message.sysid);
            if (message.trace_tag != null && message.hasOwnProperty("trace_tag"))
                writer.uint32(/* id 21, wireType 0 =*/168).uint64(message.trace_tag);
            if (message.token_source != null && message.hasOwnProperty("token_source"))
                writer.uint32(/* id 22, wireType 0 =*/176).uint32(message.token_source);
            if (message.admin_spoofing_user != null && message.hasOwnProperty("admin_spoofing_user"))
                writer.uint32(/* id 23, wireType 0 =*/184).bool(message.admin_spoofing_user);
            if (message.seq_num != null && message.hasOwnProperty("seq_num"))
                writer.uint32(/* id 24, wireType 0 =*/192).int32(message.seq_num);
            if (message.webapi_key_id != null && message.hasOwnProperty("webapi_key_id"))
                writer.uint32(/* id 25, wireType 0 =*/200).uint32(message.webapi_key_id);
            if (message.is_from_external_source != null && message.hasOwnProperty("is_from_external_source"))
                writer.uint32(/* id 26, wireType 0 =*/208).bool(message.is_from_external_source);
            if (message.forward_to_sysid != null && message.forward_to_sysid.length)
                for (var i = 0; i < message.forward_to_sysid.length; ++i)
                    writer.uint32(/* id 27, wireType 0 =*/216).uint32(message.forward_to_sysid[i]);
            if (message.cm_sysid != null && message.hasOwnProperty("cm_sysid"))
                writer.uint32(/* id 28, wireType 0 =*/224).uint32(message.cm_sysid);
            if (message.ip_v6 != null && message.hasOwnProperty("ip_v6"))
                writer.uint32(/* id 29, wireType 2 =*/234).bytes(message.ip_v6);
            if (message.wg_token != null && message.hasOwnProperty("wg_token"))
                writer.uint32(/* id 30, wireType 2 =*/242).string(message.wg_token);
            if (message.launcher_type != null && message.hasOwnProperty("launcher_type"))
                writer.uint32(/* id 31, wireType 0 =*/248).uint32(message.launcher_type);
            if (message.realm != null && message.hasOwnProperty("realm"))
                writer.uint32(/* id 32, wireType 0 =*/256).uint32(message.realm);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgProtoBufHeader message, length delimited. Does not implicitly {@link CMsgProtoBufHeader.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgProtoBufHeader
         * @static
         * @param {ICMsgProtoBufHeader} message CMsgProtoBufHeader message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgProtoBufHeader.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgProtoBufHeader message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgProtoBufHeader
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgProtoBufHeader} CMsgProtoBufHeader
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgProtoBufHeader.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgProtoBufHeader();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.steamid = reader.fixed64();
                    break;
                case 2:
                    message.client_sessionid = reader.int32();
                    break;
                case 3:
                    message.routing_appid = reader.uint32();
                    break;
                case 10:
                    message.jobid_source = reader.fixed64();
                    break;
                case 11:
                    message.jobid_target = reader.fixed64();
                    break;
                case 12:
                    message.target_job_name = reader.string();
                    break;
                case 24:
                    message.seq_num = reader.int32();
                    break;
                case 13:
                    message.eresult = reader.int32();
                    break;
                case 14:
                    message.error_message = reader.string();
                    break;
                case 16:
                    message.auth_account_flags = reader.uint32();
                    break;
                case 22:
                    message.token_source = reader.uint32();
                    break;
                case 23:
                    message.admin_spoofing_user = reader.bool();
                    break;
                case 17:
                    message.transport_error = reader.int32();
                    break;
                case 18:
                    message.messageid = reader.uint64();
                    break;
                case 19:
                    message.publisher_group_id = reader.uint32();
                    break;
                case 20:
                    message.sysid = reader.uint32();
                    break;
                case 21:
                    message.trace_tag = reader.uint64();
                    break;
                case 25:
                    message.webapi_key_id = reader.uint32();
                    break;
                case 26:
                    message.is_from_external_source = reader.bool();
                    break;
                case 27:
                    if (!(message.forward_to_sysid && message.forward_to_sysid.length))
                        message.forward_to_sysid = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.forward_to_sysid.push(reader.uint32());
                    } else
                        message.forward_to_sysid.push(reader.uint32());
                    break;
                case 28:
                    message.cm_sysid = reader.uint32();
                    break;
                case 30:
                    message.wg_token = reader.string();
                    break;
                case 31:
                    message.launcher_type = reader.uint32();
                    break;
                case 32:
                    message.realm = reader.uint32();
                    break;
                case 15:
                    message.ip = reader.uint32();
                    break;
                case 29:
                    message.ip_v6 = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgProtoBufHeader message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgProtoBufHeader
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgProtoBufHeader} CMsgProtoBufHeader
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgProtoBufHeader.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgProtoBufHeader message.
         * @function verify
         * @memberof CMsgProtoBufHeader
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgProtoBufHeader.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            var properties = {};
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                if (!$util.isInteger(message.steamid) && !(message.steamid && $util.isInteger(message.steamid.low) && $util.isInteger(message.steamid.high)))
                    return "steamid: integer|Long expected";
            if (message.client_sessionid != null && message.hasOwnProperty("client_sessionid"))
                if (!$util.isInteger(message.client_sessionid))
                    return "client_sessionid: integer expected";
            if (message.routing_appid != null && message.hasOwnProperty("routing_appid"))
                if (!$util.isInteger(message.routing_appid))
                    return "routing_appid: integer expected";
            if (message.jobid_source != null && message.hasOwnProperty("jobid_source"))
                if (!$util.isInteger(message.jobid_source) && !(message.jobid_source && $util.isInteger(message.jobid_source.low) && $util.isInteger(message.jobid_source.high)))
                    return "jobid_source: integer|Long expected";
            if (message.jobid_target != null && message.hasOwnProperty("jobid_target"))
                if (!$util.isInteger(message.jobid_target) && !(message.jobid_target && $util.isInteger(message.jobid_target.low) && $util.isInteger(message.jobid_target.high)))
                    return "jobid_target: integer|Long expected";
            if (message.target_job_name != null && message.hasOwnProperty("target_job_name"))
                if (!$util.isString(message.target_job_name))
                    return "target_job_name: string expected";
            if (message.seq_num != null && message.hasOwnProperty("seq_num"))
                if (!$util.isInteger(message.seq_num))
                    return "seq_num: integer expected";
            if (message.eresult != null && message.hasOwnProperty("eresult"))
                if (!$util.isInteger(message.eresult))
                    return "eresult: integer expected";
            if (message.error_message != null && message.hasOwnProperty("error_message"))
                if (!$util.isString(message.error_message))
                    return "error_message: string expected";
            if (message.auth_account_flags != null && message.hasOwnProperty("auth_account_flags"))
                if (!$util.isInteger(message.auth_account_flags))
                    return "auth_account_flags: integer expected";
            if (message.token_source != null && message.hasOwnProperty("token_source"))
                if (!$util.isInteger(message.token_source))
                    return "token_source: integer expected";
            if (message.admin_spoofing_user != null && message.hasOwnProperty("admin_spoofing_user"))
                if (typeof message.admin_spoofing_user !== "boolean")
                    return "admin_spoofing_user: boolean expected";
            if (message.transport_error != null && message.hasOwnProperty("transport_error"))
                if (!$util.isInteger(message.transport_error))
                    return "transport_error: integer expected";
            if (message.messageid != null && message.hasOwnProperty("messageid"))
                if (!$util.isInteger(message.messageid) && !(message.messageid && $util.isInteger(message.messageid.low) && $util.isInteger(message.messageid.high)))
                    return "messageid: integer|Long expected";
            if (message.publisher_group_id != null && message.hasOwnProperty("publisher_group_id"))
                if (!$util.isInteger(message.publisher_group_id))
                    return "publisher_group_id: integer expected";
            if (message.sysid != null && message.hasOwnProperty("sysid"))
                if (!$util.isInteger(message.sysid))
                    return "sysid: integer expected";
            if (message.trace_tag != null && message.hasOwnProperty("trace_tag"))
                if (!$util.isInteger(message.trace_tag) && !(message.trace_tag && $util.isInteger(message.trace_tag.low) && $util.isInteger(message.trace_tag.high)))
                    return "trace_tag: integer|Long expected";
            if (message.webapi_key_id != null && message.hasOwnProperty("webapi_key_id"))
                if (!$util.isInteger(message.webapi_key_id))
                    return "webapi_key_id: integer expected";
            if (message.is_from_external_source != null && message.hasOwnProperty("is_from_external_source"))
                if (typeof message.is_from_external_source !== "boolean")
                    return "is_from_external_source: boolean expected";
            if (message.forward_to_sysid != null && message.hasOwnProperty("forward_to_sysid")) {
                if (!Array.isArray(message.forward_to_sysid))
                    return "forward_to_sysid: array expected";
                for (var i = 0; i < message.forward_to_sysid.length; ++i)
                    if (!$util.isInteger(message.forward_to_sysid[i]))
                        return "forward_to_sysid: integer[] expected";
            }
            if (message.cm_sysid != null && message.hasOwnProperty("cm_sysid"))
                if (!$util.isInteger(message.cm_sysid))
                    return "cm_sysid: integer expected";
            if (message.wg_token != null && message.hasOwnProperty("wg_token"))
                if (!$util.isString(message.wg_token))
                    return "wg_token: string expected";
            if (message.launcher_type != null && message.hasOwnProperty("launcher_type"))
                if (!$util.isInteger(message.launcher_type))
                    return "launcher_type: integer expected";
            if (message.realm != null && message.hasOwnProperty("realm"))
                if (!$util.isInteger(message.realm))
                    return "realm: integer expected";
            if (message.ip != null && message.hasOwnProperty("ip")) {
                properties.ip_addr = 1;
                if (!$util.isInteger(message.ip))
                    return "ip: integer expected";
            }
            if (message.ip_v6 != null && message.hasOwnProperty("ip_v6")) {
                if (properties.ip_addr === 1)
                    return "ip_addr: multiple values";
                properties.ip_addr = 1;
                if (!(message.ip_v6 && typeof message.ip_v6.length === "number" || $util.isString(message.ip_v6)))
                    return "ip_v6: buffer expected";
            }
            return null;
        };
    
        /**
         * Creates a CMsgProtoBufHeader message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgProtoBufHeader
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgProtoBufHeader} CMsgProtoBufHeader
         */
        CMsgProtoBufHeader.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgProtoBufHeader)
                return object;
            var message = new $root.CMsgProtoBufHeader();
            if (object.steamid != null)
                if ($util.Long)
                    (message.steamid = $util.Long.fromValue(object.steamid)).unsigned = false;
                else if (typeof object.steamid === "string")
                    message.steamid = parseInt(object.steamid, 10);
                else if (typeof object.steamid === "number")
                    message.steamid = object.steamid;
                else if (typeof object.steamid === "object")
                    message.steamid = new $util.LongBits(object.steamid.low >>> 0, object.steamid.high >>> 0).toNumber();
            if (object.client_sessionid != null)
                message.client_sessionid = object.client_sessionid | 0;
            if (object.routing_appid != null)
                message.routing_appid = object.routing_appid >>> 0;
            if (object.jobid_source != null)
                if ($util.Long)
                    (message.jobid_source = $util.Long.fromValue(object.jobid_source)).unsigned = false;
                else if (typeof object.jobid_source === "string")
                    message.jobid_source = parseInt(object.jobid_source, 10);
                else if (typeof object.jobid_source === "number")
                    message.jobid_source = object.jobid_source;
                else if (typeof object.jobid_source === "object")
                    message.jobid_source = new $util.LongBits(object.jobid_source.low >>> 0, object.jobid_source.high >>> 0).toNumber();
            if (object.jobid_target != null)
                if ($util.Long)
                    (message.jobid_target = $util.Long.fromValue(object.jobid_target)).unsigned = false;
                else if (typeof object.jobid_target === "string")
                    message.jobid_target = parseInt(object.jobid_target, 10);
                else if (typeof object.jobid_target === "number")
                    message.jobid_target = object.jobid_target;
                else if (typeof object.jobid_target === "object")
                    message.jobid_target = new $util.LongBits(object.jobid_target.low >>> 0, object.jobid_target.high >>> 0).toNumber();
            if (object.target_job_name != null)
                message.target_job_name = String(object.target_job_name);
            if (object.seq_num != null)
                message.seq_num = object.seq_num | 0;
            if (object.eresult != null)
                message.eresult = object.eresult | 0;
            if (object.error_message != null)
                message.error_message = String(object.error_message);
            if (object.auth_account_flags != null)
                message.auth_account_flags = object.auth_account_flags >>> 0;
            if (object.token_source != null)
                message.token_source = object.token_source >>> 0;
            if (object.admin_spoofing_user != null)
                message.admin_spoofing_user = Boolean(object.admin_spoofing_user);
            if (object.transport_error != null)
                message.transport_error = object.transport_error | 0;
            if (object.messageid != null)
                if ($util.Long)
                    (message.messageid = $util.Long.fromValue(object.messageid)).unsigned = true;
                else if (typeof object.messageid === "string")
                    message.messageid = parseInt(object.messageid, 10);
                else if (typeof object.messageid === "number")
                    message.messageid = object.messageid;
                else if (typeof object.messageid === "object")
                    message.messageid = new $util.LongBits(object.messageid.low >>> 0, object.messageid.high >>> 0).toNumber(true);
            if (object.publisher_group_id != null)
                message.publisher_group_id = object.publisher_group_id >>> 0;
            if (object.sysid != null)
                message.sysid = object.sysid >>> 0;
            if (object.trace_tag != null)
                if ($util.Long)
                    (message.trace_tag = $util.Long.fromValue(object.trace_tag)).unsigned = true;
                else if (typeof object.trace_tag === "string")
                    message.trace_tag = parseInt(object.trace_tag, 10);
                else if (typeof object.trace_tag === "number")
                    message.trace_tag = object.trace_tag;
                else if (typeof object.trace_tag === "object")
                    message.trace_tag = new $util.LongBits(object.trace_tag.low >>> 0, object.trace_tag.high >>> 0).toNumber(true);
            if (object.webapi_key_id != null)
                message.webapi_key_id = object.webapi_key_id >>> 0;
            if (object.is_from_external_source != null)
                message.is_from_external_source = Boolean(object.is_from_external_source);
            if (object.forward_to_sysid) {
                if (!Array.isArray(object.forward_to_sysid))
                    throw TypeError(".CMsgProtoBufHeader.forward_to_sysid: array expected");
                message.forward_to_sysid = [];
                for (var i = 0; i < object.forward_to_sysid.length; ++i)
                    message.forward_to_sysid[i] = object.forward_to_sysid[i] >>> 0;
            }
            if (object.cm_sysid != null)
                message.cm_sysid = object.cm_sysid >>> 0;
            if (object.wg_token != null)
                message.wg_token = String(object.wg_token);
            if (object.launcher_type != null)
                message.launcher_type = object.launcher_type >>> 0;
            if (object.realm != null)
                message.realm = object.realm >>> 0;
            if (object.ip != null)
                message.ip = object.ip >>> 0;
            if (object.ip_v6 != null)
                if (typeof object.ip_v6 === "string")
                    $util.base64.decode(object.ip_v6, message.ip_v6 = $util.newBuffer($util.base64.length(object.ip_v6)), 0);
                else if (object.ip_v6.length)
                    message.ip_v6 = object.ip_v6;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgProtoBufHeader message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgProtoBufHeader
         * @static
         * @param {CMsgProtoBufHeader} message CMsgProtoBufHeader
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgProtoBufHeader.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.forward_to_sysid = [];
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.steamid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.steamid = options.longs === String ? "0" : 0;
                object.client_sessionid = 0;
                object.routing_appid = 0;
                if ($util.Long) {
                    var long = new $util.Long(-1, 2147483647, false);
                    object.jobid_source = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.jobid_source = options.longs === String ? "9223372036854775807" : 9223372036854776000;
                if ($util.Long) {
                    var long = new $util.Long(-1, 2147483647, false);
                    object.jobid_target = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.jobid_target = options.longs === String ? "9223372036854775807" : 9223372036854776000;
                object.target_job_name = "";
                object.eresult = 2;
                object.error_message = "";
                object.auth_account_flags = 0;
                object.transport_error = 1;
                if ($util.Long) {
                    var long = new $util.Long(-1, -1, true);
                    object.messageid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.messageid = options.longs === String ? "18446744073709551615" : 18446744073709552000;
                object.publisher_group_id = 0;
                object.sysid = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.trace_tag = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.trace_tag = options.longs === String ? "0" : 0;
                object.token_source = 0;
                object.admin_spoofing_user = false;
                object.seq_num = 0;
                object.webapi_key_id = 0;
                object.is_from_external_source = false;
                object.cm_sysid = 0;
                object.wg_token = "";
                object.launcher_type = 0;
                object.realm = 0;
            }
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                if (typeof message.steamid === "number")
                    object.steamid = options.longs === String ? String(message.steamid) : message.steamid;
                else
                    object.steamid = options.longs === String ? $util.Long.prototype.toString.call(message.steamid) : options.longs === Number ? new $util.LongBits(message.steamid.low >>> 0, message.steamid.high >>> 0).toNumber() : message.steamid;
            if (message.client_sessionid != null && message.hasOwnProperty("client_sessionid"))
                object.client_sessionid = message.client_sessionid;
            if (message.routing_appid != null && message.hasOwnProperty("routing_appid"))
                object.routing_appid = message.routing_appid;
            if (message.jobid_source != null && message.hasOwnProperty("jobid_source"))
                if (typeof message.jobid_source === "number")
                    object.jobid_source = options.longs === String ? String(message.jobid_source) : message.jobid_source;
                else
                    object.jobid_source = options.longs === String ? $util.Long.prototype.toString.call(message.jobid_source) : options.longs === Number ? new $util.LongBits(message.jobid_source.low >>> 0, message.jobid_source.high >>> 0).toNumber() : message.jobid_source;
            if (message.jobid_target != null && message.hasOwnProperty("jobid_target"))
                if (typeof message.jobid_target === "number")
                    object.jobid_target = options.longs === String ? String(message.jobid_target) : message.jobid_target;
                else
                    object.jobid_target = options.longs === String ? $util.Long.prototype.toString.call(message.jobid_target) : options.longs === Number ? new $util.LongBits(message.jobid_target.low >>> 0, message.jobid_target.high >>> 0).toNumber() : message.jobid_target;
            if (message.target_job_name != null && message.hasOwnProperty("target_job_name"))
                object.target_job_name = message.target_job_name;
            if (message.eresult != null && message.hasOwnProperty("eresult"))
                object.eresult = message.eresult;
            if (message.error_message != null && message.hasOwnProperty("error_message"))
                object.error_message = message.error_message;
            if (message.ip != null && message.hasOwnProperty("ip")) {
                object.ip = message.ip;
                if (options.oneofs)
                    object.ip_addr = "ip";
            }
            if (message.auth_account_flags != null && message.hasOwnProperty("auth_account_flags"))
                object.auth_account_flags = message.auth_account_flags;
            if (message.transport_error != null && message.hasOwnProperty("transport_error"))
                object.transport_error = message.transport_error;
            if (message.messageid != null && message.hasOwnProperty("messageid"))
                if (typeof message.messageid === "number")
                    object.messageid = options.longs === String ? String(message.messageid) : message.messageid;
                else
                    object.messageid = options.longs === String ? $util.Long.prototype.toString.call(message.messageid) : options.longs === Number ? new $util.LongBits(message.messageid.low >>> 0, message.messageid.high >>> 0).toNumber(true) : message.messageid;
            if (message.publisher_group_id != null && message.hasOwnProperty("publisher_group_id"))
                object.publisher_group_id = message.publisher_group_id;
            if (message.sysid != null && message.hasOwnProperty("sysid"))
                object.sysid = message.sysid;
            if (message.trace_tag != null && message.hasOwnProperty("trace_tag"))
                if (typeof message.trace_tag === "number")
                    object.trace_tag = options.longs === String ? String(message.trace_tag) : message.trace_tag;
                else
                    object.trace_tag = options.longs === String ? $util.Long.prototype.toString.call(message.trace_tag) : options.longs === Number ? new $util.LongBits(message.trace_tag.low >>> 0, message.trace_tag.high >>> 0).toNumber(true) : message.trace_tag;
            if (message.token_source != null && message.hasOwnProperty("token_source"))
                object.token_source = message.token_source;
            if (message.admin_spoofing_user != null && message.hasOwnProperty("admin_spoofing_user"))
                object.admin_spoofing_user = message.admin_spoofing_user;
            if (message.seq_num != null && message.hasOwnProperty("seq_num"))
                object.seq_num = message.seq_num;
            if (message.webapi_key_id != null && message.hasOwnProperty("webapi_key_id"))
                object.webapi_key_id = message.webapi_key_id;
            if (message.is_from_external_source != null && message.hasOwnProperty("is_from_external_source"))
                object.is_from_external_source = message.is_from_external_source;
            if (message.forward_to_sysid && message.forward_to_sysid.length) {
                object.forward_to_sysid = [];
                for (var j = 0; j < message.forward_to_sysid.length; ++j)
                    object.forward_to_sysid[j] = message.forward_to_sysid[j];
            }
            if (message.cm_sysid != null && message.hasOwnProperty("cm_sysid"))
                object.cm_sysid = message.cm_sysid;
            if (message.ip_v6 != null && message.hasOwnProperty("ip_v6")) {
                object.ip_v6 = options.bytes === String ? $util.base64.encode(message.ip_v6, 0, message.ip_v6.length) : options.bytes === Array ? Array.prototype.slice.call(message.ip_v6) : message.ip_v6;
                if (options.oneofs)
                    object.ip_addr = "ip_v6";
            }
            if (message.wg_token != null && message.hasOwnProperty("wg_token"))
                object.wg_token = message.wg_token;
            if (message.launcher_type != null && message.hasOwnProperty("launcher_type"))
                object.launcher_type = message.launcher_type;
            if (message.realm != null && message.hasOwnProperty("realm"))
                object.realm = message.realm;
            return object;
        };
    
        /**
         * Converts this CMsgProtoBufHeader to JSON.
         * @function toJSON
         * @memberof CMsgProtoBufHeader
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgProtoBufHeader.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgProtoBufHeader;
    })();
    
    $root.CMsgMulti = (function() {
    
        /**
         * Properties of a CMsgMulti.
         * @exports ICMsgMulti
         * @interface ICMsgMulti
         * @property {number|null} [size_unzipped] CMsgMulti size_unzipped
         * @property {Uint8Array|null} [message_body] CMsgMulti message_body
         */
    
        /**
         * Constructs a new CMsgMulti.
         * @exports CMsgMulti
         * @classdesc Represents a CMsgMulti.
         * @implements ICMsgMulti
         * @constructor
         * @param {ICMsgMulti=} [properties] Properties to set
         */
        function CMsgMulti(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgMulti size_unzipped.
         * @member {number} size_unzipped
         * @memberof CMsgMulti
         * @instance
         */
        CMsgMulti.prototype.size_unzipped = 0;
    
        /**
         * CMsgMulti message_body.
         * @member {Uint8Array} message_body
         * @memberof CMsgMulti
         * @instance
         */
        CMsgMulti.prototype.message_body = $util.newBuffer([]);
    
        /**
         * Creates a new CMsgMulti instance using the specified properties.
         * @function create
         * @memberof CMsgMulti
         * @static
         * @param {ICMsgMulti=} [properties] Properties to set
         * @returns {CMsgMulti} CMsgMulti instance
         */
        CMsgMulti.create = function create(properties) {
            return new CMsgMulti(properties);
        };
    
        /**
         * Encodes the specified CMsgMulti message. Does not implicitly {@link CMsgMulti.verify|verify} messages.
         * @function encode
         * @memberof CMsgMulti
         * @static
         * @param {ICMsgMulti} message CMsgMulti message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgMulti.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.size_unzipped != null && message.hasOwnProperty("size_unzipped"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.size_unzipped);
            if (message.message_body != null && message.hasOwnProperty("message_body"))
                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.message_body);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgMulti message, length delimited. Does not implicitly {@link CMsgMulti.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgMulti
         * @static
         * @param {ICMsgMulti} message CMsgMulti message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgMulti.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgMulti message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgMulti
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgMulti} CMsgMulti
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgMulti.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgMulti();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.size_unzipped = reader.uint32();
                    break;
                case 2:
                    message.message_body = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgMulti message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgMulti
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgMulti} CMsgMulti
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgMulti.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgMulti message.
         * @function verify
         * @memberof CMsgMulti
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgMulti.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.size_unzipped != null && message.hasOwnProperty("size_unzipped"))
                if (!$util.isInteger(message.size_unzipped))
                    return "size_unzipped: integer expected";
            if (message.message_body != null && message.hasOwnProperty("message_body"))
                if (!(message.message_body && typeof message.message_body.length === "number" || $util.isString(message.message_body)))
                    return "message_body: buffer expected";
            return null;
        };
    
        /**
         * Creates a CMsgMulti message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgMulti
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgMulti} CMsgMulti
         */
        CMsgMulti.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgMulti)
                return object;
            var message = new $root.CMsgMulti();
            if (object.size_unzipped != null)
                message.size_unzipped = object.size_unzipped >>> 0;
            if (object.message_body != null)
                if (typeof object.message_body === "string")
                    $util.base64.decode(object.message_body, message.message_body = $util.newBuffer($util.base64.length(object.message_body)), 0);
                else if (object.message_body.length)
                    message.message_body = object.message_body;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgMulti message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgMulti
         * @static
         * @param {CMsgMulti} message CMsgMulti
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgMulti.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.size_unzipped = 0;
                if (options.bytes === String)
                    object.message_body = "";
                else {
                    object.message_body = [];
                    if (options.bytes !== Array)
                        object.message_body = $util.newBuffer(object.message_body);
                }
            }
            if (message.size_unzipped != null && message.hasOwnProperty("size_unzipped"))
                object.size_unzipped = message.size_unzipped;
            if (message.message_body != null && message.hasOwnProperty("message_body"))
                object.message_body = options.bytes === String ? $util.base64.encode(message.message_body, 0, message.message_body.length) : options.bytes === Array ? Array.prototype.slice.call(message.message_body) : message.message_body;
            return object;
        };
    
        /**
         * Converts this CMsgMulti to JSON.
         * @function toJSON
         * @memberof CMsgMulti
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgMulti.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgMulti;
    })();
    
    $root.CMsgProtobufWrapped = (function() {
    
        /**
         * Properties of a CMsgProtobufWrapped.
         * @exports ICMsgProtobufWrapped
         * @interface ICMsgProtobufWrapped
         * @property {Uint8Array|null} [message_body] CMsgProtobufWrapped message_body
         */
    
        /**
         * Constructs a new CMsgProtobufWrapped.
         * @exports CMsgProtobufWrapped
         * @classdesc Represents a CMsgProtobufWrapped.
         * @implements ICMsgProtobufWrapped
         * @constructor
         * @param {ICMsgProtobufWrapped=} [properties] Properties to set
         */
        function CMsgProtobufWrapped(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgProtobufWrapped message_body.
         * @member {Uint8Array} message_body
         * @memberof CMsgProtobufWrapped
         * @instance
         */
        CMsgProtobufWrapped.prototype.message_body = $util.newBuffer([]);
    
        /**
         * Creates a new CMsgProtobufWrapped instance using the specified properties.
         * @function create
         * @memberof CMsgProtobufWrapped
         * @static
         * @param {ICMsgProtobufWrapped=} [properties] Properties to set
         * @returns {CMsgProtobufWrapped} CMsgProtobufWrapped instance
         */
        CMsgProtobufWrapped.create = function create(properties) {
            return new CMsgProtobufWrapped(properties);
        };
    
        /**
         * Encodes the specified CMsgProtobufWrapped message. Does not implicitly {@link CMsgProtobufWrapped.verify|verify} messages.
         * @function encode
         * @memberof CMsgProtobufWrapped
         * @static
         * @param {ICMsgProtobufWrapped} message CMsgProtobufWrapped message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgProtobufWrapped.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.message_body != null && message.hasOwnProperty("message_body"))
                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.message_body);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgProtobufWrapped message, length delimited. Does not implicitly {@link CMsgProtobufWrapped.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgProtobufWrapped
         * @static
         * @param {ICMsgProtobufWrapped} message CMsgProtobufWrapped message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgProtobufWrapped.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgProtobufWrapped message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgProtobufWrapped
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgProtobufWrapped} CMsgProtobufWrapped
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgProtobufWrapped.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgProtobufWrapped();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.message_body = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgProtobufWrapped message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgProtobufWrapped
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgProtobufWrapped} CMsgProtobufWrapped
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgProtobufWrapped.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgProtobufWrapped message.
         * @function verify
         * @memberof CMsgProtobufWrapped
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgProtobufWrapped.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.message_body != null && message.hasOwnProperty("message_body"))
                if (!(message.message_body && typeof message.message_body.length === "number" || $util.isString(message.message_body)))
                    return "message_body: buffer expected";
            return null;
        };
    
        /**
         * Creates a CMsgProtobufWrapped message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgProtobufWrapped
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgProtobufWrapped} CMsgProtobufWrapped
         */
        CMsgProtobufWrapped.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgProtobufWrapped)
                return object;
            var message = new $root.CMsgProtobufWrapped();
            if (object.message_body != null)
                if (typeof object.message_body === "string")
                    $util.base64.decode(object.message_body, message.message_body = $util.newBuffer($util.base64.length(object.message_body)), 0);
                else if (object.message_body.length)
                    message.message_body = object.message_body;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgProtobufWrapped message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgProtobufWrapped
         * @static
         * @param {CMsgProtobufWrapped} message CMsgProtobufWrapped
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgProtobufWrapped.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if (options.bytes === String)
                    object.message_body = "";
                else {
                    object.message_body = [];
                    if (options.bytes !== Array)
                        object.message_body = $util.newBuffer(object.message_body);
                }
            if (message.message_body != null && message.hasOwnProperty("message_body"))
                object.message_body = options.bytes === String ? $util.base64.encode(message.message_body, 0, message.message_body.length) : options.bytes === Array ? Array.prototype.slice.call(message.message_body) : message.message_body;
            return object;
        };
    
        /**
         * Converts this CMsgProtobufWrapped to JSON.
         * @function toJSON
         * @memberof CMsgProtobufWrapped
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgProtobufWrapped.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgProtobufWrapped;
    })();
    
    $root.CMsgAuthTicket = (function() {
    
        /**
         * Properties of a CMsgAuthTicket.
         * @exports ICMsgAuthTicket
         * @interface ICMsgAuthTicket
         * @property {number|null} [estate] CMsgAuthTicket estate
         * @property {number|null} [eresult] CMsgAuthTicket eresult
         * @property {number|Long|null} [steamid] CMsgAuthTicket steamid
         * @property {number|Long|null} [gameid] CMsgAuthTicket gameid
         * @property {number|null} [h_steam_pipe] CMsgAuthTicket h_steam_pipe
         * @property {number|null} [ticket_crc] CMsgAuthTicket ticket_crc
         * @property {Uint8Array|null} [ticket] CMsgAuthTicket ticket
         */
    
        /**
         * Constructs a new CMsgAuthTicket.
         * @exports CMsgAuthTicket
         * @classdesc Represents a CMsgAuthTicket.
         * @implements ICMsgAuthTicket
         * @constructor
         * @param {ICMsgAuthTicket=} [properties] Properties to set
         */
        function CMsgAuthTicket(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgAuthTicket estate.
         * @member {number} estate
         * @memberof CMsgAuthTicket
         * @instance
         */
        CMsgAuthTicket.prototype.estate = 0;
    
        /**
         * CMsgAuthTicket eresult.
         * @member {number} eresult
         * @memberof CMsgAuthTicket
         * @instance
         */
        CMsgAuthTicket.prototype.eresult = 2;
    
        /**
         * CMsgAuthTicket steamid.
         * @member {number|Long} steamid
         * @memberof CMsgAuthTicket
         * @instance
         */
        CMsgAuthTicket.prototype.steamid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CMsgAuthTicket gameid.
         * @member {number|Long} gameid
         * @memberof CMsgAuthTicket
         * @instance
         */
        CMsgAuthTicket.prototype.gameid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CMsgAuthTicket h_steam_pipe.
         * @member {number} h_steam_pipe
         * @memberof CMsgAuthTicket
         * @instance
         */
        CMsgAuthTicket.prototype.h_steam_pipe = 0;
    
        /**
         * CMsgAuthTicket ticket_crc.
         * @member {number} ticket_crc
         * @memberof CMsgAuthTicket
         * @instance
         */
        CMsgAuthTicket.prototype.ticket_crc = 0;
    
        /**
         * CMsgAuthTicket ticket.
         * @member {Uint8Array} ticket
         * @memberof CMsgAuthTicket
         * @instance
         */
        CMsgAuthTicket.prototype.ticket = $util.newBuffer([]);
    
        /**
         * Creates a new CMsgAuthTicket instance using the specified properties.
         * @function create
         * @memberof CMsgAuthTicket
         * @static
         * @param {ICMsgAuthTicket=} [properties] Properties to set
         * @returns {CMsgAuthTicket} CMsgAuthTicket instance
         */
        CMsgAuthTicket.create = function create(properties) {
            return new CMsgAuthTicket(properties);
        };
    
        /**
         * Encodes the specified CMsgAuthTicket message. Does not implicitly {@link CMsgAuthTicket.verify|verify} messages.
         * @function encode
         * @memberof CMsgAuthTicket
         * @static
         * @param {ICMsgAuthTicket} message CMsgAuthTicket message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgAuthTicket.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.estate != null && message.hasOwnProperty("estate"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.estate);
            if (message.eresult != null && message.hasOwnProperty("eresult"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.eresult);
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                writer.uint32(/* id 3, wireType 1 =*/25).fixed64(message.steamid);
            if (message.gameid != null && message.hasOwnProperty("gameid"))
                writer.uint32(/* id 4, wireType 1 =*/33).fixed64(message.gameid);
            if (message.h_steam_pipe != null && message.hasOwnProperty("h_steam_pipe"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.h_steam_pipe);
            if (message.ticket_crc != null && message.hasOwnProperty("ticket_crc"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.ticket_crc);
            if (message.ticket != null && message.hasOwnProperty("ticket"))
                writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.ticket);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgAuthTicket message, length delimited. Does not implicitly {@link CMsgAuthTicket.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgAuthTicket
         * @static
         * @param {ICMsgAuthTicket} message CMsgAuthTicket message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgAuthTicket.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgAuthTicket message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgAuthTicket
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgAuthTicket} CMsgAuthTicket
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgAuthTicket.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgAuthTicket();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.estate = reader.uint32();
                    break;
                case 2:
                    message.eresult = reader.uint32();
                    break;
                case 3:
                    message.steamid = reader.fixed64();
                    break;
                case 4:
                    message.gameid = reader.fixed64();
                    break;
                case 5:
                    message.h_steam_pipe = reader.uint32();
                    break;
                case 6:
                    message.ticket_crc = reader.uint32();
                    break;
                case 7:
                    message.ticket = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgAuthTicket message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgAuthTicket
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgAuthTicket} CMsgAuthTicket
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgAuthTicket.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgAuthTicket message.
         * @function verify
         * @memberof CMsgAuthTicket
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgAuthTicket.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.estate != null && message.hasOwnProperty("estate"))
                if (!$util.isInteger(message.estate))
                    return "estate: integer expected";
            if (message.eresult != null && message.hasOwnProperty("eresult"))
                if (!$util.isInteger(message.eresult))
                    return "eresult: integer expected";
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                if (!$util.isInteger(message.steamid) && !(message.steamid && $util.isInteger(message.steamid.low) && $util.isInteger(message.steamid.high)))
                    return "steamid: integer|Long expected";
            if (message.gameid != null && message.hasOwnProperty("gameid"))
                if (!$util.isInteger(message.gameid) && !(message.gameid && $util.isInteger(message.gameid.low) && $util.isInteger(message.gameid.high)))
                    return "gameid: integer|Long expected";
            if (message.h_steam_pipe != null && message.hasOwnProperty("h_steam_pipe"))
                if (!$util.isInteger(message.h_steam_pipe))
                    return "h_steam_pipe: integer expected";
            if (message.ticket_crc != null && message.hasOwnProperty("ticket_crc"))
                if (!$util.isInteger(message.ticket_crc))
                    return "ticket_crc: integer expected";
            if (message.ticket != null && message.hasOwnProperty("ticket"))
                if (!(message.ticket && typeof message.ticket.length === "number" || $util.isString(message.ticket)))
                    return "ticket: buffer expected";
            return null;
        };
    
        /**
         * Creates a CMsgAuthTicket message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgAuthTicket
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgAuthTicket} CMsgAuthTicket
         */
        CMsgAuthTicket.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgAuthTicket)
                return object;
            var message = new $root.CMsgAuthTicket();
            if (object.estate != null)
                message.estate = object.estate >>> 0;
            if (object.eresult != null)
                message.eresult = object.eresult >>> 0;
            if (object.steamid != null)
                if ($util.Long)
                    (message.steamid = $util.Long.fromValue(object.steamid)).unsigned = false;
                else if (typeof object.steamid === "string")
                    message.steamid = parseInt(object.steamid, 10);
                else if (typeof object.steamid === "number")
                    message.steamid = object.steamid;
                else if (typeof object.steamid === "object")
                    message.steamid = new $util.LongBits(object.steamid.low >>> 0, object.steamid.high >>> 0).toNumber();
            if (object.gameid != null)
                if ($util.Long)
                    (message.gameid = $util.Long.fromValue(object.gameid)).unsigned = false;
                else if (typeof object.gameid === "string")
                    message.gameid = parseInt(object.gameid, 10);
                else if (typeof object.gameid === "number")
                    message.gameid = object.gameid;
                else if (typeof object.gameid === "object")
                    message.gameid = new $util.LongBits(object.gameid.low >>> 0, object.gameid.high >>> 0).toNumber();
            if (object.h_steam_pipe != null)
                message.h_steam_pipe = object.h_steam_pipe >>> 0;
            if (object.ticket_crc != null)
                message.ticket_crc = object.ticket_crc >>> 0;
            if (object.ticket != null)
                if (typeof object.ticket === "string")
                    $util.base64.decode(object.ticket, message.ticket = $util.newBuffer($util.base64.length(object.ticket)), 0);
                else if (object.ticket.length)
                    message.ticket = object.ticket;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgAuthTicket message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgAuthTicket
         * @static
         * @param {CMsgAuthTicket} message CMsgAuthTicket
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgAuthTicket.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.estate = 0;
                object.eresult = 2;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.steamid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.steamid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.gameid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.gameid = options.longs === String ? "0" : 0;
                object.h_steam_pipe = 0;
                object.ticket_crc = 0;
                if (options.bytes === String)
                    object.ticket = "";
                else {
                    object.ticket = [];
                    if (options.bytes !== Array)
                        object.ticket = $util.newBuffer(object.ticket);
                }
            }
            if (message.estate != null && message.hasOwnProperty("estate"))
                object.estate = message.estate;
            if (message.eresult != null && message.hasOwnProperty("eresult"))
                object.eresult = message.eresult;
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                if (typeof message.steamid === "number")
                    object.steamid = options.longs === String ? String(message.steamid) : message.steamid;
                else
                    object.steamid = options.longs === String ? $util.Long.prototype.toString.call(message.steamid) : options.longs === Number ? new $util.LongBits(message.steamid.low >>> 0, message.steamid.high >>> 0).toNumber() : message.steamid;
            if (message.gameid != null && message.hasOwnProperty("gameid"))
                if (typeof message.gameid === "number")
                    object.gameid = options.longs === String ? String(message.gameid) : message.gameid;
                else
                    object.gameid = options.longs === String ? $util.Long.prototype.toString.call(message.gameid) : options.longs === Number ? new $util.LongBits(message.gameid.low >>> 0, message.gameid.high >>> 0).toNumber() : message.gameid;
            if (message.h_steam_pipe != null && message.hasOwnProperty("h_steam_pipe"))
                object.h_steam_pipe = message.h_steam_pipe;
            if (message.ticket_crc != null && message.hasOwnProperty("ticket_crc"))
                object.ticket_crc = message.ticket_crc;
            if (message.ticket != null && message.hasOwnProperty("ticket"))
                object.ticket = options.bytes === String ? $util.base64.encode(message.ticket, 0, message.ticket.length) : options.bytes === Array ? Array.prototype.slice.call(message.ticket) : message.ticket;
            return object;
        };
    
        /**
         * Converts this CMsgAuthTicket to JSON.
         * @function toJSON
         * @memberof CMsgAuthTicket
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgAuthTicket.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgAuthTicket;
    })();
    
    $root.CCDDBAppDetailCommon = (function() {
    
        /**
         * Properties of a CCDDBAppDetailCommon.
         * @exports ICCDDBAppDetailCommon
         * @interface ICCDDBAppDetailCommon
         * @property {number|null} [appid] CCDDBAppDetailCommon appid
         * @property {string|null} [name] CCDDBAppDetailCommon name
         * @property {string|null} [icon] CCDDBAppDetailCommon icon
         * @property {string|null} [logo] CCDDBAppDetailCommon logo
         * @property {string|null} [logo_small] CCDDBAppDetailCommon logo_small
         * @property {boolean|null} [tool] CCDDBAppDetailCommon tool
         * @property {boolean|null} [demo] CCDDBAppDetailCommon demo
         * @property {boolean|null} [media] CCDDBAppDetailCommon media
         * @property {boolean|null} [community_visible_stats] CCDDBAppDetailCommon community_visible_stats
         * @property {string|null} [friendly_name] CCDDBAppDetailCommon friendly_name
         * @property {string|null} [propagation] CCDDBAppDetailCommon propagation
         * @property {boolean|null} [has_adult_content] CCDDBAppDetailCommon has_adult_content
         * @property {boolean|null} [is_visible_in_steam_china] CCDDBAppDetailCommon is_visible_in_steam_china
         */
    
        /**
         * Constructs a new CCDDBAppDetailCommon.
         * @exports CCDDBAppDetailCommon
         * @classdesc Represents a CCDDBAppDetailCommon.
         * @implements ICCDDBAppDetailCommon
         * @constructor
         * @param {ICCDDBAppDetailCommon=} [properties] Properties to set
         */
        function CCDDBAppDetailCommon(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CCDDBAppDetailCommon appid.
         * @member {number} appid
         * @memberof CCDDBAppDetailCommon
         * @instance
         */
        CCDDBAppDetailCommon.prototype.appid = 0;
    
        /**
         * CCDDBAppDetailCommon name.
         * @member {string} name
         * @memberof CCDDBAppDetailCommon
         * @instance
         */
        CCDDBAppDetailCommon.prototype.name = "";
    
        /**
         * CCDDBAppDetailCommon icon.
         * @member {string} icon
         * @memberof CCDDBAppDetailCommon
         * @instance
         */
        CCDDBAppDetailCommon.prototype.icon = "";
    
        /**
         * CCDDBAppDetailCommon logo.
         * @member {string} logo
         * @memberof CCDDBAppDetailCommon
         * @instance
         */
        CCDDBAppDetailCommon.prototype.logo = "";
    
        /**
         * CCDDBAppDetailCommon logo_small.
         * @member {string} logo_small
         * @memberof CCDDBAppDetailCommon
         * @instance
         */
        CCDDBAppDetailCommon.prototype.logo_small = "";
    
        /**
         * CCDDBAppDetailCommon tool.
         * @member {boolean} tool
         * @memberof CCDDBAppDetailCommon
         * @instance
         */
        CCDDBAppDetailCommon.prototype.tool = false;
    
        /**
         * CCDDBAppDetailCommon demo.
         * @member {boolean} demo
         * @memberof CCDDBAppDetailCommon
         * @instance
         */
        CCDDBAppDetailCommon.prototype.demo = false;
    
        /**
         * CCDDBAppDetailCommon media.
         * @member {boolean} media
         * @memberof CCDDBAppDetailCommon
         * @instance
         */
        CCDDBAppDetailCommon.prototype.media = false;
    
        /**
         * CCDDBAppDetailCommon community_visible_stats.
         * @member {boolean} community_visible_stats
         * @memberof CCDDBAppDetailCommon
         * @instance
         */
        CCDDBAppDetailCommon.prototype.community_visible_stats = false;
    
        /**
         * CCDDBAppDetailCommon friendly_name.
         * @member {string} friendly_name
         * @memberof CCDDBAppDetailCommon
         * @instance
         */
        CCDDBAppDetailCommon.prototype.friendly_name = "";
    
        /**
         * CCDDBAppDetailCommon propagation.
         * @member {string} propagation
         * @memberof CCDDBAppDetailCommon
         * @instance
         */
        CCDDBAppDetailCommon.prototype.propagation = "";
    
        /**
         * CCDDBAppDetailCommon has_adult_content.
         * @member {boolean} has_adult_content
         * @memberof CCDDBAppDetailCommon
         * @instance
         */
        CCDDBAppDetailCommon.prototype.has_adult_content = false;
    
        /**
         * CCDDBAppDetailCommon is_visible_in_steam_china.
         * @member {boolean} is_visible_in_steam_china
         * @memberof CCDDBAppDetailCommon
         * @instance
         */
        CCDDBAppDetailCommon.prototype.is_visible_in_steam_china = false;
    
        /**
         * Creates a new CCDDBAppDetailCommon instance using the specified properties.
         * @function create
         * @memberof CCDDBAppDetailCommon
         * @static
         * @param {ICCDDBAppDetailCommon=} [properties] Properties to set
         * @returns {CCDDBAppDetailCommon} CCDDBAppDetailCommon instance
         */
        CCDDBAppDetailCommon.create = function create(properties) {
            return new CCDDBAppDetailCommon(properties);
        };
    
        /**
         * Encodes the specified CCDDBAppDetailCommon message. Does not implicitly {@link CCDDBAppDetailCommon.verify|verify} messages.
         * @function encode
         * @memberof CCDDBAppDetailCommon
         * @static
         * @param {ICCDDBAppDetailCommon} message CCDDBAppDetailCommon message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCDDBAppDetailCommon.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.appid != null && message.hasOwnProperty("appid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.appid);
            if (message.name != null && message.hasOwnProperty("name"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
            if (message.icon != null && message.hasOwnProperty("icon"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.icon);
            if (message.logo != null && message.hasOwnProperty("logo"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.logo);
            if (message.logo_small != null && message.hasOwnProperty("logo_small"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.logo_small);
            if (message.tool != null && message.hasOwnProperty("tool"))
                writer.uint32(/* id 6, wireType 0 =*/48).bool(message.tool);
            if (message.demo != null && message.hasOwnProperty("demo"))
                writer.uint32(/* id 7, wireType 0 =*/56).bool(message.demo);
            if (message.media != null && message.hasOwnProperty("media"))
                writer.uint32(/* id 8, wireType 0 =*/64).bool(message.media);
            if (message.community_visible_stats != null && message.hasOwnProperty("community_visible_stats"))
                writer.uint32(/* id 9, wireType 0 =*/72).bool(message.community_visible_stats);
            if (message.friendly_name != null && message.hasOwnProperty("friendly_name"))
                writer.uint32(/* id 10, wireType 2 =*/82).string(message.friendly_name);
            if (message.propagation != null && message.hasOwnProperty("propagation"))
                writer.uint32(/* id 11, wireType 2 =*/90).string(message.propagation);
            if (message.has_adult_content != null && message.hasOwnProperty("has_adult_content"))
                writer.uint32(/* id 12, wireType 0 =*/96).bool(message.has_adult_content);
            if (message.is_visible_in_steam_china != null && message.hasOwnProperty("is_visible_in_steam_china"))
                writer.uint32(/* id 13, wireType 0 =*/104).bool(message.is_visible_in_steam_china);
            return writer;
        };
    
        /**
         * Encodes the specified CCDDBAppDetailCommon message, length delimited. Does not implicitly {@link CCDDBAppDetailCommon.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CCDDBAppDetailCommon
         * @static
         * @param {ICCDDBAppDetailCommon} message CCDDBAppDetailCommon message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCDDBAppDetailCommon.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CCDDBAppDetailCommon message from the specified reader or buffer.
         * @function decode
         * @memberof CCDDBAppDetailCommon
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CCDDBAppDetailCommon} CCDDBAppDetailCommon
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCDDBAppDetailCommon.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CCDDBAppDetailCommon();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.appid = reader.uint32();
                    break;
                case 2:
                    message.name = reader.string();
                    break;
                case 3:
                    message.icon = reader.string();
                    break;
                case 4:
                    message.logo = reader.string();
                    break;
                case 5:
                    message.logo_small = reader.string();
                    break;
                case 6:
                    message.tool = reader.bool();
                    break;
                case 7:
                    message.demo = reader.bool();
                    break;
                case 8:
                    message.media = reader.bool();
                    break;
                case 9:
                    message.community_visible_stats = reader.bool();
                    break;
                case 10:
                    message.friendly_name = reader.string();
                    break;
                case 11:
                    message.propagation = reader.string();
                    break;
                case 12:
                    message.has_adult_content = reader.bool();
                    break;
                case 13:
                    message.is_visible_in_steam_china = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CCDDBAppDetailCommon message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CCDDBAppDetailCommon
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CCDDBAppDetailCommon} CCDDBAppDetailCommon
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCDDBAppDetailCommon.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CCDDBAppDetailCommon message.
         * @function verify
         * @memberof CCDDBAppDetailCommon
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CCDDBAppDetailCommon.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.appid != null && message.hasOwnProperty("appid"))
                if (!$util.isInteger(message.appid))
                    return "appid: integer expected";
            if (message.name != null && message.hasOwnProperty("name"))
                if (!$util.isString(message.name))
                    return "name: string expected";
            if (message.icon != null && message.hasOwnProperty("icon"))
                if (!$util.isString(message.icon))
                    return "icon: string expected";
            if (message.logo != null && message.hasOwnProperty("logo"))
                if (!$util.isString(message.logo))
                    return "logo: string expected";
            if (message.logo_small != null && message.hasOwnProperty("logo_small"))
                if (!$util.isString(message.logo_small))
                    return "logo_small: string expected";
            if (message.tool != null && message.hasOwnProperty("tool"))
                if (typeof message.tool !== "boolean")
                    return "tool: boolean expected";
            if (message.demo != null && message.hasOwnProperty("demo"))
                if (typeof message.demo !== "boolean")
                    return "demo: boolean expected";
            if (message.media != null && message.hasOwnProperty("media"))
                if (typeof message.media !== "boolean")
                    return "media: boolean expected";
            if (message.community_visible_stats != null && message.hasOwnProperty("community_visible_stats"))
                if (typeof message.community_visible_stats !== "boolean")
                    return "community_visible_stats: boolean expected";
            if (message.friendly_name != null && message.hasOwnProperty("friendly_name"))
                if (!$util.isString(message.friendly_name))
                    return "friendly_name: string expected";
            if (message.propagation != null && message.hasOwnProperty("propagation"))
                if (!$util.isString(message.propagation))
                    return "propagation: string expected";
            if (message.has_adult_content != null && message.hasOwnProperty("has_adult_content"))
                if (typeof message.has_adult_content !== "boolean")
                    return "has_adult_content: boolean expected";
            if (message.is_visible_in_steam_china != null && message.hasOwnProperty("is_visible_in_steam_china"))
                if (typeof message.is_visible_in_steam_china !== "boolean")
                    return "is_visible_in_steam_china: boolean expected";
            return null;
        };
    
        /**
         * Creates a CCDDBAppDetailCommon message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CCDDBAppDetailCommon
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CCDDBAppDetailCommon} CCDDBAppDetailCommon
         */
        CCDDBAppDetailCommon.fromObject = function fromObject(object) {
            if (object instanceof $root.CCDDBAppDetailCommon)
                return object;
            var message = new $root.CCDDBAppDetailCommon();
            if (object.appid != null)
                message.appid = object.appid >>> 0;
            if (object.name != null)
                message.name = String(object.name);
            if (object.icon != null)
                message.icon = String(object.icon);
            if (object.logo != null)
                message.logo = String(object.logo);
            if (object.logo_small != null)
                message.logo_small = String(object.logo_small);
            if (object.tool != null)
                message.tool = Boolean(object.tool);
            if (object.demo != null)
                message.demo = Boolean(object.demo);
            if (object.media != null)
                message.media = Boolean(object.media);
            if (object.community_visible_stats != null)
                message.community_visible_stats = Boolean(object.community_visible_stats);
            if (object.friendly_name != null)
                message.friendly_name = String(object.friendly_name);
            if (object.propagation != null)
                message.propagation = String(object.propagation);
            if (object.has_adult_content != null)
                message.has_adult_content = Boolean(object.has_adult_content);
            if (object.is_visible_in_steam_china != null)
                message.is_visible_in_steam_china = Boolean(object.is_visible_in_steam_china);
            return message;
        };
    
        /**
         * Creates a plain object from a CCDDBAppDetailCommon message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CCDDBAppDetailCommon
         * @static
         * @param {CCDDBAppDetailCommon} message CCDDBAppDetailCommon
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CCDDBAppDetailCommon.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.appid = 0;
                object.name = "";
                object.icon = "";
                object.logo = "";
                object.logo_small = "";
                object.tool = false;
                object.demo = false;
                object.media = false;
                object.community_visible_stats = false;
                object.friendly_name = "";
                object.propagation = "";
                object.has_adult_content = false;
                object.is_visible_in_steam_china = false;
            }
            if (message.appid != null && message.hasOwnProperty("appid"))
                object.appid = message.appid;
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
            if (message.icon != null && message.hasOwnProperty("icon"))
                object.icon = message.icon;
            if (message.logo != null && message.hasOwnProperty("logo"))
                object.logo = message.logo;
            if (message.logo_small != null && message.hasOwnProperty("logo_small"))
                object.logo_small = message.logo_small;
            if (message.tool != null && message.hasOwnProperty("tool"))
                object.tool = message.tool;
            if (message.demo != null && message.hasOwnProperty("demo"))
                object.demo = message.demo;
            if (message.media != null && message.hasOwnProperty("media"))
                object.media = message.media;
            if (message.community_visible_stats != null && message.hasOwnProperty("community_visible_stats"))
                object.community_visible_stats = message.community_visible_stats;
            if (message.friendly_name != null && message.hasOwnProperty("friendly_name"))
                object.friendly_name = message.friendly_name;
            if (message.propagation != null && message.hasOwnProperty("propagation"))
                object.propagation = message.propagation;
            if (message.has_adult_content != null && message.hasOwnProperty("has_adult_content"))
                object.has_adult_content = message.has_adult_content;
            if (message.is_visible_in_steam_china != null && message.hasOwnProperty("is_visible_in_steam_china"))
                object.is_visible_in_steam_china = message.is_visible_in_steam_china;
            return object;
        };
    
        /**
         * Converts this CCDDBAppDetailCommon to JSON.
         * @function toJSON
         * @memberof CCDDBAppDetailCommon
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CCDDBAppDetailCommon.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CCDDBAppDetailCommon;
    })();
    
    $root.CMsgAppRights = (function() {
    
        /**
         * Properties of a CMsgAppRights.
         * @exports ICMsgAppRights
         * @interface ICMsgAppRights
         * @property {boolean|null} [edit_info] CMsgAppRights edit_info
         * @property {boolean|null} [publish] CMsgAppRights publish
         * @property {boolean|null} [view_error_data] CMsgAppRights view_error_data
         * @property {boolean|null} [download] CMsgAppRights download
         * @property {boolean|null} [upload_cdkeys] CMsgAppRights upload_cdkeys
         * @property {boolean|null} [generate_cdkeys] CMsgAppRights generate_cdkeys
         * @property {boolean|null} [view_financials] CMsgAppRights view_financials
         * @property {boolean|null} [manage_ceg] CMsgAppRights manage_ceg
         * @property {boolean|null} [manage_signing] CMsgAppRights manage_signing
         * @property {boolean|null} [manage_cdkeys] CMsgAppRights manage_cdkeys
         * @property {boolean|null} [edit_marketing] CMsgAppRights edit_marketing
         * @property {boolean|null} [economy_support] CMsgAppRights economy_support
         * @property {boolean|null} [economy_support_supervisor] CMsgAppRights economy_support_supervisor
         * @property {boolean|null} [manage_pricing] CMsgAppRights manage_pricing
         * @property {boolean|null} [broadcast_live] CMsgAppRights broadcast_live
         * @property {boolean|null} [view_marketing_traffic] CMsgAppRights view_marketing_traffic
         * @property {boolean|null} [edit_store_display_content] CMsgAppRights edit_store_display_content
         */
    
        /**
         * Constructs a new CMsgAppRights.
         * @exports CMsgAppRights
         * @classdesc Represents a CMsgAppRights.
         * @implements ICMsgAppRights
         * @constructor
         * @param {ICMsgAppRights=} [properties] Properties to set
         */
        function CMsgAppRights(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgAppRights edit_info.
         * @member {boolean} edit_info
         * @memberof CMsgAppRights
         * @instance
         */
        CMsgAppRights.prototype.edit_info = false;
    
        /**
         * CMsgAppRights publish.
         * @member {boolean} publish
         * @memberof CMsgAppRights
         * @instance
         */
        CMsgAppRights.prototype.publish = false;
    
        /**
         * CMsgAppRights view_error_data.
         * @member {boolean} view_error_data
         * @memberof CMsgAppRights
         * @instance
         */
        CMsgAppRights.prototype.view_error_data = false;
    
        /**
         * CMsgAppRights download.
         * @member {boolean} download
         * @memberof CMsgAppRights
         * @instance
         */
        CMsgAppRights.prototype.download = false;
    
        /**
         * CMsgAppRights upload_cdkeys.
         * @member {boolean} upload_cdkeys
         * @memberof CMsgAppRights
         * @instance
         */
        CMsgAppRights.prototype.upload_cdkeys = false;
    
        /**
         * CMsgAppRights generate_cdkeys.
         * @member {boolean} generate_cdkeys
         * @memberof CMsgAppRights
         * @instance
         */
        CMsgAppRights.prototype.generate_cdkeys = false;
    
        /**
         * CMsgAppRights view_financials.
         * @member {boolean} view_financials
         * @memberof CMsgAppRights
         * @instance
         */
        CMsgAppRights.prototype.view_financials = false;
    
        /**
         * CMsgAppRights manage_ceg.
         * @member {boolean} manage_ceg
         * @memberof CMsgAppRights
         * @instance
         */
        CMsgAppRights.prototype.manage_ceg = false;
    
        /**
         * CMsgAppRights manage_signing.
         * @member {boolean} manage_signing
         * @memberof CMsgAppRights
         * @instance
         */
        CMsgAppRights.prototype.manage_signing = false;
    
        /**
         * CMsgAppRights manage_cdkeys.
         * @member {boolean} manage_cdkeys
         * @memberof CMsgAppRights
         * @instance
         */
        CMsgAppRights.prototype.manage_cdkeys = false;
    
        /**
         * CMsgAppRights edit_marketing.
         * @member {boolean} edit_marketing
         * @memberof CMsgAppRights
         * @instance
         */
        CMsgAppRights.prototype.edit_marketing = false;
    
        /**
         * CMsgAppRights economy_support.
         * @member {boolean} economy_support
         * @memberof CMsgAppRights
         * @instance
         */
        CMsgAppRights.prototype.economy_support = false;
    
        /**
         * CMsgAppRights economy_support_supervisor.
         * @member {boolean} economy_support_supervisor
         * @memberof CMsgAppRights
         * @instance
         */
        CMsgAppRights.prototype.economy_support_supervisor = false;
    
        /**
         * CMsgAppRights manage_pricing.
         * @member {boolean} manage_pricing
         * @memberof CMsgAppRights
         * @instance
         */
        CMsgAppRights.prototype.manage_pricing = false;
    
        /**
         * CMsgAppRights broadcast_live.
         * @member {boolean} broadcast_live
         * @memberof CMsgAppRights
         * @instance
         */
        CMsgAppRights.prototype.broadcast_live = false;
    
        /**
         * CMsgAppRights view_marketing_traffic.
         * @member {boolean} view_marketing_traffic
         * @memberof CMsgAppRights
         * @instance
         */
        CMsgAppRights.prototype.view_marketing_traffic = false;
    
        /**
         * CMsgAppRights edit_store_display_content.
         * @member {boolean} edit_store_display_content
         * @memberof CMsgAppRights
         * @instance
         */
        CMsgAppRights.prototype.edit_store_display_content = false;
    
        /**
         * Creates a new CMsgAppRights instance using the specified properties.
         * @function create
         * @memberof CMsgAppRights
         * @static
         * @param {ICMsgAppRights=} [properties] Properties to set
         * @returns {CMsgAppRights} CMsgAppRights instance
         */
        CMsgAppRights.create = function create(properties) {
            return new CMsgAppRights(properties);
        };
    
        /**
         * Encodes the specified CMsgAppRights message. Does not implicitly {@link CMsgAppRights.verify|verify} messages.
         * @function encode
         * @memberof CMsgAppRights
         * @static
         * @param {ICMsgAppRights} message CMsgAppRights message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgAppRights.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.edit_info != null && message.hasOwnProperty("edit_info"))
                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.edit_info);
            if (message.publish != null && message.hasOwnProperty("publish"))
                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.publish);
            if (message.view_error_data != null && message.hasOwnProperty("view_error_data"))
                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.view_error_data);
            if (message.download != null && message.hasOwnProperty("download"))
                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.download);
            if (message.upload_cdkeys != null && message.hasOwnProperty("upload_cdkeys"))
                writer.uint32(/* id 5, wireType 0 =*/40).bool(message.upload_cdkeys);
            if (message.generate_cdkeys != null && message.hasOwnProperty("generate_cdkeys"))
                writer.uint32(/* id 6, wireType 0 =*/48).bool(message.generate_cdkeys);
            if (message.view_financials != null && message.hasOwnProperty("view_financials"))
                writer.uint32(/* id 7, wireType 0 =*/56).bool(message.view_financials);
            if (message.manage_ceg != null && message.hasOwnProperty("manage_ceg"))
                writer.uint32(/* id 8, wireType 0 =*/64).bool(message.manage_ceg);
            if (message.manage_signing != null && message.hasOwnProperty("manage_signing"))
                writer.uint32(/* id 9, wireType 0 =*/72).bool(message.manage_signing);
            if (message.manage_cdkeys != null && message.hasOwnProperty("manage_cdkeys"))
                writer.uint32(/* id 10, wireType 0 =*/80).bool(message.manage_cdkeys);
            if (message.edit_marketing != null && message.hasOwnProperty("edit_marketing"))
                writer.uint32(/* id 11, wireType 0 =*/88).bool(message.edit_marketing);
            if (message.economy_support != null && message.hasOwnProperty("economy_support"))
                writer.uint32(/* id 12, wireType 0 =*/96).bool(message.economy_support);
            if (message.economy_support_supervisor != null && message.hasOwnProperty("economy_support_supervisor"))
                writer.uint32(/* id 13, wireType 0 =*/104).bool(message.economy_support_supervisor);
            if (message.manage_pricing != null && message.hasOwnProperty("manage_pricing"))
                writer.uint32(/* id 14, wireType 0 =*/112).bool(message.manage_pricing);
            if (message.broadcast_live != null && message.hasOwnProperty("broadcast_live"))
                writer.uint32(/* id 15, wireType 0 =*/120).bool(message.broadcast_live);
            if (message.view_marketing_traffic != null && message.hasOwnProperty("view_marketing_traffic"))
                writer.uint32(/* id 16, wireType 0 =*/128).bool(message.view_marketing_traffic);
            if (message.edit_store_display_content != null && message.hasOwnProperty("edit_store_display_content"))
                writer.uint32(/* id 17, wireType 0 =*/136).bool(message.edit_store_display_content);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgAppRights message, length delimited. Does not implicitly {@link CMsgAppRights.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgAppRights
         * @static
         * @param {ICMsgAppRights} message CMsgAppRights message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgAppRights.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgAppRights message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgAppRights
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgAppRights} CMsgAppRights
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgAppRights.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgAppRights();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.edit_info = reader.bool();
                    break;
                case 2:
                    message.publish = reader.bool();
                    break;
                case 3:
                    message.view_error_data = reader.bool();
                    break;
                case 4:
                    message.download = reader.bool();
                    break;
                case 5:
                    message.upload_cdkeys = reader.bool();
                    break;
                case 6:
                    message.generate_cdkeys = reader.bool();
                    break;
                case 7:
                    message.view_financials = reader.bool();
                    break;
                case 8:
                    message.manage_ceg = reader.bool();
                    break;
                case 9:
                    message.manage_signing = reader.bool();
                    break;
                case 10:
                    message.manage_cdkeys = reader.bool();
                    break;
                case 11:
                    message.edit_marketing = reader.bool();
                    break;
                case 12:
                    message.economy_support = reader.bool();
                    break;
                case 13:
                    message.economy_support_supervisor = reader.bool();
                    break;
                case 14:
                    message.manage_pricing = reader.bool();
                    break;
                case 15:
                    message.broadcast_live = reader.bool();
                    break;
                case 16:
                    message.view_marketing_traffic = reader.bool();
                    break;
                case 17:
                    message.edit_store_display_content = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgAppRights message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgAppRights
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgAppRights} CMsgAppRights
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgAppRights.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgAppRights message.
         * @function verify
         * @memberof CMsgAppRights
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgAppRights.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.edit_info != null && message.hasOwnProperty("edit_info"))
                if (typeof message.edit_info !== "boolean")
                    return "edit_info: boolean expected";
            if (message.publish != null && message.hasOwnProperty("publish"))
                if (typeof message.publish !== "boolean")
                    return "publish: boolean expected";
            if (message.view_error_data != null && message.hasOwnProperty("view_error_data"))
                if (typeof message.view_error_data !== "boolean")
                    return "view_error_data: boolean expected";
            if (message.download != null && message.hasOwnProperty("download"))
                if (typeof message.download !== "boolean")
                    return "download: boolean expected";
            if (message.upload_cdkeys != null && message.hasOwnProperty("upload_cdkeys"))
                if (typeof message.upload_cdkeys !== "boolean")
                    return "upload_cdkeys: boolean expected";
            if (message.generate_cdkeys != null && message.hasOwnProperty("generate_cdkeys"))
                if (typeof message.generate_cdkeys !== "boolean")
                    return "generate_cdkeys: boolean expected";
            if (message.view_financials != null && message.hasOwnProperty("view_financials"))
                if (typeof message.view_financials !== "boolean")
                    return "view_financials: boolean expected";
            if (message.manage_ceg != null && message.hasOwnProperty("manage_ceg"))
                if (typeof message.manage_ceg !== "boolean")
                    return "manage_ceg: boolean expected";
            if (message.manage_signing != null && message.hasOwnProperty("manage_signing"))
                if (typeof message.manage_signing !== "boolean")
                    return "manage_signing: boolean expected";
            if (message.manage_cdkeys != null && message.hasOwnProperty("manage_cdkeys"))
                if (typeof message.manage_cdkeys !== "boolean")
                    return "manage_cdkeys: boolean expected";
            if (message.edit_marketing != null && message.hasOwnProperty("edit_marketing"))
                if (typeof message.edit_marketing !== "boolean")
                    return "edit_marketing: boolean expected";
            if (message.economy_support != null && message.hasOwnProperty("economy_support"))
                if (typeof message.economy_support !== "boolean")
                    return "economy_support: boolean expected";
            if (message.economy_support_supervisor != null && message.hasOwnProperty("economy_support_supervisor"))
                if (typeof message.economy_support_supervisor !== "boolean")
                    return "economy_support_supervisor: boolean expected";
            if (message.manage_pricing != null && message.hasOwnProperty("manage_pricing"))
                if (typeof message.manage_pricing !== "boolean")
                    return "manage_pricing: boolean expected";
            if (message.broadcast_live != null && message.hasOwnProperty("broadcast_live"))
                if (typeof message.broadcast_live !== "boolean")
                    return "broadcast_live: boolean expected";
            if (message.view_marketing_traffic != null && message.hasOwnProperty("view_marketing_traffic"))
                if (typeof message.view_marketing_traffic !== "boolean")
                    return "view_marketing_traffic: boolean expected";
            if (message.edit_store_display_content != null && message.hasOwnProperty("edit_store_display_content"))
                if (typeof message.edit_store_display_content !== "boolean")
                    return "edit_store_display_content: boolean expected";
            return null;
        };
    
        /**
         * Creates a CMsgAppRights message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgAppRights
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgAppRights} CMsgAppRights
         */
        CMsgAppRights.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgAppRights)
                return object;
            var message = new $root.CMsgAppRights();
            if (object.edit_info != null)
                message.edit_info = Boolean(object.edit_info);
            if (object.publish != null)
                message.publish = Boolean(object.publish);
            if (object.view_error_data != null)
                message.view_error_data = Boolean(object.view_error_data);
            if (object.download != null)
                message.download = Boolean(object.download);
            if (object.upload_cdkeys != null)
                message.upload_cdkeys = Boolean(object.upload_cdkeys);
            if (object.generate_cdkeys != null)
                message.generate_cdkeys = Boolean(object.generate_cdkeys);
            if (object.view_financials != null)
                message.view_financials = Boolean(object.view_financials);
            if (object.manage_ceg != null)
                message.manage_ceg = Boolean(object.manage_ceg);
            if (object.manage_signing != null)
                message.manage_signing = Boolean(object.manage_signing);
            if (object.manage_cdkeys != null)
                message.manage_cdkeys = Boolean(object.manage_cdkeys);
            if (object.edit_marketing != null)
                message.edit_marketing = Boolean(object.edit_marketing);
            if (object.economy_support != null)
                message.economy_support = Boolean(object.economy_support);
            if (object.economy_support_supervisor != null)
                message.economy_support_supervisor = Boolean(object.economy_support_supervisor);
            if (object.manage_pricing != null)
                message.manage_pricing = Boolean(object.manage_pricing);
            if (object.broadcast_live != null)
                message.broadcast_live = Boolean(object.broadcast_live);
            if (object.view_marketing_traffic != null)
                message.view_marketing_traffic = Boolean(object.view_marketing_traffic);
            if (object.edit_store_display_content != null)
                message.edit_store_display_content = Boolean(object.edit_store_display_content);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgAppRights message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgAppRights
         * @static
         * @param {CMsgAppRights} message CMsgAppRights
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgAppRights.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.edit_info = false;
                object.publish = false;
                object.view_error_data = false;
                object.download = false;
                object.upload_cdkeys = false;
                object.generate_cdkeys = false;
                object.view_financials = false;
                object.manage_ceg = false;
                object.manage_signing = false;
                object.manage_cdkeys = false;
                object.edit_marketing = false;
                object.economy_support = false;
                object.economy_support_supervisor = false;
                object.manage_pricing = false;
                object.broadcast_live = false;
                object.view_marketing_traffic = false;
                object.edit_store_display_content = false;
            }
            if (message.edit_info != null && message.hasOwnProperty("edit_info"))
                object.edit_info = message.edit_info;
            if (message.publish != null && message.hasOwnProperty("publish"))
                object.publish = message.publish;
            if (message.view_error_data != null && message.hasOwnProperty("view_error_data"))
                object.view_error_data = message.view_error_data;
            if (message.download != null && message.hasOwnProperty("download"))
                object.download = message.download;
            if (message.upload_cdkeys != null && message.hasOwnProperty("upload_cdkeys"))
                object.upload_cdkeys = message.upload_cdkeys;
            if (message.generate_cdkeys != null && message.hasOwnProperty("generate_cdkeys"))
                object.generate_cdkeys = message.generate_cdkeys;
            if (message.view_financials != null && message.hasOwnProperty("view_financials"))
                object.view_financials = message.view_financials;
            if (message.manage_ceg != null && message.hasOwnProperty("manage_ceg"))
                object.manage_ceg = message.manage_ceg;
            if (message.manage_signing != null && message.hasOwnProperty("manage_signing"))
                object.manage_signing = message.manage_signing;
            if (message.manage_cdkeys != null && message.hasOwnProperty("manage_cdkeys"))
                object.manage_cdkeys = message.manage_cdkeys;
            if (message.edit_marketing != null && message.hasOwnProperty("edit_marketing"))
                object.edit_marketing = message.edit_marketing;
            if (message.economy_support != null && message.hasOwnProperty("economy_support"))
                object.economy_support = message.economy_support;
            if (message.economy_support_supervisor != null && message.hasOwnProperty("economy_support_supervisor"))
                object.economy_support_supervisor = message.economy_support_supervisor;
            if (message.manage_pricing != null && message.hasOwnProperty("manage_pricing"))
                object.manage_pricing = message.manage_pricing;
            if (message.broadcast_live != null && message.hasOwnProperty("broadcast_live"))
                object.broadcast_live = message.broadcast_live;
            if (message.view_marketing_traffic != null && message.hasOwnProperty("view_marketing_traffic"))
                object.view_marketing_traffic = message.view_marketing_traffic;
            if (message.edit_store_display_content != null && message.hasOwnProperty("edit_store_display_content"))
                object.edit_store_display_content = message.edit_store_display_content;
            return object;
        };
    
        /**
         * Converts this CMsgAppRights to JSON.
         * @function toJSON
         * @memberof CMsgAppRights
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgAppRights.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgAppRights;
    })();
    
    $root.CCuratorPreferences = (function() {
    
        /**
         * Properties of a CCuratorPreferences.
         * @exports ICCuratorPreferences
         * @interface ICCuratorPreferences
         * @property {number|null} [supported_languages] CCuratorPreferences supported_languages
         * @property {boolean|null} [platform_windows] CCuratorPreferences platform_windows
         * @property {boolean|null} [platform_mac] CCuratorPreferences platform_mac
         * @property {boolean|null} [platform_linux] CCuratorPreferences platform_linux
         * @property {boolean|null} [vr_content] CCuratorPreferences vr_content
         * @property {boolean|null} [adult_content_violence] CCuratorPreferences adult_content_violence
         * @property {boolean|null} [adult_content_sex] CCuratorPreferences adult_content_sex
         * @property {number|null} [timestamp_updated] CCuratorPreferences timestamp_updated
         * @property {Array.<number>|null} [tagids_curated] CCuratorPreferences tagids_curated
         * @property {Array.<number>|null} [tagids_filtered] CCuratorPreferences tagids_filtered
         * @property {string|null} [website_title] CCuratorPreferences website_title
         * @property {string|null} [website_url] CCuratorPreferences website_url
         * @property {string|null} [discussion_url] CCuratorPreferences discussion_url
         * @property {boolean|null} [show_broadcast] CCuratorPreferences show_broadcast
         */
    
        /**
         * Constructs a new CCuratorPreferences.
         * @exports CCuratorPreferences
         * @classdesc Represents a CCuratorPreferences.
         * @implements ICCuratorPreferences
         * @constructor
         * @param {ICCuratorPreferences=} [properties] Properties to set
         */
        function CCuratorPreferences(properties) {
            this.tagids_curated = [];
            this.tagids_filtered = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CCuratorPreferences supported_languages.
         * @member {number} supported_languages
         * @memberof CCuratorPreferences
         * @instance
         */
        CCuratorPreferences.prototype.supported_languages = 0;
    
        /**
         * CCuratorPreferences platform_windows.
         * @member {boolean} platform_windows
         * @memberof CCuratorPreferences
         * @instance
         */
        CCuratorPreferences.prototype.platform_windows = false;
    
        /**
         * CCuratorPreferences platform_mac.
         * @member {boolean} platform_mac
         * @memberof CCuratorPreferences
         * @instance
         */
        CCuratorPreferences.prototype.platform_mac = false;
    
        /**
         * CCuratorPreferences platform_linux.
         * @member {boolean} platform_linux
         * @memberof CCuratorPreferences
         * @instance
         */
        CCuratorPreferences.prototype.platform_linux = false;
    
        /**
         * CCuratorPreferences vr_content.
         * @member {boolean} vr_content
         * @memberof CCuratorPreferences
         * @instance
         */
        CCuratorPreferences.prototype.vr_content = false;
    
        /**
         * CCuratorPreferences adult_content_violence.
         * @member {boolean} adult_content_violence
         * @memberof CCuratorPreferences
         * @instance
         */
        CCuratorPreferences.prototype.adult_content_violence = false;
    
        /**
         * CCuratorPreferences adult_content_sex.
         * @member {boolean} adult_content_sex
         * @memberof CCuratorPreferences
         * @instance
         */
        CCuratorPreferences.prototype.adult_content_sex = false;
    
        /**
         * CCuratorPreferences timestamp_updated.
         * @member {number} timestamp_updated
         * @memberof CCuratorPreferences
         * @instance
         */
        CCuratorPreferences.prototype.timestamp_updated = 0;
    
        /**
         * CCuratorPreferences tagids_curated.
         * @member {Array.<number>} tagids_curated
         * @memberof CCuratorPreferences
         * @instance
         */
        CCuratorPreferences.prototype.tagids_curated = $util.emptyArray;
    
        /**
         * CCuratorPreferences tagids_filtered.
         * @member {Array.<number>} tagids_filtered
         * @memberof CCuratorPreferences
         * @instance
         */
        CCuratorPreferences.prototype.tagids_filtered = $util.emptyArray;
    
        /**
         * CCuratorPreferences website_title.
         * @member {string} website_title
         * @memberof CCuratorPreferences
         * @instance
         */
        CCuratorPreferences.prototype.website_title = "";
    
        /**
         * CCuratorPreferences website_url.
         * @member {string} website_url
         * @memberof CCuratorPreferences
         * @instance
         */
        CCuratorPreferences.prototype.website_url = "";
    
        /**
         * CCuratorPreferences discussion_url.
         * @member {string} discussion_url
         * @memberof CCuratorPreferences
         * @instance
         */
        CCuratorPreferences.prototype.discussion_url = "";
    
        /**
         * CCuratorPreferences show_broadcast.
         * @member {boolean} show_broadcast
         * @memberof CCuratorPreferences
         * @instance
         */
        CCuratorPreferences.prototype.show_broadcast = false;
    
        /**
         * Creates a new CCuratorPreferences instance using the specified properties.
         * @function create
         * @memberof CCuratorPreferences
         * @static
         * @param {ICCuratorPreferences=} [properties] Properties to set
         * @returns {CCuratorPreferences} CCuratorPreferences instance
         */
        CCuratorPreferences.create = function create(properties) {
            return new CCuratorPreferences(properties);
        };
    
        /**
         * Encodes the specified CCuratorPreferences message. Does not implicitly {@link CCuratorPreferences.verify|verify} messages.
         * @function encode
         * @memberof CCuratorPreferences
         * @static
         * @param {ICCuratorPreferences} message CCuratorPreferences message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCuratorPreferences.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.supported_languages != null && message.hasOwnProperty("supported_languages"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.supported_languages);
            if (message.platform_windows != null && message.hasOwnProperty("platform_windows"))
                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.platform_windows);
            if (message.platform_mac != null && message.hasOwnProperty("platform_mac"))
                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.platform_mac);
            if (message.platform_linux != null && message.hasOwnProperty("platform_linux"))
                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.platform_linux);
            if (message.vr_content != null && message.hasOwnProperty("vr_content"))
                writer.uint32(/* id 5, wireType 0 =*/40).bool(message.vr_content);
            if (message.adult_content_violence != null && message.hasOwnProperty("adult_content_violence"))
                writer.uint32(/* id 6, wireType 0 =*/48).bool(message.adult_content_violence);
            if (message.adult_content_sex != null && message.hasOwnProperty("adult_content_sex"))
                writer.uint32(/* id 7, wireType 0 =*/56).bool(message.adult_content_sex);
            if (message.timestamp_updated != null && message.hasOwnProperty("timestamp_updated"))
                writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.timestamp_updated);
            if (message.tagids_curated != null && message.tagids_curated.length)
                for (var i = 0; i < message.tagids_curated.length; ++i)
                    writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.tagids_curated[i]);
            if (message.tagids_filtered != null && message.tagids_filtered.length)
                for (var i = 0; i < message.tagids_filtered.length; ++i)
                    writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.tagids_filtered[i]);
            if (message.website_title != null && message.hasOwnProperty("website_title"))
                writer.uint32(/* id 11, wireType 2 =*/90).string(message.website_title);
            if (message.website_url != null && message.hasOwnProperty("website_url"))
                writer.uint32(/* id 12, wireType 2 =*/98).string(message.website_url);
            if (message.discussion_url != null && message.hasOwnProperty("discussion_url"))
                writer.uint32(/* id 13, wireType 2 =*/106).string(message.discussion_url);
            if (message.show_broadcast != null && message.hasOwnProperty("show_broadcast"))
                writer.uint32(/* id 14, wireType 0 =*/112).bool(message.show_broadcast);
            return writer;
        };
    
        /**
         * Encodes the specified CCuratorPreferences message, length delimited. Does not implicitly {@link CCuratorPreferences.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CCuratorPreferences
         * @static
         * @param {ICCuratorPreferences} message CCuratorPreferences message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCuratorPreferences.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CCuratorPreferences message from the specified reader or buffer.
         * @function decode
         * @memberof CCuratorPreferences
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CCuratorPreferences} CCuratorPreferences
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCuratorPreferences.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CCuratorPreferences();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.supported_languages = reader.uint32();
                    break;
                case 2:
                    message.platform_windows = reader.bool();
                    break;
                case 3:
                    message.platform_mac = reader.bool();
                    break;
                case 4:
                    message.platform_linux = reader.bool();
                    break;
                case 5:
                    message.vr_content = reader.bool();
                    break;
                case 6:
                    message.adult_content_violence = reader.bool();
                    break;
                case 7:
                    message.adult_content_sex = reader.bool();
                    break;
                case 8:
                    message.timestamp_updated = reader.uint32();
                    break;
                case 9:
                    if (!(message.tagids_curated && message.tagids_curated.length))
                        message.tagids_curated = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.tagids_curated.push(reader.uint32());
                    } else
                        message.tagids_curated.push(reader.uint32());
                    break;
                case 10:
                    if (!(message.tagids_filtered && message.tagids_filtered.length))
                        message.tagids_filtered = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.tagids_filtered.push(reader.uint32());
                    } else
                        message.tagids_filtered.push(reader.uint32());
                    break;
                case 11:
                    message.website_title = reader.string();
                    break;
                case 12:
                    message.website_url = reader.string();
                    break;
                case 13:
                    message.discussion_url = reader.string();
                    break;
                case 14:
                    message.show_broadcast = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CCuratorPreferences message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CCuratorPreferences
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CCuratorPreferences} CCuratorPreferences
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCuratorPreferences.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CCuratorPreferences message.
         * @function verify
         * @memberof CCuratorPreferences
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CCuratorPreferences.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.supported_languages != null && message.hasOwnProperty("supported_languages"))
                if (!$util.isInteger(message.supported_languages))
                    return "supported_languages: integer expected";
            if (message.platform_windows != null && message.hasOwnProperty("platform_windows"))
                if (typeof message.platform_windows !== "boolean")
                    return "platform_windows: boolean expected";
            if (message.platform_mac != null && message.hasOwnProperty("platform_mac"))
                if (typeof message.platform_mac !== "boolean")
                    return "platform_mac: boolean expected";
            if (message.platform_linux != null && message.hasOwnProperty("platform_linux"))
                if (typeof message.platform_linux !== "boolean")
                    return "platform_linux: boolean expected";
            if (message.vr_content != null && message.hasOwnProperty("vr_content"))
                if (typeof message.vr_content !== "boolean")
                    return "vr_content: boolean expected";
            if (message.adult_content_violence != null && message.hasOwnProperty("adult_content_violence"))
                if (typeof message.adult_content_violence !== "boolean")
                    return "adult_content_violence: boolean expected";
            if (message.adult_content_sex != null && message.hasOwnProperty("adult_content_sex"))
                if (typeof message.adult_content_sex !== "boolean")
                    return "adult_content_sex: boolean expected";
            if (message.timestamp_updated != null && message.hasOwnProperty("timestamp_updated"))
                if (!$util.isInteger(message.timestamp_updated))
                    return "timestamp_updated: integer expected";
            if (message.tagids_curated != null && message.hasOwnProperty("tagids_curated")) {
                if (!Array.isArray(message.tagids_curated))
                    return "tagids_curated: array expected";
                for (var i = 0; i < message.tagids_curated.length; ++i)
                    if (!$util.isInteger(message.tagids_curated[i]))
                        return "tagids_curated: integer[] expected";
            }
            if (message.tagids_filtered != null && message.hasOwnProperty("tagids_filtered")) {
                if (!Array.isArray(message.tagids_filtered))
                    return "tagids_filtered: array expected";
                for (var i = 0; i < message.tagids_filtered.length; ++i)
                    if (!$util.isInteger(message.tagids_filtered[i]))
                        return "tagids_filtered: integer[] expected";
            }
            if (message.website_title != null && message.hasOwnProperty("website_title"))
                if (!$util.isString(message.website_title))
                    return "website_title: string expected";
            if (message.website_url != null && message.hasOwnProperty("website_url"))
                if (!$util.isString(message.website_url))
                    return "website_url: string expected";
            if (message.discussion_url != null && message.hasOwnProperty("discussion_url"))
                if (!$util.isString(message.discussion_url))
                    return "discussion_url: string expected";
            if (message.show_broadcast != null && message.hasOwnProperty("show_broadcast"))
                if (typeof message.show_broadcast !== "boolean")
                    return "show_broadcast: boolean expected";
            return null;
        };
    
        /**
         * Creates a CCuratorPreferences message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CCuratorPreferences
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CCuratorPreferences} CCuratorPreferences
         */
        CCuratorPreferences.fromObject = function fromObject(object) {
            if (object instanceof $root.CCuratorPreferences)
                return object;
            var message = new $root.CCuratorPreferences();
            if (object.supported_languages != null)
                message.supported_languages = object.supported_languages >>> 0;
            if (object.platform_windows != null)
                message.platform_windows = Boolean(object.platform_windows);
            if (object.platform_mac != null)
                message.platform_mac = Boolean(object.platform_mac);
            if (object.platform_linux != null)
                message.platform_linux = Boolean(object.platform_linux);
            if (object.vr_content != null)
                message.vr_content = Boolean(object.vr_content);
            if (object.adult_content_violence != null)
                message.adult_content_violence = Boolean(object.adult_content_violence);
            if (object.adult_content_sex != null)
                message.adult_content_sex = Boolean(object.adult_content_sex);
            if (object.timestamp_updated != null)
                message.timestamp_updated = object.timestamp_updated >>> 0;
            if (object.tagids_curated) {
                if (!Array.isArray(object.tagids_curated))
                    throw TypeError(".CCuratorPreferences.tagids_curated: array expected");
                message.tagids_curated = [];
                for (var i = 0; i < object.tagids_curated.length; ++i)
                    message.tagids_curated[i] = object.tagids_curated[i] >>> 0;
            }
            if (object.tagids_filtered) {
                if (!Array.isArray(object.tagids_filtered))
                    throw TypeError(".CCuratorPreferences.tagids_filtered: array expected");
                message.tagids_filtered = [];
                for (var i = 0; i < object.tagids_filtered.length; ++i)
                    message.tagids_filtered[i] = object.tagids_filtered[i] >>> 0;
            }
            if (object.website_title != null)
                message.website_title = String(object.website_title);
            if (object.website_url != null)
                message.website_url = String(object.website_url);
            if (object.discussion_url != null)
                message.discussion_url = String(object.discussion_url);
            if (object.show_broadcast != null)
                message.show_broadcast = Boolean(object.show_broadcast);
            return message;
        };
    
        /**
         * Creates a plain object from a CCuratorPreferences message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CCuratorPreferences
         * @static
         * @param {CCuratorPreferences} message CCuratorPreferences
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CCuratorPreferences.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.tagids_curated = [];
                object.tagids_filtered = [];
            }
            if (options.defaults) {
                object.supported_languages = 0;
                object.platform_windows = false;
                object.platform_mac = false;
                object.platform_linux = false;
                object.vr_content = false;
                object.adult_content_violence = false;
                object.adult_content_sex = false;
                object.timestamp_updated = 0;
                object.website_title = "";
                object.website_url = "";
                object.discussion_url = "";
                object.show_broadcast = false;
            }
            if (message.supported_languages != null && message.hasOwnProperty("supported_languages"))
                object.supported_languages = message.supported_languages;
            if (message.platform_windows != null && message.hasOwnProperty("platform_windows"))
                object.platform_windows = message.platform_windows;
            if (message.platform_mac != null && message.hasOwnProperty("platform_mac"))
                object.platform_mac = message.platform_mac;
            if (message.platform_linux != null && message.hasOwnProperty("platform_linux"))
                object.platform_linux = message.platform_linux;
            if (message.vr_content != null && message.hasOwnProperty("vr_content"))
                object.vr_content = message.vr_content;
            if (message.adult_content_violence != null && message.hasOwnProperty("adult_content_violence"))
                object.adult_content_violence = message.adult_content_violence;
            if (message.adult_content_sex != null && message.hasOwnProperty("adult_content_sex"))
                object.adult_content_sex = message.adult_content_sex;
            if (message.timestamp_updated != null && message.hasOwnProperty("timestamp_updated"))
                object.timestamp_updated = message.timestamp_updated;
            if (message.tagids_curated && message.tagids_curated.length) {
                object.tagids_curated = [];
                for (var j = 0; j < message.tagids_curated.length; ++j)
                    object.tagids_curated[j] = message.tagids_curated[j];
            }
            if (message.tagids_filtered && message.tagids_filtered.length) {
                object.tagids_filtered = [];
                for (var j = 0; j < message.tagids_filtered.length; ++j)
                    object.tagids_filtered[j] = message.tagids_filtered[j];
            }
            if (message.website_title != null && message.hasOwnProperty("website_title"))
                object.website_title = message.website_title;
            if (message.website_url != null && message.hasOwnProperty("website_url"))
                object.website_url = message.website_url;
            if (message.discussion_url != null && message.hasOwnProperty("discussion_url"))
                object.discussion_url = message.discussion_url;
            if (message.show_broadcast != null && message.hasOwnProperty("show_broadcast"))
                object.show_broadcast = message.show_broadcast;
            return object;
        };
    
        /**
         * Converts this CCuratorPreferences to JSON.
         * @function toJSON
         * @memberof CCuratorPreferences
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CCuratorPreferences.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CCuratorPreferences;
    })();
    
    $root.CLocalizationToken = (function() {
    
        /**
         * Properties of a CLocalizationToken.
         * @exports ICLocalizationToken
         * @interface ICLocalizationToken
         * @property {number|null} [language] CLocalizationToken language
         * @property {string|null} [localized_string] CLocalizationToken localized_string
         */
    
        /**
         * Constructs a new CLocalizationToken.
         * @exports CLocalizationToken
         * @classdesc Represents a CLocalizationToken.
         * @implements ICLocalizationToken
         * @constructor
         * @param {ICLocalizationToken=} [properties] Properties to set
         */
        function CLocalizationToken(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CLocalizationToken language.
         * @member {number} language
         * @memberof CLocalizationToken
         * @instance
         */
        CLocalizationToken.prototype.language = 0;
    
        /**
         * CLocalizationToken localized_string.
         * @member {string} localized_string
         * @memberof CLocalizationToken
         * @instance
         */
        CLocalizationToken.prototype.localized_string = "";
    
        /**
         * Creates a new CLocalizationToken instance using the specified properties.
         * @function create
         * @memberof CLocalizationToken
         * @static
         * @param {ICLocalizationToken=} [properties] Properties to set
         * @returns {CLocalizationToken} CLocalizationToken instance
         */
        CLocalizationToken.create = function create(properties) {
            return new CLocalizationToken(properties);
        };
    
        /**
         * Encodes the specified CLocalizationToken message. Does not implicitly {@link CLocalizationToken.verify|verify} messages.
         * @function encode
         * @memberof CLocalizationToken
         * @static
         * @param {ICLocalizationToken} message CLocalizationToken message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CLocalizationToken.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.language != null && message.hasOwnProperty("language"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.language);
            if (message.localized_string != null && message.hasOwnProperty("localized_string"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.localized_string);
            return writer;
        };
    
        /**
         * Encodes the specified CLocalizationToken message, length delimited. Does not implicitly {@link CLocalizationToken.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CLocalizationToken
         * @static
         * @param {ICLocalizationToken} message CLocalizationToken message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CLocalizationToken.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CLocalizationToken message from the specified reader or buffer.
         * @function decode
         * @memberof CLocalizationToken
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CLocalizationToken} CLocalizationToken
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CLocalizationToken.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CLocalizationToken();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.language = reader.uint32();
                    break;
                case 2:
                    message.localized_string = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CLocalizationToken message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CLocalizationToken
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CLocalizationToken} CLocalizationToken
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CLocalizationToken.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CLocalizationToken message.
         * @function verify
         * @memberof CLocalizationToken
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CLocalizationToken.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.language != null && message.hasOwnProperty("language"))
                if (!$util.isInteger(message.language))
                    return "language: integer expected";
            if (message.localized_string != null && message.hasOwnProperty("localized_string"))
                if (!$util.isString(message.localized_string))
                    return "localized_string: string expected";
            return null;
        };
    
        /**
         * Creates a CLocalizationToken message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CLocalizationToken
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CLocalizationToken} CLocalizationToken
         */
        CLocalizationToken.fromObject = function fromObject(object) {
            if (object instanceof $root.CLocalizationToken)
                return object;
            var message = new $root.CLocalizationToken();
            if (object.language != null)
                message.language = object.language >>> 0;
            if (object.localized_string != null)
                message.localized_string = String(object.localized_string);
            return message;
        };
    
        /**
         * Creates a plain object from a CLocalizationToken message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CLocalizationToken
         * @static
         * @param {CLocalizationToken} message CLocalizationToken
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CLocalizationToken.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.language = 0;
                object.localized_string = "";
            }
            if (message.language != null && message.hasOwnProperty("language"))
                object.language = message.language;
            if (message.localized_string != null && message.hasOwnProperty("localized_string"))
                object.localized_string = message.localized_string;
            return object;
        };
    
        /**
         * Converts this CLocalizationToken to JSON.
         * @function toJSON
         * @memberof CLocalizationToken
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CLocalizationToken.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CLocalizationToken;
    })();
    
    $root.CClanEventUserNewsTuple = (function() {
    
        /**
         * Properties of a CClanEventUserNewsTuple.
         * @exports ICClanEventUserNewsTuple
         * @interface ICClanEventUserNewsTuple
         * @property {number|null} [clanid] CClanEventUserNewsTuple clanid
         * @property {number|Long|null} [event_gid] CClanEventUserNewsTuple event_gid
         * @property {number|Long|null} [announcement_gid] CClanEventUserNewsTuple announcement_gid
         * @property {number|null} [rtime_start] CClanEventUserNewsTuple rtime_start
         * @property {number|null} [rtime_end] CClanEventUserNewsTuple rtime_end
         * @property {number|null} [priority_score] CClanEventUserNewsTuple priority_score
         * @property {number|null} [type] CClanEventUserNewsTuple type
         * @property {number|null} [clamp_range_slot] CClanEventUserNewsTuple clamp_range_slot
         * @property {number|null} [appid] CClanEventUserNewsTuple appid
         * @property {number|null} [rtime32_last_modified] CClanEventUserNewsTuple rtime32_last_modified
         */
    
        /**
         * Constructs a new CClanEventUserNewsTuple.
         * @exports CClanEventUserNewsTuple
         * @classdesc Represents a CClanEventUserNewsTuple.
         * @implements ICClanEventUserNewsTuple
         * @constructor
         * @param {ICClanEventUserNewsTuple=} [properties] Properties to set
         */
        function CClanEventUserNewsTuple(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CClanEventUserNewsTuple clanid.
         * @member {number} clanid
         * @memberof CClanEventUserNewsTuple
         * @instance
         */
        CClanEventUserNewsTuple.prototype.clanid = 0;
    
        /**
         * CClanEventUserNewsTuple event_gid.
         * @member {number|Long} event_gid
         * @memberof CClanEventUserNewsTuple
         * @instance
         */
        CClanEventUserNewsTuple.prototype.event_gid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CClanEventUserNewsTuple announcement_gid.
         * @member {number|Long} announcement_gid
         * @memberof CClanEventUserNewsTuple
         * @instance
         */
        CClanEventUserNewsTuple.prototype.announcement_gid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CClanEventUserNewsTuple rtime_start.
         * @member {number} rtime_start
         * @memberof CClanEventUserNewsTuple
         * @instance
         */
        CClanEventUserNewsTuple.prototype.rtime_start = 0;
    
        /**
         * CClanEventUserNewsTuple rtime_end.
         * @member {number} rtime_end
         * @memberof CClanEventUserNewsTuple
         * @instance
         */
        CClanEventUserNewsTuple.prototype.rtime_end = 0;
    
        /**
         * CClanEventUserNewsTuple priority_score.
         * @member {number} priority_score
         * @memberof CClanEventUserNewsTuple
         * @instance
         */
        CClanEventUserNewsTuple.prototype.priority_score = 0;
    
        /**
         * CClanEventUserNewsTuple type.
         * @member {number} type
         * @memberof CClanEventUserNewsTuple
         * @instance
         */
        CClanEventUserNewsTuple.prototype.type = 0;
    
        /**
         * CClanEventUserNewsTuple clamp_range_slot.
         * @member {number} clamp_range_slot
         * @memberof CClanEventUserNewsTuple
         * @instance
         */
        CClanEventUserNewsTuple.prototype.clamp_range_slot = 0;
    
        /**
         * CClanEventUserNewsTuple appid.
         * @member {number} appid
         * @memberof CClanEventUserNewsTuple
         * @instance
         */
        CClanEventUserNewsTuple.prototype.appid = 0;
    
        /**
         * CClanEventUserNewsTuple rtime32_last_modified.
         * @member {number} rtime32_last_modified
         * @memberof CClanEventUserNewsTuple
         * @instance
         */
        CClanEventUserNewsTuple.prototype.rtime32_last_modified = 0;
    
        /**
         * Creates a new CClanEventUserNewsTuple instance using the specified properties.
         * @function create
         * @memberof CClanEventUserNewsTuple
         * @static
         * @param {ICClanEventUserNewsTuple=} [properties] Properties to set
         * @returns {CClanEventUserNewsTuple} CClanEventUserNewsTuple instance
         */
        CClanEventUserNewsTuple.create = function create(properties) {
            return new CClanEventUserNewsTuple(properties);
        };
    
        /**
         * Encodes the specified CClanEventUserNewsTuple message. Does not implicitly {@link CClanEventUserNewsTuple.verify|verify} messages.
         * @function encode
         * @memberof CClanEventUserNewsTuple
         * @static
         * @param {ICClanEventUserNewsTuple} message CClanEventUserNewsTuple message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CClanEventUserNewsTuple.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.clanid != null && message.hasOwnProperty("clanid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.clanid);
            if (message.event_gid != null && message.hasOwnProperty("event_gid"))
                writer.uint32(/* id 2, wireType 1 =*/17).fixed64(message.event_gid);
            if (message.announcement_gid != null && message.hasOwnProperty("announcement_gid"))
                writer.uint32(/* id 3, wireType 1 =*/25).fixed64(message.announcement_gid);
            if (message.rtime_start != null && message.hasOwnProperty("rtime_start"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.rtime_start);
            if (message.rtime_end != null && message.hasOwnProperty("rtime_end"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.rtime_end);
            if (message.priority_score != null && message.hasOwnProperty("priority_score"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.priority_score);
            if (message.type != null && message.hasOwnProperty("type"))
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.type);
            if (message.clamp_range_slot != null && message.hasOwnProperty("clamp_range_slot"))
                writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.clamp_range_slot);
            if (message.appid != null && message.hasOwnProperty("appid"))
                writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.appid);
            if (message.rtime32_last_modified != null && message.hasOwnProperty("rtime32_last_modified"))
                writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.rtime32_last_modified);
            return writer;
        };
    
        /**
         * Encodes the specified CClanEventUserNewsTuple message, length delimited. Does not implicitly {@link CClanEventUserNewsTuple.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CClanEventUserNewsTuple
         * @static
         * @param {ICClanEventUserNewsTuple} message CClanEventUserNewsTuple message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CClanEventUserNewsTuple.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CClanEventUserNewsTuple message from the specified reader or buffer.
         * @function decode
         * @memberof CClanEventUserNewsTuple
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CClanEventUserNewsTuple} CClanEventUserNewsTuple
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CClanEventUserNewsTuple.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CClanEventUserNewsTuple();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.clanid = reader.uint32();
                    break;
                case 2:
                    message.event_gid = reader.fixed64();
                    break;
                case 3:
                    message.announcement_gid = reader.fixed64();
                    break;
                case 4:
                    message.rtime_start = reader.uint32();
                    break;
                case 5:
                    message.rtime_end = reader.uint32();
                    break;
                case 6:
                    message.priority_score = reader.uint32();
                    break;
                case 7:
                    message.type = reader.uint32();
                    break;
                case 8:
                    message.clamp_range_slot = reader.uint32();
                    break;
                case 9:
                    message.appid = reader.uint32();
                    break;
                case 10:
                    message.rtime32_last_modified = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CClanEventUserNewsTuple message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CClanEventUserNewsTuple
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CClanEventUserNewsTuple} CClanEventUserNewsTuple
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CClanEventUserNewsTuple.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CClanEventUserNewsTuple message.
         * @function verify
         * @memberof CClanEventUserNewsTuple
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CClanEventUserNewsTuple.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.clanid != null && message.hasOwnProperty("clanid"))
                if (!$util.isInteger(message.clanid))
                    return "clanid: integer expected";
            if (message.event_gid != null && message.hasOwnProperty("event_gid"))
                if (!$util.isInteger(message.event_gid) && !(message.event_gid && $util.isInteger(message.event_gid.low) && $util.isInteger(message.event_gid.high)))
                    return "event_gid: integer|Long expected";
            if (message.announcement_gid != null && message.hasOwnProperty("announcement_gid"))
                if (!$util.isInteger(message.announcement_gid) && !(message.announcement_gid && $util.isInteger(message.announcement_gid.low) && $util.isInteger(message.announcement_gid.high)))
                    return "announcement_gid: integer|Long expected";
            if (message.rtime_start != null && message.hasOwnProperty("rtime_start"))
                if (!$util.isInteger(message.rtime_start))
                    return "rtime_start: integer expected";
            if (message.rtime_end != null && message.hasOwnProperty("rtime_end"))
                if (!$util.isInteger(message.rtime_end))
                    return "rtime_end: integer expected";
            if (message.priority_score != null && message.hasOwnProperty("priority_score"))
                if (!$util.isInteger(message.priority_score))
                    return "priority_score: integer expected";
            if (message.type != null && message.hasOwnProperty("type"))
                if (!$util.isInteger(message.type))
                    return "type: integer expected";
            if (message.clamp_range_slot != null && message.hasOwnProperty("clamp_range_slot"))
                if (!$util.isInteger(message.clamp_range_slot))
                    return "clamp_range_slot: integer expected";
            if (message.appid != null && message.hasOwnProperty("appid"))
                if (!$util.isInteger(message.appid))
                    return "appid: integer expected";
            if (message.rtime32_last_modified != null && message.hasOwnProperty("rtime32_last_modified"))
                if (!$util.isInteger(message.rtime32_last_modified))
                    return "rtime32_last_modified: integer expected";
            return null;
        };
    
        /**
         * Creates a CClanEventUserNewsTuple message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CClanEventUserNewsTuple
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CClanEventUserNewsTuple} CClanEventUserNewsTuple
         */
        CClanEventUserNewsTuple.fromObject = function fromObject(object) {
            if (object instanceof $root.CClanEventUserNewsTuple)
                return object;
            var message = new $root.CClanEventUserNewsTuple();
            if (object.clanid != null)
                message.clanid = object.clanid >>> 0;
            if (object.event_gid != null)
                if ($util.Long)
                    (message.event_gid = $util.Long.fromValue(object.event_gid)).unsigned = false;
                else if (typeof object.event_gid === "string")
                    message.event_gid = parseInt(object.event_gid, 10);
                else if (typeof object.event_gid === "number")
                    message.event_gid = object.event_gid;
                else if (typeof object.event_gid === "object")
                    message.event_gid = new $util.LongBits(object.event_gid.low >>> 0, object.event_gid.high >>> 0).toNumber();
            if (object.announcement_gid != null)
                if ($util.Long)
                    (message.announcement_gid = $util.Long.fromValue(object.announcement_gid)).unsigned = false;
                else if (typeof object.announcement_gid === "string")
                    message.announcement_gid = parseInt(object.announcement_gid, 10);
                else if (typeof object.announcement_gid === "number")
                    message.announcement_gid = object.announcement_gid;
                else if (typeof object.announcement_gid === "object")
                    message.announcement_gid = new $util.LongBits(object.announcement_gid.low >>> 0, object.announcement_gid.high >>> 0).toNumber();
            if (object.rtime_start != null)
                message.rtime_start = object.rtime_start >>> 0;
            if (object.rtime_end != null)
                message.rtime_end = object.rtime_end >>> 0;
            if (object.priority_score != null)
                message.priority_score = object.priority_score >>> 0;
            if (object.type != null)
                message.type = object.type >>> 0;
            if (object.clamp_range_slot != null)
                message.clamp_range_slot = object.clamp_range_slot >>> 0;
            if (object.appid != null)
                message.appid = object.appid >>> 0;
            if (object.rtime32_last_modified != null)
                message.rtime32_last_modified = object.rtime32_last_modified >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CClanEventUserNewsTuple message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CClanEventUserNewsTuple
         * @static
         * @param {CClanEventUserNewsTuple} message CClanEventUserNewsTuple
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CClanEventUserNewsTuple.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.clanid = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.event_gid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.event_gid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.announcement_gid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.announcement_gid = options.longs === String ? "0" : 0;
                object.rtime_start = 0;
                object.rtime_end = 0;
                object.priority_score = 0;
                object.type = 0;
                object.clamp_range_slot = 0;
                object.appid = 0;
                object.rtime32_last_modified = 0;
            }
            if (message.clanid != null && message.hasOwnProperty("clanid"))
                object.clanid = message.clanid;
            if (message.event_gid != null && message.hasOwnProperty("event_gid"))
                if (typeof message.event_gid === "number")
                    object.event_gid = options.longs === String ? String(message.event_gid) : message.event_gid;
                else
                    object.event_gid = options.longs === String ? $util.Long.prototype.toString.call(message.event_gid) : options.longs === Number ? new $util.LongBits(message.event_gid.low >>> 0, message.event_gid.high >>> 0).toNumber() : message.event_gid;
            if (message.announcement_gid != null && message.hasOwnProperty("announcement_gid"))
                if (typeof message.announcement_gid === "number")
                    object.announcement_gid = options.longs === String ? String(message.announcement_gid) : message.announcement_gid;
                else
                    object.announcement_gid = options.longs === String ? $util.Long.prototype.toString.call(message.announcement_gid) : options.longs === Number ? new $util.LongBits(message.announcement_gid.low >>> 0, message.announcement_gid.high >>> 0).toNumber() : message.announcement_gid;
            if (message.rtime_start != null && message.hasOwnProperty("rtime_start"))
                object.rtime_start = message.rtime_start;
            if (message.rtime_end != null && message.hasOwnProperty("rtime_end"))
                object.rtime_end = message.rtime_end;
            if (message.priority_score != null && message.hasOwnProperty("priority_score"))
                object.priority_score = message.priority_score;
            if (message.type != null && message.hasOwnProperty("type"))
                object.type = message.type;
            if (message.clamp_range_slot != null && message.hasOwnProperty("clamp_range_slot"))
                object.clamp_range_slot = message.clamp_range_slot;
            if (message.appid != null && message.hasOwnProperty("appid"))
                object.appid = message.appid;
            if (message.rtime32_last_modified != null && message.hasOwnProperty("rtime32_last_modified"))
                object.rtime32_last_modified = message.rtime32_last_modified;
            return object;
        };
    
        /**
         * Converts this CClanEventUserNewsTuple to JSON.
         * @function toJSON
         * @memberof CClanEventUserNewsTuple
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CClanEventUserNewsTuple.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CClanEventUserNewsTuple;
    })();
    
    $root.CClanMatchEventByRange = (function() {
    
        /**
         * Properties of a CClanMatchEventByRange.
         * @exports ICClanMatchEventByRange
         * @interface ICClanMatchEventByRange
         * @property {number|null} [rtime_before] CClanMatchEventByRange rtime_before
         * @property {number|null} [rtime_after] CClanMatchEventByRange rtime_after
         * @property {number|null} [qualified] CClanMatchEventByRange qualified
         * @property {Array.<ICClanEventUserNewsTuple>|null} [events] CClanMatchEventByRange events
         */
    
        /**
         * Constructs a new CClanMatchEventByRange.
         * @exports CClanMatchEventByRange
         * @classdesc Represents a CClanMatchEventByRange.
         * @implements ICClanMatchEventByRange
         * @constructor
         * @param {ICClanMatchEventByRange=} [properties] Properties to set
         */
        function CClanMatchEventByRange(properties) {
            this.events = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CClanMatchEventByRange rtime_before.
         * @member {number} rtime_before
         * @memberof CClanMatchEventByRange
         * @instance
         */
        CClanMatchEventByRange.prototype.rtime_before = 0;
    
        /**
         * CClanMatchEventByRange rtime_after.
         * @member {number} rtime_after
         * @memberof CClanMatchEventByRange
         * @instance
         */
        CClanMatchEventByRange.prototype.rtime_after = 0;
    
        /**
         * CClanMatchEventByRange qualified.
         * @member {number} qualified
         * @memberof CClanMatchEventByRange
         * @instance
         */
        CClanMatchEventByRange.prototype.qualified = 0;
    
        /**
         * CClanMatchEventByRange events.
         * @member {Array.<ICClanEventUserNewsTuple>} events
         * @memberof CClanMatchEventByRange
         * @instance
         */
        CClanMatchEventByRange.prototype.events = $util.emptyArray;
    
        /**
         * Creates a new CClanMatchEventByRange instance using the specified properties.
         * @function create
         * @memberof CClanMatchEventByRange
         * @static
         * @param {ICClanMatchEventByRange=} [properties] Properties to set
         * @returns {CClanMatchEventByRange} CClanMatchEventByRange instance
         */
        CClanMatchEventByRange.create = function create(properties) {
            return new CClanMatchEventByRange(properties);
        };
    
        /**
         * Encodes the specified CClanMatchEventByRange message. Does not implicitly {@link CClanMatchEventByRange.verify|verify} messages.
         * @function encode
         * @memberof CClanMatchEventByRange
         * @static
         * @param {ICClanMatchEventByRange} message CClanMatchEventByRange message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CClanMatchEventByRange.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.rtime_before != null && message.hasOwnProperty("rtime_before"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.rtime_before);
            if (message.rtime_after != null && message.hasOwnProperty("rtime_after"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.rtime_after);
            if (message.qualified != null && message.hasOwnProperty("qualified"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.qualified);
            if (message.events != null && message.events.length)
                for (var i = 0; i < message.events.length; ++i)
                    $root.CClanEventUserNewsTuple.encode(message.events[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CClanMatchEventByRange message, length delimited. Does not implicitly {@link CClanMatchEventByRange.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CClanMatchEventByRange
         * @static
         * @param {ICClanMatchEventByRange} message CClanMatchEventByRange message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CClanMatchEventByRange.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CClanMatchEventByRange message from the specified reader or buffer.
         * @function decode
         * @memberof CClanMatchEventByRange
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CClanMatchEventByRange} CClanMatchEventByRange
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CClanMatchEventByRange.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CClanMatchEventByRange();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.rtime_before = reader.uint32();
                    break;
                case 2:
                    message.rtime_after = reader.uint32();
                    break;
                case 3:
                    message.qualified = reader.uint32();
                    break;
                case 4:
                    if (!(message.events && message.events.length))
                        message.events = [];
                    message.events.push($root.CClanEventUserNewsTuple.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CClanMatchEventByRange message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CClanMatchEventByRange
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CClanMatchEventByRange} CClanMatchEventByRange
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CClanMatchEventByRange.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CClanMatchEventByRange message.
         * @function verify
         * @memberof CClanMatchEventByRange
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CClanMatchEventByRange.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.rtime_before != null && message.hasOwnProperty("rtime_before"))
                if (!$util.isInteger(message.rtime_before))
                    return "rtime_before: integer expected";
            if (message.rtime_after != null && message.hasOwnProperty("rtime_after"))
                if (!$util.isInteger(message.rtime_after))
                    return "rtime_after: integer expected";
            if (message.qualified != null && message.hasOwnProperty("qualified"))
                if (!$util.isInteger(message.qualified))
                    return "qualified: integer expected";
            if (message.events != null && message.hasOwnProperty("events")) {
                if (!Array.isArray(message.events))
                    return "events: array expected";
                for (var i = 0; i < message.events.length; ++i) {
                    var error = $root.CClanEventUserNewsTuple.verify(message.events[i]);
                    if (error)
                        return "events." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CClanMatchEventByRange message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CClanMatchEventByRange
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CClanMatchEventByRange} CClanMatchEventByRange
         */
        CClanMatchEventByRange.fromObject = function fromObject(object) {
            if (object instanceof $root.CClanMatchEventByRange)
                return object;
            var message = new $root.CClanMatchEventByRange();
            if (object.rtime_before != null)
                message.rtime_before = object.rtime_before >>> 0;
            if (object.rtime_after != null)
                message.rtime_after = object.rtime_after >>> 0;
            if (object.qualified != null)
                message.qualified = object.qualified >>> 0;
            if (object.events) {
                if (!Array.isArray(object.events))
                    throw TypeError(".CClanMatchEventByRange.events: array expected");
                message.events = [];
                for (var i = 0; i < object.events.length; ++i) {
                    if (typeof object.events[i] !== "object")
                        throw TypeError(".CClanMatchEventByRange.events: object expected");
                    message.events[i] = $root.CClanEventUserNewsTuple.fromObject(object.events[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CClanMatchEventByRange message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CClanMatchEventByRange
         * @static
         * @param {CClanMatchEventByRange} message CClanMatchEventByRange
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CClanMatchEventByRange.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.events = [];
            if (options.defaults) {
                object.rtime_before = 0;
                object.rtime_after = 0;
                object.qualified = 0;
            }
            if (message.rtime_before != null && message.hasOwnProperty("rtime_before"))
                object.rtime_before = message.rtime_before;
            if (message.rtime_after != null && message.hasOwnProperty("rtime_after"))
                object.rtime_after = message.rtime_after;
            if (message.qualified != null && message.hasOwnProperty("qualified"))
                object.qualified = message.qualified;
            if (message.events && message.events.length) {
                object.events = [];
                for (var j = 0; j < message.events.length; ++j)
                    object.events[j] = $root.CClanEventUserNewsTuple.toObject(message.events[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CClanMatchEventByRange to JSON.
         * @function toJSON
         * @memberof CClanMatchEventByRange
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CClanMatchEventByRange.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CClanMatchEventByRange;
    })();
    
    $root.CCommunity_ClanAnnouncementInfo = (function() {
    
        /**
         * Properties of a CCommunity_ClanAnnouncementInfo.
         * @exports ICCommunity_ClanAnnouncementInfo
         * @interface ICCommunity_ClanAnnouncementInfo
         * @property {number|Long|null} [gid] CCommunity_ClanAnnouncementInfo gid
         * @property {number|Long|null} [clanid] CCommunity_ClanAnnouncementInfo clanid
         * @property {number|Long|null} [posterid] CCommunity_ClanAnnouncementInfo posterid
         * @property {string|null} [headline] CCommunity_ClanAnnouncementInfo headline
         * @property {number|null} [posttime] CCommunity_ClanAnnouncementInfo posttime
         * @property {number|null} [updatetime] CCommunity_ClanAnnouncementInfo updatetime
         * @property {string|null} [body] CCommunity_ClanAnnouncementInfo body
         * @property {number|null} [commentcount] CCommunity_ClanAnnouncementInfo commentcount
         * @property {Array.<string>|null} [tags] CCommunity_ClanAnnouncementInfo tags
         * @property {number|null} [language] CCommunity_ClanAnnouncementInfo language
         * @property {boolean|null} [hidden] CCommunity_ClanAnnouncementInfo hidden
         * @property {number|Long|null} [forum_topic_id] CCommunity_ClanAnnouncementInfo forum_topic_id
         * @property {number|Long|null} [event_gid] CCommunity_ClanAnnouncementInfo event_gid
         * @property {number|null} [voteupcount] CCommunity_ClanAnnouncementInfo voteupcount
         * @property {number|null} [votedowncount] CCommunity_ClanAnnouncementInfo votedowncount
         */
    
        /**
         * Constructs a new CCommunity_ClanAnnouncementInfo.
         * @exports CCommunity_ClanAnnouncementInfo
         * @classdesc Represents a CCommunity_ClanAnnouncementInfo.
         * @implements ICCommunity_ClanAnnouncementInfo
         * @constructor
         * @param {ICCommunity_ClanAnnouncementInfo=} [properties] Properties to set
         */
        function CCommunity_ClanAnnouncementInfo(properties) {
            this.tags = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CCommunity_ClanAnnouncementInfo gid.
         * @member {number|Long} gid
         * @memberof CCommunity_ClanAnnouncementInfo
         * @instance
         */
        CCommunity_ClanAnnouncementInfo.prototype.gid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CCommunity_ClanAnnouncementInfo clanid.
         * @member {number|Long} clanid
         * @memberof CCommunity_ClanAnnouncementInfo
         * @instance
         */
        CCommunity_ClanAnnouncementInfo.prototype.clanid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CCommunity_ClanAnnouncementInfo posterid.
         * @member {number|Long} posterid
         * @memberof CCommunity_ClanAnnouncementInfo
         * @instance
         */
        CCommunity_ClanAnnouncementInfo.prototype.posterid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CCommunity_ClanAnnouncementInfo headline.
         * @member {string} headline
         * @memberof CCommunity_ClanAnnouncementInfo
         * @instance
         */
        CCommunity_ClanAnnouncementInfo.prototype.headline = "";
    
        /**
         * CCommunity_ClanAnnouncementInfo posttime.
         * @member {number} posttime
         * @memberof CCommunity_ClanAnnouncementInfo
         * @instance
         */
        CCommunity_ClanAnnouncementInfo.prototype.posttime = 0;
    
        /**
         * CCommunity_ClanAnnouncementInfo updatetime.
         * @member {number} updatetime
         * @memberof CCommunity_ClanAnnouncementInfo
         * @instance
         */
        CCommunity_ClanAnnouncementInfo.prototype.updatetime = 0;
    
        /**
         * CCommunity_ClanAnnouncementInfo body.
         * @member {string} body
         * @memberof CCommunity_ClanAnnouncementInfo
         * @instance
         */
        CCommunity_ClanAnnouncementInfo.prototype.body = "";
    
        /**
         * CCommunity_ClanAnnouncementInfo commentcount.
         * @member {number} commentcount
         * @memberof CCommunity_ClanAnnouncementInfo
         * @instance
         */
        CCommunity_ClanAnnouncementInfo.prototype.commentcount = 0;
    
        /**
         * CCommunity_ClanAnnouncementInfo tags.
         * @member {Array.<string>} tags
         * @memberof CCommunity_ClanAnnouncementInfo
         * @instance
         */
        CCommunity_ClanAnnouncementInfo.prototype.tags = $util.emptyArray;
    
        /**
         * CCommunity_ClanAnnouncementInfo language.
         * @member {number} language
         * @memberof CCommunity_ClanAnnouncementInfo
         * @instance
         */
        CCommunity_ClanAnnouncementInfo.prototype.language = 0;
    
        /**
         * CCommunity_ClanAnnouncementInfo hidden.
         * @member {boolean} hidden
         * @memberof CCommunity_ClanAnnouncementInfo
         * @instance
         */
        CCommunity_ClanAnnouncementInfo.prototype.hidden = false;
    
        /**
         * CCommunity_ClanAnnouncementInfo forum_topic_id.
         * @member {number|Long} forum_topic_id
         * @memberof CCommunity_ClanAnnouncementInfo
         * @instance
         */
        CCommunity_ClanAnnouncementInfo.prototype.forum_topic_id = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CCommunity_ClanAnnouncementInfo event_gid.
         * @member {number|Long} event_gid
         * @memberof CCommunity_ClanAnnouncementInfo
         * @instance
         */
        CCommunity_ClanAnnouncementInfo.prototype.event_gid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CCommunity_ClanAnnouncementInfo voteupcount.
         * @member {number} voteupcount
         * @memberof CCommunity_ClanAnnouncementInfo
         * @instance
         */
        CCommunity_ClanAnnouncementInfo.prototype.voteupcount = 0;
    
        /**
         * CCommunity_ClanAnnouncementInfo votedowncount.
         * @member {number} votedowncount
         * @memberof CCommunity_ClanAnnouncementInfo
         * @instance
         */
        CCommunity_ClanAnnouncementInfo.prototype.votedowncount = 0;
    
        /**
         * Creates a new CCommunity_ClanAnnouncementInfo instance using the specified properties.
         * @function create
         * @memberof CCommunity_ClanAnnouncementInfo
         * @static
         * @param {ICCommunity_ClanAnnouncementInfo=} [properties] Properties to set
         * @returns {CCommunity_ClanAnnouncementInfo} CCommunity_ClanAnnouncementInfo instance
         */
        CCommunity_ClanAnnouncementInfo.create = function create(properties) {
            return new CCommunity_ClanAnnouncementInfo(properties);
        };
    
        /**
         * Encodes the specified CCommunity_ClanAnnouncementInfo message. Does not implicitly {@link CCommunity_ClanAnnouncementInfo.verify|verify} messages.
         * @function encode
         * @memberof CCommunity_ClanAnnouncementInfo
         * @static
         * @param {ICCommunity_ClanAnnouncementInfo} message CCommunity_ClanAnnouncementInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCommunity_ClanAnnouncementInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.gid != null && message.hasOwnProperty("gid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.gid);
            if (message.clanid != null && message.hasOwnProperty("clanid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.clanid);
            if (message.posterid != null && message.hasOwnProperty("posterid"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.posterid);
            if (message.headline != null && message.hasOwnProperty("headline"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.headline);
            if (message.posttime != null && message.hasOwnProperty("posttime"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.posttime);
            if (message.updatetime != null && message.hasOwnProperty("updatetime"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.updatetime);
            if (message.body != null && message.hasOwnProperty("body"))
                writer.uint32(/* id 7, wireType 2 =*/58).string(message.body);
            if (message.commentcount != null && message.hasOwnProperty("commentcount"))
                writer.uint32(/* id 8, wireType 0 =*/64).int32(message.commentcount);
            if (message.tags != null && message.tags.length)
                for (var i = 0; i < message.tags.length; ++i)
                    writer.uint32(/* id 9, wireType 2 =*/74).string(message.tags[i]);
            if (message.language != null && message.hasOwnProperty("language"))
                writer.uint32(/* id 10, wireType 0 =*/80).int32(message.language);
            if (message.hidden != null && message.hasOwnProperty("hidden"))
                writer.uint32(/* id 11, wireType 0 =*/88).bool(message.hidden);
            if (message.forum_topic_id != null && message.hasOwnProperty("forum_topic_id"))
                writer.uint32(/* id 12, wireType 1 =*/97).fixed64(message.forum_topic_id);
            if (message.event_gid != null && message.hasOwnProperty("event_gid"))
                writer.uint32(/* id 13, wireType 1 =*/105).fixed64(message.event_gid);
            if (message.voteupcount != null && message.hasOwnProperty("voteupcount"))
                writer.uint32(/* id 14, wireType 0 =*/112).int32(message.voteupcount);
            if (message.votedowncount != null && message.hasOwnProperty("votedowncount"))
                writer.uint32(/* id 15, wireType 0 =*/120).int32(message.votedowncount);
            return writer;
        };
    
        /**
         * Encodes the specified CCommunity_ClanAnnouncementInfo message, length delimited. Does not implicitly {@link CCommunity_ClanAnnouncementInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CCommunity_ClanAnnouncementInfo
         * @static
         * @param {ICCommunity_ClanAnnouncementInfo} message CCommunity_ClanAnnouncementInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCommunity_ClanAnnouncementInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CCommunity_ClanAnnouncementInfo message from the specified reader or buffer.
         * @function decode
         * @memberof CCommunity_ClanAnnouncementInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CCommunity_ClanAnnouncementInfo} CCommunity_ClanAnnouncementInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCommunity_ClanAnnouncementInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CCommunity_ClanAnnouncementInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.gid = reader.uint64();
                    break;
                case 2:
                    message.clanid = reader.uint64();
                    break;
                case 3:
                    message.posterid = reader.uint64();
                    break;
                case 4:
                    message.headline = reader.string();
                    break;
                case 5:
                    message.posttime = reader.uint32();
                    break;
                case 6:
                    message.updatetime = reader.uint32();
                    break;
                case 7:
                    message.body = reader.string();
                    break;
                case 8:
                    message.commentcount = reader.int32();
                    break;
                case 9:
                    if (!(message.tags && message.tags.length))
                        message.tags = [];
                    message.tags.push(reader.string());
                    break;
                case 10:
                    message.language = reader.int32();
                    break;
                case 11:
                    message.hidden = reader.bool();
                    break;
                case 12:
                    message.forum_topic_id = reader.fixed64();
                    break;
                case 13:
                    message.event_gid = reader.fixed64();
                    break;
                case 14:
                    message.voteupcount = reader.int32();
                    break;
                case 15:
                    message.votedowncount = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CCommunity_ClanAnnouncementInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CCommunity_ClanAnnouncementInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CCommunity_ClanAnnouncementInfo} CCommunity_ClanAnnouncementInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCommunity_ClanAnnouncementInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CCommunity_ClanAnnouncementInfo message.
         * @function verify
         * @memberof CCommunity_ClanAnnouncementInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CCommunity_ClanAnnouncementInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.gid != null && message.hasOwnProperty("gid"))
                if (!$util.isInteger(message.gid) && !(message.gid && $util.isInteger(message.gid.low) && $util.isInteger(message.gid.high)))
                    return "gid: integer|Long expected";
            if (message.clanid != null && message.hasOwnProperty("clanid"))
                if (!$util.isInteger(message.clanid) && !(message.clanid && $util.isInteger(message.clanid.low) && $util.isInteger(message.clanid.high)))
                    return "clanid: integer|Long expected";
            if (message.posterid != null && message.hasOwnProperty("posterid"))
                if (!$util.isInteger(message.posterid) && !(message.posterid && $util.isInteger(message.posterid.low) && $util.isInteger(message.posterid.high)))
                    return "posterid: integer|Long expected";
            if (message.headline != null && message.hasOwnProperty("headline"))
                if (!$util.isString(message.headline))
                    return "headline: string expected";
            if (message.posttime != null && message.hasOwnProperty("posttime"))
                if (!$util.isInteger(message.posttime))
                    return "posttime: integer expected";
            if (message.updatetime != null && message.hasOwnProperty("updatetime"))
                if (!$util.isInteger(message.updatetime))
                    return "updatetime: integer expected";
            if (message.body != null && message.hasOwnProperty("body"))
                if (!$util.isString(message.body))
                    return "body: string expected";
            if (message.commentcount != null && message.hasOwnProperty("commentcount"))
                if (!$util.isInteger(message.commentcount))
                    return "commentcount: integer expected";
            if (message.tags != null && message.hasOwnProperty("tags")) {
                if (!Array.isArray(message.tags))
                    return "tags: array expected";
                for (var i = 0; i < message.tags.length; ++i)
                    if (!$util.isString(message.tags[i]))
                        return "tags: string[] expected";
            }
            if (message.language != null && message.hasOwnProperty("language"))
                if (!$util.isInteger(message.language))
                    return "language: integer expected";
            if (message.hidden != null && message.hasOwnProperty("hidden"))
                if (typeof message.hidden !== "boolean")
                    return "hidden: boolean expected";
            if (message.forum_topic_id != null && message.hasOwnProperty("forum_topic_id"))
                if (!$util.isInteger(message.forum_topic_id) && !(message.forum_topic_id && $util.isInteger(message.forum_topic_id.low) && $util.isInteger(message.forum_topic_id.high)))
                    return "forum_topic_id: integer|Long expected";
            if (message.event_gid != null && message.hasOwnProperty("event_gid"))
                if (!$util.isInteger(message.event_gid) && !(message.event_gid && $util.isInteger(message.event_gid.low) && $util.isInteger(message.event_gid.high)))
                    return "event_gid: integer|Long expected";
            if (message.voteupcount != null && message.hasOwnProperty("voteupcount"))
                if (!$util.isInteger(message.voteupcount))
                    return "voteupcount: integer expected";
            if (message.votedowncount != null && message.hasOwnProperty("votedowncount"))
                if (!$util.isInteger(message.votedowncount))
                    return "votedowncount: integer expected";
            return null;
        };
    
        /**
         * Creates a CCommunity_ClanAnnouncementInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CCommunity_ClanAnnouncementInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CCommunity_ClanAnnouncementInfo} CCommunity_ClanAnnouncementInfo
         */
        CCommunity_ClanAnnouncementInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.CCommunity_ClanAnnouncementInfo)
                return object;
            var message = new $root.CCommunity_ClanAnnouncementInfo();
            if (object.gid != null)
                if ($util.Long)
                    (message.gid = $util.Long.fromValue(object.gid)).unsigned = true;
                else if (typeof object.gid === "string")
                    message.gid = parseInt(object.gid, 10);
                else if (typeof object.gid === "number")
                    message.gid = object.gid;
                else if (typeof object.gid === "object")
                    message.gid = new $util.LongBits(object.gid.low >>> 0, object.gid.high >>> 0).toNumber(true);
            if (object.clanid != null)
                if ($util.Long)
                    (message.clanid = $util.Long.fromValue(object.clanid)).unsigned = true;
                else if (typeof object.clanid === "string")
                    message.clanid = parseInt(object.clanid, 10);
                else if (typeof object.clanid === "number")
                    message.clanid = object.clanid;
                else if (typeof object.clanid === "object")
                    message.clanid = new $util.LongBits(object.clanid.low >>> 0, object.clanid.high >>> 0).toNumber(true);
            if (object.posterid != null)
                if ($util.Long)
                    (message.posterid = $util.Long.fromValue(object.posterid)).unsigned = true;
                else if (typeof object.posterid === "string")
                    message.posterid = parseInt(object.posterid, 10);
                else if (typeof object.posterid === "number")
                    message.posterid = object.posterid;
                else if (typeof object.posterid === "object")
                    message.posterid = new $util.LongBits(object.posterid.low >>> 0, object.posterid.high >>> 0).toNumber(true);
            if (object.headline != null)
                message.headline = String(object.headline);
            if (object.posttime != null)
                message.posttime = object.posttime >>> 0;
            if (object.updatetime != null)
                message.updatetime = object.updatetime >>> 0;
            if (object.body != null)
                message.body = String(object.body);
            if (object.commentcount != null)
                message.commentcount = object.commentcount | 0;
            if (object.tags) {
                if (!Array.isArray(object.tags))
                    throw TypeError(".CCommunity_ClanAnnouncementInfo.tags: array expected");
                message.tags = [];
                for (var i = 0; i < object.tags.length; ++i)
                    message.tags[i] = String(object.tags[i]);
            }
            if (object.language != null)
                message.language = object.language | 0;
            if (object.hidden != null)
                message.hidden = Boolean(object.hidden);
            if (object.forum_topic_id != null)
                if ($util.Long)
                    (message.forum_topic_id = $util.Long.fromValue(object.forum_topic_id)).unsigned = false;
                else if (typeof object.forum_topic_id === "string")
                    message.forum_topic_id = parseInt(object.forum_topic_id, 10);
                else if (typeof object.forum_topic_id === "number")
                    message.forum_topic_id = object.forum_topic_id;
                else if (typeof object.forum_topic_id === "object")
                    message.forum_topic_id = new $util.LongBits(object.forum_topic_id.low >>> 0, object.forum_topic_id.high >>> 0).toNumber();
            if (object.event_gid != null)
                if ($util.Long)
                    (message.event_gid = $util.Long.fromValue(object.event_gid)).unsigned = false;
                else if (typeof object.event_gid === "string")
                    message.event_gid = parseInt(object.event_gid, 10);
                else if (typeof object.event_gid === "number")
                    message.event_gid = object.event_gid;
                else if (typeof object.event_gid === "object")
                    message.event_gid = new $util.LongBits(object.event_gid.low >>> 0, object.event_gid.high >>> 0).toNumber();
            if (object.voteupcount != null)
                message.voteupcount = object.voteupcount | 0;
            if (object.votedowncount != null)
                message.votedowncount = object.votedowncount | 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CCommunity_ClanAnnouncementInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CCommunity_ClanAnnouncementInfo
         * @static
         * @param {CCommunity_ClanAnnouncementInfo} message CCommunity_ClanAnnouncementInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CCommunity_ClanAnnouncementInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.tags = [];
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.gid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.gid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.clanid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.clanid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.posterid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.posterid = options.longs === String ? "0" : 0;
                object.headline = "";
                object.posttime = 0;
                object.updatetime = 0;
                object.body = "";
                object.commentcount = 0;
                object.language = 0;
                object.hidden = false;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.forum_topic_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.forum_topic_id = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.event_gid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.event_gid = options.longs === String ? "0" : 0;
                object.voteupcount = 0;
                object.votedowncount = 0;
            }
            if (message.gid != null && message.hasOwnProperty("gid"))
                if (typeof message.gid === "number")
                    object.gid = options.longs === String ? String(message.gid) : message.gid;
                else
                    object.gid = options.longs === String ? $util.Long.prototype.toString.call(message.gid) : options.longs === Number ? new $util.LongBits(message.gid.low >>> 0, message.gid.high >>> 0).toNumber(true) : message.gid;
            if (message.clanid != null && message.hasOwnProperty("clanid"))
                if (typeof message.clanid === "number")
                    object.clanid = options.longs === String ? String(message.clanid) : message.clanid;
                else
                    object.clanid = options.longs === String ? $util.Long.prototype.toString.call(message.clanid) : options.longs === Number ? new $util.LongBits(message.clanid.low >>> 0, message.clanid.high >>> 0).toNumber(true) : message.clanid;
            if (message.posterid != null && message.hasOwnProperty("posterid"))
                if (typeof message.posterid === "number")
                    object.posterid = options.longs === String ? String(message.posterid) : message.posterid;
                else
                    object.posterid = options.longs === String ? $util.Long.prototype.toString.call(message.posterid) : options.longs === Number ? new $util.LongBits(message.posterid.low >>> 0, message.posterid.high >>> 0).toNumber(true) : message.posterid;
            if (message.headline != null && message.hasOwnProperty("headline"))
                object.headline = message.headline;
            if (message.posttime != null && message.hasOwnProperty("posttime"))
                object.posttime = message.posttime;
            if (message.updatetime != null && message.hasOwnProperty("updatetime"))
                object.updatetime = message.updatetime;
            if (message.body != null && message.hasOwnProperty("body"))
                object.body = message.body;
            if (message.commentcount != null && message.hasOwnProperty("commentcount"))
                object.commentcount = message.commentcount;
            if (message.tags && message.tags.length) {
                object.tags = [];
                for (var j = 0; j < message.tags.length; ++j)
                    object.tags[j] = message.tags[j];
            }
            if (message.language != null && message.hasOwnProperty("language"))
                object.language = message.language;
            if (message.hidden != null && message.hasOwnProperty("hidden"))
                object.hidden = message.hidden;
            if (message.forum_topic_id != null && message.hasOwnProperty("forum_topic_id"))
                if (typeof message.forum_topic_id === "number")
                    object.forum_topic_id = options.longs === String ? String(message.forum_topic_id) : message.forum_topic_id;
                else
                    object.forum_topic_id = options.longs === String ? $util.Long.prototype.toString.call(message.forum_topic_id) : options.longs === Number ? new $util.LongBits(message.forum_topic_id.low >>> 0, message.forum_topic_id.high >>> 0).toNumber() : message.forum_topic_id;
            if (message.event_gid != null && message.hasOwnProperty("event_gid"))
                if (typeof message.event_gid === "number")
                    object.event_gid = options.longs === String ? String(message.event_gid) : message.event_gid;
                else
                    object.event_gid = options.longs === String ? $util.Long.prototype.toString.call(message.event_gid) : options.longs === Number ? new $util.LongBits(message.event_gid.low >>> 0, message.event_gid.high >>> 0).toNumber() : message.event_gid;
            if (message.voteupcount != null && message.hasOwnProperty("voteupcount"))
                object.voteupcount = message.voteupcount;
            if (message.votedowncount != null && message.hasOwnProperty("votedowncount"))
                object.votedowncount = message.votedowncount;
            return object;
        };
    
        /**
         * Converts this CCommunity_ClanAnnouncementInfo to JSON.
         * @function toJSON
         * @memberof CCommunity_ClanAnnouncementInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CCommunity_ClanAnnouncementInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CCommunity_ClanAnnouncementInfo;
    })();
    
    $root.CClanEventData = (function() {
    
        /**
         * Properties of a CClanEventData.
         * @exports ICClanEventData
         * @interface ICClanEventData
         * @property {number|Long|null} [gid] CClanEventData gid
         * @property {number|Long|null} [clan_steamid] CClanEventData clan_steamid
         * @property {string|null} [event_name] CClanEventData event_name
         * @property {EProtoClanEventType|null} [event_type] CClanEventData event_type
         * @property {number|null} [appid] CClanEventData appid
         * @property {string|null} [server_address] CClanEventData server_address
         * @property {string|null} [server_password] CClanEventData server_password
         * @property {number|null} [rtime32_start_time] CClanEventData rtime32_start_time
         * @property {number|null} [rtime32_end_time] CClanEventData rtime32_end_time
         * @property {number|null} [comment_count] CClanEventData comment_count
         * @property {number|Long|null} [creator_steamid] CClanEventData creator_steamid
         * @property {number|Long|null} [last_update_steamid] CClanEventData last_update_steamid
         * @property {string|null} [event_notes] CClanEventData event_notes
         * @property {string|null} [jsondata] CClanEventData jsondata
         * @property {ICCommunity_ClanAnnouncementInfo|null} [announcement_body] CClanEventData announcement_body
         * @property {boolean|null} [published] CClanEventData published
         * @property {boolean|null} [hidden] CClanEventData hidden
         * @property {number|null} [rtime32_visibility_start] CClanEventData rtime32_visibility_start
         * @property {number|null} [rtime32_visibility_end] CClanEventData rtime32_visibility_end
         * @property {number|null} [broadcaster_accountid] CClanEventData broadcaster_accountid
         * @property {number|null} [follower_count] CClanEventData follower_count
         * @property {number|null} [ignore_count] CClanEventData ignore_count
         * @property {number|Long|null} [forum_topic_id] CClanEventData forum_topic_id
         * @property {number|null} [rtime32_last_modified] CClanEventData rtime32_last_modified
         * @property {number|Long|null} [news_post_gid] CClanEventData news_post_gid
         * @property {number|null} [rtime_mod_reviewed] CClanEventData rtime_mod_reviewed
         * @property {number|null} [featured_app_tagid] CClanEventData featured_app_tagid
         * @property {Array.<number>|null} [referenced_appids] CClanEventData referenced_appids
         * @property {number|null} [build_id] CClanEventData build_id
         * @property {string|null} [build_branch] CClanEventData build_branch
         */
    
        /**
         * Constructs a new CClanEventData.
         * @exports CClanEventData
         * @classdesc Represents a CClanEventData.
         * @implements ICClanEventData
         * @constructor
         * @param {ICClanEventData=} [properties] Properties to set
         */
        function CClanEventData(properties) {
            this.referenced_appids = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CClanEventData gid.
         * @member {number|Long} gid
         * @memberof CClanEventData
         * @instance
         */
        CClanEventData.prototype.gid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CClanEventData clan_steamid.
         * @member {number|Long} clan_steamid
         * @memberof CClanEventData
         * @instance
         */
        CClanEventData.prototype.clan_steamid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CClanEventData event_name.
         * @member {string} event_name
         * @memberof CClanEventData
         * @instance
         */
        CClanEventData.prototype.event_name = "";
    
        /**
         * CClanEventData event_type.
         * @member {EProtoClanEventType} event_type
         * @memberof CClanEventData
         * @instance
         */
        CClanEventData.prototype.event_type = 1;
    
        /**
         * CClanEventData appid.
         * @member {number} appid
         * @memberof CClanEventData
         * @instance
         */
        CClanEventData.prototype.appid = 0;
    
        /**
         * CClanEventData server_address.
         * @member {string} server_address
         * @memberof CClanEventData
         * @instance
         */
        CClanEventData.prototype.server_address = "";
    
        /**
         * CClanEventData server_password.
         * @member {string} server_password
         * @memberof CClanEventData
         * @instance
         */
        CClanEventData.prototype.server_password = "";
    
        /**
         * CClanEventData rtime32_start_time.
         * @member {number} rtime32_start_time
         * @memberof CClanEventData
         * @instance
         */
        CClanEventData.prototype.rtime32_start_time = 0;
    
        /**
         * CClanEventData rtime32_end_time.
         * @member {number} rtime32_end_time
         * @memberof CClanEventData
         * @instance
         */
        CClanEventData.prototype.rtime32_end_time = 0;
    
        /**
         * CClanEventData comment_count.
         * @member {number} comment_count
         * @memberof CClanEventData
         * @instance
         */
        CClanEventData.prototype.comment_count = 0;
    
        /**
         * CClanEventData creator_steamid.
         * @member {number|Long} creator_steamid
         * @memberof CClanEventData
         * @instance
         */
        CClanEventData.prototype.creator_steamid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CClanEventData last_update_steamid.
         * @member {number|Long} last_update_steamid
         * @memberof CClanEventData
         * @instance
         */
        CClanEventData.prototype.last_update_steamid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CClanEventData event_notes.
         * @member {string} event_notes
         * @memberof CClanEventData
         * @instance
         */
        CClanEventData.prototype.event_notes = "";
    
        /**
         * CClanEventData jsondata.
         * @member {string} jsondata
         * @memberof CClanEventData
         * @instance
         */
        CClanEventData.prototype.jsondata = "";
    
        /**
         * CClanEventData announcement_body.
         * @member {ICCommunity_ClanAnnouncementInfo|null|undefined} announcement_body
         * @memberof CClanEventData
         * @instance
         */
        CClanEventData.prototype.announcement_body = null;
    
        /**
         * CClanEventData published.
         * @member {boolean} published
         * @memberof CClanEventData
         * @instance
         */
        CClanEventData.prototype.published = false;
    
        /**
         * CClanEventData hidden.
         * @member {boolean} hidden
         * @memberof CClanEventData
         * @instance
         */
        CClanEventData.prototype.hidden = false;
    
        /**
         * CClanEventData rtime32_visibility_start.
         * @member {number} rtime32_visibility_start
         * @memberof CClanEventData
         * @instance
         */
        CClanEventData.prototype.rtime32_visibility_start = 0;
    
        /**
         * CClanEventData rtime32_visibility_end.
         * @member {number} rtime32_visibility_end
         * @memberof CClanEventData
         * @instance
         */
        CClanEventData.prototype.rtime32_visibility_end = 0;
    
        /**
         * CClanEventData broadcaster_accountid.
         * @member {number} broadcaster_accountid
         * @memberof CClanEventData
         * @instance
         */
        CClanEventData.prototype.broadcaster_accountid = 0;
    
        /**
         * CClanEventData follower_count.
         * @member {number} follower_count
         * @memberof CClanEventData
         * @instance
         */
        CClanEventData.prototype.follower_count = 0;
    
        /**
         * CClanEventData ignore_count.
         * @member {number} ignore_count
         * @memberof CClanEventData
         * @instance
         */
        CClanEventData.prototype.ignore_count = 0;
    
        /**
         * CClanEventData forum_topic_id.
         * @member {number|Long} forum_topic_id
         * @memberof CClanEventData
         * @instance
         */
        CClanEventData.prototype.forum_topic_id = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CClanEventData rtime32_last_modified.
         * @member {number} rtime32_last_modified
         * @memberof CClanEventData
         * @instance
         */
        CClanEventData.prototype.rtime32_last_modified = 0;
    
        /**
         * CClanEventData news_post_gid.
         * @member {number|Long} news_post_gid
         * @memberof CClanEventData
         * @instance
         */
        CClanEventData.prototype.news_post_gid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CClanEventData rtime_mod_reviewed.
         * @member {number} rtime_mod_reviewed
         * @memberof CClanEventData
         * @instance
         */
        CClanEventData.prototype.rtime_mod_reviewed = 0;
    
        /**
         * CClanEventData featured_app_tagid.
         * @member {number} featured_app_tagid
         * @memberof CClanEventData
         * @instance
         */
        CClanEventData.prototype.featured_app_tagid = 0;
    
        /**
         * CClanEventData referenced_appids.
         * @member {Array.<number>} referenced_appids
         * @memberof CClanEventData
         * @instance
         */
        CClanEventData.prototype.referenced_appids = $util.emptyArray;
    
        /**
         * CClanEventData build_id.
         * @member {number} build_id
         * @memberof CClanEventData
         * @instance
         */
        CClanEventData.prototype.build_id = 0;
    
        /**
         * CClanEventData build_branch.
         * @member {string} build_branch
         * @memberof CClanEventData
         * @instance
         */
        CClanEventData.prototype.build_branch = "";
    
        /**
         * Creates a new CClanEventData instance using the specified properties.
         * @function create
         * @memberof CClanEventData
         * @static
         * @param {ICClanEventData=} [properties] Properties to set
         * @returns {CClanEventData} CClanEventData instance
         */
        CClanEventData.create = function create(properties) {
            return new CClanEventData(properties);
        };
    
        /**
         * Encodes the specified CClanEventData message. Does not implicitly {@link CClanEventData.verify|verify} messages.
         * @function encode
         * @memberof CClanEventData
         * @static
         * @param {ICClanEventData} message CClanEventData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CClanEventData.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.gid != null && message.hasOwnProperty("gid"))
                writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.gid);
            if (message.clan_steamid != null && message.hasOwnProperty("clan_steamid"))
                writer.uint32(/* id 2, wireType 1 =*/17).fixed64(message.clan_steamid);
            if (message.event_name != null && message.hasOwnProperty("event_name"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.event_name);
            if (message.event_type != null && message.hasOwnProperty("event_type"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.event_type);
            if (message.appid != null && message.hasOwnProperty("appid"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.appid);
            if (message.server_address != null && message.hasOwnProperty("server_address"))
                writer.uint32(/* id 6, wireType 2 =*/50).string(message.server_address);
            if (message.server_password != null && message.hasOwnProperty("server_password"))
                writer.uint32(/* id 7, wireType 2 =*/58).string(message.server_password);
            if (message.rtime32_start_time != null && message.hasOwnProperty("rtime32_start_time"))
                writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.rtime32_start_time);
            if (message.rtime32_end_time != null && message.hasOwnProperty("rtime32_end_time"))
                writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.rtime32_end_time);
            if (message.comment_count != null && message.hasOwnProperty("comment_count"))
                writer.uint32(/* id 10, wireType 0 =*/80).int32(message.comment_count);
            if (message.creator_steamid != null && message.hasOwnProperty("creator_steamid"))
                writer.uint32(/* id 11, wireType 1 =*/89).fixed64(message.creator_steamid);
            if (message.last_update_steamid != null && message.hasOwnProperty("last_update_steamid"))
                writer.uint32(/* id 12, wireType 1 =*/97).fixed64(message.last_update_steamid);
            if (message.event_notes != null && message.hasOwnProperty("event_notes"))
                writer.uint32(/* id 13, wireType 2 =*/106).string(message.event_notes);
            if (message.jsondata != null && message.hasOwnProperty("jsondata"))
                writer.uint32(/* id 14, wireType 2 =*/114).string(message.jsondata);
            if (message.announcement_body != null && message.hasOwnProperty("announcement_body"))
                $root.CCommunity_ClanAnnouncementInfo.encode(message.announcement_body, writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();
            if (message.published != null && message.hasOwnProperty("published"))
                writer.uint32(/* id 16, wireType 0 =*/128).bool(message.published);
            if (message.hidden != null && message.hasOwnProperty("hidden"))
                writer.uint32(/* id 17, wireType 0 =*/136).bool(message.hidden);
            if (message.rtime32_visibility_start != null && message.hasOwnProperty("rtime32_visibility_start"))
                writer.uint32(/* id 18, wireType 0 =*/144).uint32(message.rtime32_visibility_start);
            if (message.rtime32_visibility_end != null && message.hasOwnProperty("rtime32_visibility_end"))
                writer.uint32(/* id 19, wireType 0 =*/152).uint32(message.rtime32_visibility_end);
            if (message.broadcaster_accountid != null && message.hasOwnProperty("broadcaster_accountid"))
                writer.uint32(/* id 20, wireType 0 =*/160).uint32(message.broadcaster_accountid);
            if (message.follower_count != null && message.hasOwnProperty("follower_count"))
                writer.uint32(/* id 21, wireType 0 =*/168).uint32(message.follower_count);
            if (message.ignore_count != null && message.hasOwnProperty("ignore_count"))
                writer.uint32(/* id 22, wireType 0 =*/176).uint32(message.ignore_count);
            if (message.forum_topic_id != null && message.hasOwnProperty("forum_topic_id"))
                writer.uint32(/* id 23, wireType 1 =*/185).fixed64(message.forum_topic_id);
            if (message.rtime32_last_modified != null && message.hasOwnProperty("rtime32_last_modified"))
                writer.uint32(/* id 24, wireType 0 =*/192).uint32(message.rtime32_last_modified);
            if (message.news_post_gid != null && message.hasOwnProperty("news_post_gid"))
                writer.uint32(/* id 25, wireType 1 =*/201).fixed64(message.news_post_gid);
            if (message.rtime_mod_reviewed != null && message.hasOwnProperty("rtime_mod_reviewed"))
                writer.uint32(/* id 26, wireType 0 =*/208).uint32(message.rtime_mod_reviewed);
            if (message.featured_app_tagid != null && message.hasOwnProperty("featured_app_tagid"))
                writer.uint32(/* id 27, wireType 0 =*/216).uint32(message.featured_app_tagid);
            if (message.referenced_appids != null && message.referenced_appids.length)
                for (var i = 0; i < message.referenced_appids.length; ++i)
                    writer.uint32(/* id 28, wireType 0 =*/224).uint32(message.referenced_appids[i]);
            if (message.build_id != null && message.hasOwnProperty("build_id"))
                writer.uint32(/* id 29, wireType 0 =*/232).uint32(message.build_id);
            if (message.build_branch != null && message.hasOwnProperty("build_branch"))
                writer.uint32(/* id 30, wireType 2 =*/242).string(message.build_branch);
            return writer;
        };
    
        /**
         * Encodes the specified CClanEventData message, length delimited. Does not implicitly {@link CClanEventData.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CClanEventData
         * @static
         * @param {ICClanEventData} message CClanEventData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CClanEventData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CClanEventData message from the specified reader or buffer.
         * @function decode
         * @memberof CClanEventData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CClanEventData} CClanEventData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CClanEventData.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CClanEventData();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.gid = reader.fixed64();
                    break;
                case 2:
                    message.clan_steamid = reader.fixed64();
                    break;
                case 3:
                    message.event_name = reader.string();
                    break;
                case 4:
                    message.event_type = reader.int32();
                    break;
                case 5:
                    message.appid = reader.uint32();
                    break;
                case 6:
                    message.server_address = reader.string();
                    break;
                case 7:
                    message.server_password = reader.string();
                    break;
                case 8:
                    message.rtime32_start_time = reader.uint32();
                    break;
                case 9:
                    message.rtime32_end_time = reader.uint32();
                    break;
                case 10:
                    message.comment_count = reader.int32();
                    break;
                case 11:
                    message.creator_steamid = reader.fixed64();
                    break;
                case 12:
                    message.last_update_steamid = reader.fixed64();
                    break;
                case 13:
                    message.event_notes = reader.string();
                    break;
                case 14:
                    message.jsondata = reader.string();
                    break;
                case 15:
                    message.announcement_body = $root.CCommunity_ClanAnnouncementInfo.decode(reader, reader.uint32());
                    break;
                case 16:
                    message.published = reader.bool();
                    break;
                case 17:
                    message.hidden = reader.bool();
                    break;
                case 18:
                    message.rtime32_visibility_start = reader.uint32();
                    break;
                case 19:
                    message.rtime32_visibility_end = reader.uint32();
                    break;
                case 20:
                    message.broadcaster_accountid = reader.uint32();
                    break;
                case 21:
                    message.follower_count = reader.uint32();
                    break;
                case 22:
                    message.ignore_count = reader.uint32();
                    break;
                case 23:
                    message.forum_topic_id = reader.fixed64();
                    break;
                case 24:
                    message.rtime32_last_modified = reader.uint32();
                    break;
                case 25:
                    message.news_post_gid = reader.fixed64();
                    break;
                case 26:
                    message.rtime_mod_reviewed = reader.uint32();
                    break;
                case 27:
                    message.featured_app_tagid = reader.uint32();
                    break;
                case 28:
                    if (!(message.referenced_appids && message.referenced_appids.length))
                        message.referenced_appids = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.referenced_appids.push(reader.uint32());
                    } else
                        message.referenced_appids.push(reader.uint32());
                    break;
                case 29:
                    message.build_id = reader.uint32();
                    break;
                case 30:
                    message.build_branch = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CClanEventData message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CClanEventData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CClanEventData} CClanEventData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CClanEventData.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CClanEventData message.
         * @function verify
         * @memberof CClanEventData
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CClanEventData.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.gid != null && message.hasOwnProperty("gid"))
                if (!$util.isInteger(message.gid) && !(message.gid && $util.isInteger(message.gid.low) && $util.isInteger(message.gid.high)))
                    return "gid: integer|Long expected";
            if (message.clan_steamid != null && message.hasOwnProperty("clan_steamid"))
                if (!$util.isInteger(message.clan_steamid) && !(message.clan_steamid && $util.isInteger(message.clan_steamid.low) && $util.isInteger(message.clan_steamid.high)))
                    return "clan_steamid: integer|Long expected";
            if (message.event_name != null && message.hasOwnProperty("event_name"))
                if (!$util.isString(message.event_name))
                    return "event_name: string expected";
            if (message.event_type != null && message.hasOwnProperty("event_type"))
                switch (message.event_type) {
                default:
                    return "event_type: enum value expected";
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                case 32:
                case 33:
                case 34:
                case 35:
                    break;
                }
            if (message.appid != null && message.hasOwnProperty("appid"))
                if (!$util.isInteger(message.appid))
                    return "appid: integer expected";
            if (message.server_address != null && message.hasOwnProperty("server_address"))
                if (!$util.isString(message.server_address))
                    return "server_address: string expected";
            if (message.server_password != null && message.hasOwnProperty("server_password"))
                if (!$util.isString(message.server_password))
                    return "server_password: string expected";
            if (message.rtime32_start_time != null && message.hasOwnProperty("rtime32_start_time"))
                if (!$util.isInteger(message.rtime32_start_time))
                    return "rtime32_start_time: integer expected";
            if (message.rtime32_end_time != null && message.hasOwnProperty("rtime32_end_time"))
                if (!$util.isInteger(message.rtime32_end_time))
                    return "rtime32_end_time: integer expected";
            if (message.comment_count != null && message.hasOwnProperty("comment_count"))
                if (!$util.isInteger(message.comment_count))
                    return "comment_count: integer expected";
            if (message.creator_steamid != null && message.hasOwnProperty("creator_steamid"))
                if (!$util.isInteger(message.creator_steamid) && !(message.creator_steamid && $util.isInteger(message.creator_steamid.low) && $util.isInteger(message.creator_steamid.high)))
                    return "creator_steamid: integer|Long expected";
            if (message.last_update_steamid != null && message.hasOwnProperty("last_update_steamid"))
                if (!$util.isInteger(message.last_update_steamid) && !(message.last_update_steamid && $util.isInteger(message.last_update_steamid.low) && $util.isInteger(message.last_update_steamid.high)))
                    return "last_update_steamid: integer|Long expected";
            if (message.event_notes != null && message.hasOwnProperty("event_notes"))
                if (!$util.isString(message.event_notes))
                    return "event_notes: string expected";
            if (message.jsondata != null && message.hasOwnProperty("jsondata"))
                if (!$util.isString(message.jsondata))
                    return "jsondata: string expected";
            if (message.announcement_body != null && message.hasOwnProperty("announcement_body")) {
                var error = $root.CCommunity_ClanAnnouncementInfo.verify(message.announcement_body);
                if (error)
                    return "announcement_body." + error;
            }
            if (message.published != null && message.hasOwnProperty("published"))
                if (typeof message.published !== "boolean")
                    return "published: boolean expected";
            if (message.hidden != null && message.hasOwnProperty("hidden"))
                if (typeof message.hidden !== "boolean")
                    return "hidden: boolean expected";
            if (message.rtime32_visibility_start != null && message.hasOwnProperty("rtime32_visibility_start"))
                if (!$util.isInteger(message.rtime32_visibility_start))
                    return "rtime32_visibility_start: integer expected";
            if (message.rtime32_visibility_end != null && message.hasOwnProperty("rtime32_visibility_end"))
                if (!$util.isInteger(message.rtime32_visibility_end))
                    return "rtime32_visibility_end: integer expected";
            if (message.broadcaster_accountid != null && message.hasOwnProperty("broadcaster_accountid"))
                if (!$util.isInteger(message.broadcaster_accountid))
                    return "broadcaster_accountid: integer expected";
            if (message.follower_count != null && message.hasOwnProperty("follower_count"))
                if (!$util.isInteger(message.follower_count))
                    return "follower_count: integer expected";
            if (message.ignore_count != null && message.hasOwnProperty("ignore_count"))
                if (!$util.isInteger(message.ignore_count))
                    return "ignore_count: integer expected";
            if (message.forum_topic_id != null && message.hasOwnProperty("forum_topic_id"))
                if (!$util.isInteger(message.forum_topic_id) && !(message.forum_topic_id && $util.isInteger(message.forum_topic_id.low) && $util.isInteger(message.forum_topic_id.high)))
                    return "forum_topic_id: integer|Long expected";
            if (message.rtime32_last_modified != null && message.hasOwnProperty("rtime32_last_modified"))
                if (!$util.isInteger(message.rtime32_last_modified))
                    return "rtime32_last_modified: integer expected";
            if (message.news_post_gid != null && message.hasOwnProperty("news_post_gid"))
                if (!$util.isInteger(message.news_post_gid) && !(message.news_post_gid && $util.isInteger(message.news_post_gid.low) && $util.isInteger(message.news_post_gid.high)))
                    return "news_post_gid: integer|Long expected";
            if (message.rtime_mod_reviewed != null && message.hasOwnProperty("rtime_mod_reviewed"))
                if (!$util.isInteger(message.rtime_mod_reviewed))
                    return "rtime_mod_reviewed: integer expected";
            if (message.featured_app_tagid != null && message.hasOwnProperty("featured_app_tagid"))
                if (!$util.isInteger(message.featured_app_tagid))
                    return "featured_app_tagid: integer expected";
            if (message.referenced_appids != null && message.hasOwnProperty("referenced_appids")) {
                if (!Array.isArray(message.referenced_appids))
                    return "referenced_appids: array expected";
                for (var i = 0; i < message.referenced_appids.length; ++i)
                    if (!$util.isInteger(message.referenced_appids[i]))
                        return "referenced_appids: integer[] expected";
            }
            if (message.build_id != null && message.hasOwnProperty("build_id"))
                if (!$util.isInteger(message.build_id))
                    return "build_id: integer expected";
            if (message.build_branch != null && message.hasOwnProperty("build_branch"))
                if (!$util.isString(message.build_branch))
                    return "build_branch: string expected";
            return null;
        };
    
        /**
         * Creates a CClanEventData message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CClanEventData
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CClanEventData} CClanEventData
         */
        CClanEventData.fromObject = function fromObject(object) {
            if (object instanceof $root.CClanEventData)
                return object;
            var message = new $root.CClanEventData();
            if (object.gid != null)
                if ($util.Long)
                    (message.gid = $util.Long.fromValue(object.gid)).unsigned = false;
                else if (typeof object.gid === "string")
                    message.gid = parseInt(object.gid, 10);
                else if (typeof object.gid === "number")
                    message.gid = object.gid;
                else if (typeof object.gid === "object")
                    message.gid = new $util.LongBits(object.gid.low >>> 0, object.gid.high >>> 0).toNumber();
            if (object.clan_steamid != null)
                if ($util.Long)
                    (message.clan_steamid = $util.Long.fromValue(object.clan_steamid)).unsigned = false;
                else if (typeof object.clan_steamid === "string")
                    message.clan_steamid = parseInt(object.clan_steamid, 10);
                else if (typeof object.clan_steamid === "number")
                    message.clan_steamid = object.clan_steamid;
                else if (typeof object.clan_steamid === "object")
                    message.clan_steamid = new $util.LongBits(object.clan_steamid.low >>> 0, object.clan_steamid.high >>> 0).toNumber();
            if (object.event_name != null)
                message.event_name = String(object.event_name);
            switch (object.event_type) {
            case "k_EClanOtherEvent":
            case 1:
                message.event_type = 1;
                break;
            case "k_EClanGameEvent":
            case 2:
                message.event_type = 2;
                break;
            case "k_EClanPartyEvent":
            case 3:
                message.event_type = 3;
                break;
            case "k_EClanMeetingEvent":
            case 4:
                message.event_type = 4;
                break;
            case "k_EClanSpecialCauseEvent":
            case 5:
                message.event_type = 5;
                break;
            case "k_EClanMusicAndArtsEvent":
            case 6:
                message.event_type = 6;
                break;
            case "k_EClanSportsEvent":
            case 7:
                message.event_type = 7;
                break;
            case "k_EClanTripEvent":
            case 8:
                message.event_type = 8;
                break;
            case "k_EClanChatEvent":
            case 9:
                message.event_type = 9;
                break;
            case "k_EClanGameReleaseEvent":
            case 10:
                message.event_type = 10;
                break;
            case "k_EClanBroadcastEvent":
            case 11:
                message.event_type = 11;
                break;
            case "k_EClanSmallUpdateEvent":
            case 12:
                message.event_type = 12;
                break;
            case "k_EClanPreAnnounceMajorUpdateEvent":
            case 13:
                message.event_type = 13;
                break;
            case "k_EClanMajorUpdateEvent":
            case 14:
                message.event_type = 14;
                break;
            case "k_EClanDLCReleaseEvent":
            case 15:
                message.event_type = 15;
                break;
            case "k_EClanFutureReleaseEvent":
            case 16:
                message.event_type = 16;
                break;
            case "k_EClanESportTournamentStreamEvent":
            case 17:
                message.event_type = 17;
                break;
            case "k_EClanDevStreamEvent":
            case 18:
                message.event_type = 18;
                break;
            case "k_EClanFamousStreamEvent":
            case 19:
                message.event_type = 19;
                break;
            case "k_EClanGameSalesEvent":
            case 20:
                message.event_type = 20;
                break;
            case "k_EClanGameItemSalesEvent":
            case 21:
                message.event_type = 21;
                break;
            case "k_EClanInGameBonusXPEvent":
            case 22:
                message.event_type = 22;
                break;
            case "k_EClanInGameLootEvent":
            case 23:
                message.event_type = 23;
                break;
            case "k_EClanInGamePerksEvent":
            case 24:
                message.event_type = 24;
                break;
            case "k_EClanInGameChallengeEvent":
            case 25:
                message.event_type = 25;
                break;
            case "k_EClanInGameContestEvent":
            case 26:
                message.event_type = 26;
                break;
            case "k_EClanIRLEvent":
            case 27:
                message.event_type = 27;
                break;
            case "k_EClanNewsEvent":
            case 28:
                message.event_type = 28;
                break;
            case "k_EClanBetaReleaseEvent":
            case 29:
                message.event_type = 29;
                break;
            case "k_EClanInGameContentReleaseEvent":
            case 30:
                message.event_type = 30;
                break;
            case "k_EClanFreeTrial":
            case 31:
                message.event_type = 31;
                break;
            case "k_EClanSeasonRelease":
            case 32:
                message.event_type = 32;
                break;
            case "k_EClanSeasonUpdate":
            case 33:
                message.event_type = 33;
                break;
            case "k_EClanCrosspostEvent":
            case 34:
                message.event_type = 34;
                break;
            case "k_EClanInGameEventGeneral":
            case 35:
                message.event_type = 35;
                break;
            }
            if (object.appid != null)
                message.appid = object.appid >>> 0;
            if (object.server_address != null)
                message.server_address = String(object.server_address);
            if (object.server_password != null)
                message.server_password = String(object.server_password);
            if (object.rtime32_start_time != null)
                message.rtime32_start_time = object.rtime32_start_time >>> 0;
            if (object.rtime32_end_time != null)
                message.rtime32_end_time = object.rtime32_end_time >>> 0;
            if (object.comment_count != null)
                message.comment_count = object.comment_count | 0;
            if (object.creator_steamid != null)
                if ($util.Long)
                    (message.creator_steamid = $util.Long.fromValue(object.creator_steamid)).unsigned = false;
                else if (typeof object.creator_steamid === "string")
                    message.creator_steamid = parseInt(object.creator_steamid, 10);
                else if (typeof object.creator_steamid === "number")
                    message.creator_steamid = object.creator_steamid;
                else if (typeof object.creator_steamid === "object")
                    message.creator_steamid = new $util.LongBits(object.creator_steamid.low >>> 0, object.creator_steamid.high >>> 0).toNumber();
            if (object.last_update_steamid != null)
                if ($util.Long)
                    (message.last_update_steamid = $util.Long.fromValue(object.last_update_steamid)).unsigned = false;
                else if (typeof object.last_update_steamid === "string")
                    message.last_update_steamid = parseInt(object.last_update_steamid, 10);
                else if (typeof object.last_update_steamid === "number")
                    message.last_update_steamid = object.last_update_steamid;
                else if (typeof object.last_update_steamid === "object")
                    message.last_update_steamid = new $util.LongBits(object.last_update_steamid.low >>> 0, object.last_update_steamid.high >>> 0).toNumber();
            if (object.event_notes != null)
                message.event_notes = String(object.event_notes);
            if (object.jsondata != null)
                message.jsondata = String(object.jsondata);
            if (object.announcement_body != null) {
                if (typeof object.announcement_body !== "object")
                    throw TypeError(".CClanEventData.announcement_body: object expected");
                message.announcement_body = $root.CCommunity_ClanAnnouncementInfo.fromObject(object.announcement_body);
            }
            if (object.published != null)
                message.published = Boolean(object.published);
            if (object.hidden != null)
                message.hidden = Boolean(object.hidden);
            if (object.rtime32_visibility_start != null)
                message.rtime32_visibility_start = object.rtime32_visibility_start >>> 0;
            if (object.rtime32_visibility_end != null)
                message.rtime32_visibility_end = object.rtime32_visibility_end >>> 0;
            if (object.broadcaster_accountid != null)
                message.broadcaster_accountid = object.broadcaster_accountid >>> 0;
            if (object.follower_count != null)
                message.follower_count = object.follower_count >>> 0;
            if (object.ignore_count != null)
                message.ignore_count = object.ignore_count >>> 0;
            if (object.forum_topic_id != null)
                if ($util.Long)
                    (message.forum_topic_id = $util.Long.fromValue(object.forum_topic_id)).unsigned = false;
                else if (typeof object.forum_topic_id === "string")
                    message.forum_topic_id = parseInt(object.forum_topic_id, 10);
                else if (typeof object.forum_topic_id === "number")
                    message.forum_topic_id = object.forum_topic_id;
                else if (typeof object.forum_topic_id === "object")
                    message.forum_topic_id = new $util.LongBits(object.forum_topic_id.low >>> 0, object.forum_topic_id.high >>> 0).toNumber();
            if (object.rtime32_last_modified != null)
                message.rtime32_last_modified = object.rtime32_last_modified >>> 0;
            if (object.news_post_gid != null)
                if ($util.Long)
                    (message.news_post_gid = $util.Long.fromValue(object.news_post_gid)).unsigned = false;
                else if (typeof object.news_post_gid === "string")
                    message.news_post_gid = parseInt(object.news_post_gid, 10);
                else if (typeof object.news_post_gid === "number")
                    message.news_post_gid = object.news_post_gid;
                else if (typeof object.news_post_gid === "object")
                    message.news_post_gid = new $util.LongBits(object.news_post_gid.low >>> 0, object.news_post_gid.high >>> 0).toNumber();
            if (object.rtime_mod_reviewed != null)
                message.rtime_mod_reviewed = object.rtime_mod_reviewed >>> 0;
            if (object.featured_app_tagid != null)
                message.featured_app_tagid = object.featured_app_tagid >>> 0;
            if (object.referenced_appids) {
                if (!Array.isArray(object.referenced_appids))
                    throw TypeError(".CClanEventData.referenced_appids: array expected");
                message.referenced_appids = [];
                for (var i = 0; i < object.referenced_appids.length; ++i)
                    message.referenced_appids[i] = object.referenced_appids[i] >>> 0;
            }
            if (object.build_id != null)
                message.build_id = object.build_id >>> 0;
            if (object.build_branch != null)
                message.build_branch = String(object.build_branch);
            return message;
        };
    
        /**
         * Creates a plain object from a CClanEventData message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CClanEventData
         * @static
         * @param {CClanEventData} message CClanEventData
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CClanEventData.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.referenced_appids = [];
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.gid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.gid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.clan_steamid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.clan_steamid = options.longs === String ? "0" : 0;
                object.event_name = "";
                object.event_type = options.enums === String ? "k_EClanOtherEvent" : 1;
                object.appid = 0;
                object.server_address = "";
                object.server_password = "";
                object.rtime32_start_time = 0;
                object.rtime32_end_time = 0;
                object.comment_count = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.creator_steamid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.creator_steamid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.last_update_steamid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.last_update_steamid = options.longs === String ? "0" : 0;
                object.event_notes = "";
                object.jsondata = "";
                object.announcement_body = null;
                object.published = false;
                object.hidden = false;
                object.rtime32_visibility_start = 0;
                object.rtime32_visibility_end = 0;
                object.broadcaster_accountid = 0;
                object.follower_count = 0;
                object.ignore_count = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.forum_topic_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.forum_topic_id = options.longs === String ? "0" : 0;
                object.rtime32_last_modified = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.news_post_gid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.news_post_gid = options.longs === String ? "0" : 0;
                object.rtime_mod_reviewed = 0;
                object.featured_app_tagid = 0;
                object.build_id = 0;
                object.build_branch = "";
            }
            if (message.gid != null && message.hasOwnProperty("gid"))
                if (typeof message.gid === "number")
                    object.gid = options.longs === String ? String(message.gid) : message.gid;
                else
                    object.gid = options.longs === String ? $util.Long.prototype.toString.call(message.gid) : options.longs === Number ? new $util.LongBits(message.gid.low >>> 0, message.gid.high >>> 0).toNumber() : message.gid;
            if (message.clan_steamid != null && message.hasOwnProperty("clan_steamid"))
                if (typeof message.clan_steamid === "number")
                    object.clan_steamid = options.longs === String ? String(message.clan_steamid) : message.clan_steamid;
                else
                    object.clan_steamid = options.longs === String ? $util.Long.prototype.toString.call(message.clan_steamid) : options.longs === Number ? new $util.LongBits(message.clan_steamid.low >>> 0, message.clan_steamid.high >>> 0).toNumber() : message.clan_steamid;
            if (message.event_name != null && message.hasOwnProperty("event_name"))
                object.event_name = message.event_name;
            if (message.event_type != null && message.hasOwnProperty("event_type"))
                object.event_type = options.enums === String ? $root.EProtoClanEventType[message.event_type] : message.event_type;
            if (message.appid != null && message.hasOwnProperty("appid"))
                object.appid = message.appid;
            if (message.server_address != null && message.hasOwnProperty("server_address"))
                object.server_address = message.server_address;
            if (message.server_password != null && message.hasOwnProperty("server_password"))
                object.server_password = message.server_password;
            if (message.rtime32_start_time != null && message.hasOwnProperty("rtime32_start_time"))
                object.rtime32_start_time = message.rtime32_start_time;
            if (message.rtime32_end_time != null && message.hasOwnProperty("rtime32_end_time"))
                object.rtime32_end_time = message.rtime32_end_time;
            if (message.comment_count != null && message.hasOwnProperty("comment_count"))
                object.comment_count = message.comment_count;
            if (message.creator_steamid != null && message.hasOwnProperty("creator_steamid"))
                if (typeof message.creator_steamid === "number")
                    object.creator_steamid = options.longs === String ? String(message.creator_steamid) : message.creator_steamid;
                else
                    object.creator_steamid = options.longs === String ? $util.Long.prototype.toString.call(message.creator_steamid) : options.longs === Number ? new $util.LongBits(message.creator_steamid.low >>> 0, message.creator_steamid.high >>> 0).toNumber() : message.creator_steamid;
            if (message.last_update_steamid != null && message.hasOwnProperty("last_update_steamid"))
                if (typeof message.last_update_steamid === "number")
                    object.last_update_steamid = options.longs === String ? String(message.last_update_steamid) : message.last_update_steamid;
                else
                    object.last_update_steamid = options.longs === String ? $util.Long.prototype.toString.call(message.last_update_steamid) : options.longs === Number ? new $util.LongBits(message.last_update_steamid.low >>> 0, message.last_update_steamid.high >>> 0).toNumber() : message.last_update_steamid;
            if (message.event_notes != null && message.hasOwnProperty("event_notes"))
                object.event_notes = message.event_notes;
            if (message.jsondata != null && message.hasOwnProperty("jsondata"))
                object.jsondata = message.jsondata;
            if (message.announcement_body != null && message.hasOwnProperty("announcement_body"))
                object.announcement_body = $root.CCommunity_ClanAnnouncementInfo.toObject(message.announcement_body, options);
            if (message.published != null && message.hasOwnProperty("published"))
                object.published = message.published;
            if (message.hidden != null && message.hasOwnProperty("hidden"))
                object.hidden = message.hidden;
            if (message.rtime32_visibility_start != null && message.hasOwnProperty("rtime32_visibility_start"))
                object.rtime32_visibility_start = message.rtime32_visibility_start;
            if (message.rtime32_visibility_end != null && message.hasOwnProperty("rtime32_visibility_end"))
                object.rtime32_visibility_end = message.rtime32_visibility_end;
            if (message.broadcaster_accountid != null && message.hasOwnProperty("broadcaster_accountid"))
                object.broadcaster_accountid = message.broadcaster_accountid;
            if (message.follower_count != null && message.hasOwnProperty("follower_count"))
                object.follower_count = message.follower_count;
            if (message.ignore_count != null && message.hasOwnProperty("ignore_count"))
                object.ignore_count = message.ignore_count;
            if (message.forum_topic_id != null && message.hasOwnProperty("forum_topic_id"))
                if (typeof message.forum_topic_id === "number")
                    object.forum_topic_id = options.longs === String ? String(message.forum_topic_id) : message.forum_topic_id;
                else
                    object.forum_topic_id = options.longs === String ? $util.Long.prototype.toString.call(message.forum_topic_id) : options.longs === Number ? new $util.LongBits(message.forum_topic_id.low >>> 0, message.forum_topic_id.high >>> 0).toNumber() : message.forum_topic_id;
            if (message.rtime32_last_modified != null && message.hasOwnProperty("rtime32_last_modified"))
                object.rtime32_last_modified = message.rtime32_last_modified;
            if (message.news_post_gid != null && message.hasOwnProperty("news_post_gid"))
                if (typeof message.news_post_gid === "number")
                    object.news_post_gid = options.longs === String ? String(message.news_post_gid) : message.news_post_gid;
                else
                    object.news_post_gid = options.longs === String ? $util.Long.prototype.toString.call(message.news_post_gid) : options.longs === Number ? new $util.LongBits(message.news_post_gid.low >>> 0, message.news_post_gid.high >>> 0).toNumber() : message.news_post_gid;
            if (message.rtime_mod_reviewed != null && message.hasOwnProperty("rtime_mod_reviewed"))
                object.rtime_mod_reviewed = message.rtime_mod_reviewed;
            if (message.featured_app_tagid != null && message.hasOwnProperty("featured_app_tagid"))
                object.featured_app_tagid = message.featured_app_tagid;
            if (message.referenced_appids && message.referenced_appids.length) {
                object.referenced_appids = [];
                for (var j = 0; j < message.referenced_appids.length; ++j)
                    object.referenced_appids[j] = message.referenced_appids[j];
            }
            if (message.build_id != null && message.hasOwnProperty("build_id"))
                object.build_id = message.build_id;
            if (message.build_branch != null && message.hasOwnProperty("build_branch"))
                object.build_branch = message.build_branch;
            return object;
        };
    
        /**
         * Converts this CClanEventData to JSON.
         * @function toJSON
         * @memberof CClanEventData
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CClanEventData.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CClanEventData;
    })();
    
    $root.CBilling_Address = (function() {
    
        /**
         * Properties of a CBilling_Address.
         * @exports ICBilling_Address
         * @interface ICBilling_Address
         * @property {string|null} [first_name] CBilling_Address first_name
         * @property {string|null} [last_name] CBilling_Address last_name
         * @property {string|null} [address1] CBilling_Address address1
         * @property {string|null} [address2] CBilling_Address address2
         * @property {string|null} [city] CBilling_Address city
         * @property {string|null} [us_state] CBilling_Address us_state
         * @property {string|null} [country_code] CBilling_Address country_code
         * @property {string|null} [postcode] CBilling_Address postcode
         * @property {number|null} [zip_plus4] CBilling_Address zip_plus4
         * @property {string|null} [phone] CBilling_Address phone
         */
    
        /**
         * Constructs a new CBilling_Address.
         * @exports CBilling_Address
         * @classdesc Represents a CBilling_Address.
         * @implements ICBilling_Address
         * @constructor
         * @param {ICBilling_Address=} [properties] Properties to set
         */
        function CBilling_Address(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CBilling_Address first_name.
         * @member {string} first_name
         * @memberof CBilling_Address
         * @instance
         */
        CBilling_Address.prototype.first_name = "";
    
        /**
         * CBilling_Address last_name.
         * @member {string} last_name
         * @memberof CBilling_Address
         * @instance
         */
        CBilling_Address.prototype.last_name = "";
    
        /**
         * CBilling_Address address1.
         * @member {string} address1
         * @memberof CBilling_Address
         * @instance
         */
        CBilling_Address.prototype.address1 = "";
    
        /**
         * CBilling_Address address2.
         * @member {string} address2
         * @memberof CBilling_Address
         * @instance
         */
        CBilling_Address.prototype.address2 = "";
    
        /**
         * CBilling_Address city.
         * @member {string} city
         * @memberof CBilling_Address
         * @instance
         */
        CBilling_Address.prototype.city = "";
    
        /**
         * CBilling_Address us_state.
         * @member {string} us_state
         * @memberof CBilling_Address
         * @instance
         */
        CBilling_Address.prototype.us_state = "";
    
        /**
         * CBilling_Address country_code.
         * @member {string} country_code
         * @memberof CBilling_Address
         * @instance
         */
        CBilling_Address.prototype.country_code = "";
    
        /**
         * CBilling_Address postcode.
         * @member {string} postcode
         * @memberof CBilling_Address
         * @instance
         */
        CBilling_Address.prototype.postcode = "";
    
        /**
         * CBilling_Address zip_plus4.
         * @member {number} zip_plus4
         * @memberof CBilling_Address
         * @instance
         */
        CBilling_Address.prototype.zip_plus4 = 0;
    
        /**
         * CBilling_Address phone.
         * @member {string} phone
         * @memberof CBilling_Address
         * @instance
         */
        CBilling_Address.prototype.phone = "";
    
        /**
         * Creates a new CBilling_Address instance using the specified properties.
         * @function create
         * @memberof CBilling_Address
         * @static
         * @param {ICBilling_Address=} [properties] Properties to set
         * @returns {CBilling_Address} CBilling_Address instance
         */
        CBilling_Address.create = function create(properties) {
            return new CBilling_Address(properties);
        };
    
        /**
         * Encodes the specified CBilling_Address message. Does not implicitly {@link CBilling_Address.verify|verify} messages.
         * @function encode
         * @memberof CBilling_Address
         * @static
         * @param {ICBilling_Address} message CBilling_Address message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CBilling_Address.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.first_name != null && message.hasOwnProperty("first_name"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.first_name);
            if (message.last_name != null && message.hasOwnProperty("last_name"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.last_name);
            if (message.address1 != null && message.hasOwnProperty("address1"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.address1);
            if (message.address2 != null && message.hasOwnProperty("address2"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.address2);
            if (message.city != null && message.hasOwnProperty("city"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.city);
            if (message.us_state != null && message.hasOwnProperty("us_state"))
                writer.uint32(/* id 6, wireType 2 =*/50).string(message.us_state);
            if (message.country_code != null && message.hasOwnProperty("country_code"))
                writer.uint32(/* id 7, wireType 2 =*/58).string(message.country_code);
            if (message.postcode != null && message.hasOwnProperty("postcode"))
                writer.uint32(/* id 8, wireType 2 =*/66).string(message.postcode);
            if (message.zip_plus4 != null && message.hasOwnProperty("zip_plus4"))
                writer.uint32(/* id 9, wireType 0 =*/72).int32(message.zip_plus4);
            if (message.phone != null && message.hasOwnProperty("phone"))
                writer.uint32(/* id 10, wireType 2 =*/82).string(message.phone);
            return writer;
        };
    
        /**
         * Encodes the specified CBilling_Address message, length delimited. Does not implicitly {@link CBilling_Address.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CBilling_Address
         * @static
         * @param {ICBilling_Address} message CBilling_Address message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CBilling_Address.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CBilling_Address message from the specified reader or buffer.
         * @function decode
         * @memberof CBilling_Address
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CBilling_Address} CBilling_Address
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CBilling_Address.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CBilling_Address();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.first_name = reader.string();
                    break;
                case 2:
                    message.last_name = reader.string();
                    break;
                case 3:
                    message.address1 = reader.string();
                    break;
                case 4:
                    message.address2 = reader.string();
                    break;
                case 5:
                    message.city = reader.string();
                    break;
                case 6:
                    message.us_state = reader.string();
                    break;
                case 7:
                    message.country_code = reader.string();
                    break;
                case 8:
                    message.postcode = reader.string();
                    break;
                case 9:
                    message.zip_plus4 = reader.int32();
                    break;
                case 10:
                    message.phone = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CBilling_Address message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CBilling_Address
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CBilling_Address} CBilling_Address
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CBilling_Address.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CBilling_Address message.
         * @function verify
         * @memberof CBilling_Address
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CBilling_Address.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.first_name != null && message.hasOwnProperty("first_name"))
                if (!$util.isString(message.first_name))
                    return "first_name: string expected";
            if (message.last_name != null && message.hasOwnProperty("last_name"))
                if (!$util.isString(message.last_name))
                    return "last_name: string expected";
            if (message.address1 != null && message.hasOwnProperty("address1"))
                if (!$util.isString(message.address1))
                    return "address1: string expected";
            if (message.address2 != null && message.hasOwnProperty("address2"))
                if (!$util.isString(message.address2))
                    return "address2: string expected";
            if (message.city != null && message.hasOwnProperty("city"))
                if (!$util.isString(message.city))
                    return "city: string expected";
            if (message.us_state != null && message.hasOwnProperty("us_state"))
                if (!$util.isString(message.us_state))
                    return "us_state: string expected";
            if (message.country_code != null && message.hasOwnProperty("country_code"))
                if (!$util.isString(message.country_code))
                    return "country_code: string expected";
            if (message.postcode != null && message.hasOwnProperty("postcode"))
                if (!$util.isString(message.postcode))
                    return "postcode: string expected";
            if (message.zip_plus4 != null && message.hasOwnProperty("zip_plus4"))
                if (!$util.isInteger(message.zip_plus4))
                    return "zip_plus4: integer expected";
            if (message.phone != null && message.hasOwnProperty("phone"))
                if (!$util.isString(message.phone))
                    return "phone: string expected";
            return null;
        };
    
        /**
         * Creates a CBilling_Address message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CBilling_Address
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CBilling_Address} CBilling_Address
         */
        CBilling_Address.fromObject = function fromObject(object) {
            if (object instanceof $root.CBilling_Address)
                return object;
            var message = new $root.CBilling_Address();
            if (object.first_name != null)
                message.first_name = String(object.first_name);
            if (object.last_name != null)
                message.last_name = String(object.last_name);
            if (object.address1 != null)
                message.address1 = String(object.address1);
            if (object.address2 != null)
                message.address2 = String(object.address2);
            if (object.city != null)
                message.city = String(object.city);
            if (object.us_state != null)
                message.us_state = String(object.us_state);
            if (object.country_code != null)
                message.country_code = String(object.country_code);
            if (object.postcode != null)
                message.postcode = String(object.postcode);
            if (object.zip_plus4 != null)
                message.zip_plus4 = object.zip_plus4 | 0;
            if (object.phone != null)
                message.phone = String(object.phone);
            return message;
        };
    
        /**
         * Creates a plain object from a CBilling_Address message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CBilling_Address
         * @static
         * @param {CBilling_Address} message CBilling_Address
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CBilling_Address.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.first_name = "";
                object.last_name = "";
                object.address1 = "";
                object.address2 = "";
                object.city = "";
                object.us_state = "";
                object.country_code = "";
                object.postcode = "";
                object.zip_plus4 = 0;
                object.phone = "";
            }
            if (message.first_name != null && message.hasOwnProperty("first_name"))
                object.first_name = message.first_name;
            if (message.last_name != null && message.hasOwnProperty("last_name"))
                object.last_name = message.last_name;
            if (message.address1 != null && message.hasOwnProperty("address1"))
                object.address1 = message.address1;
            if (message.address2 != null && message.hasOwnProperty("address2"))
                object.address2 = message.address2;
            if (message.city != null && message.hasOwnProperty("city"))
                object.city = message.city;
            if (message.us_state != null && message.hasOwnProperty("us_state"))
                object.us_state = message.us_state;
            if (message.country_code != null && message.hasOwnProperty("country_code"))
                object.country_code = message.country_code;
            if (message.postcode != null && message.hasOwnProperty("postcode"))
                object.postcode = message.postcode;
            if (message.zip_plus4 != null && message.hasOwnProperty("zip_plus4"))
                object.zip_plus4 = message.zip_plus4;
            if (message.phone != null && message.hasOwnProperty("phone"))
                object.phone = message.phone;
            return object;
        };
    
        /**
         * Converts this CBilling_Address to JSON.
         * @function toJSON
         * @memberof CBilling_Address
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CBilling_Address.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CBilling_Address;
    })();
    
    $root.CPackageReservationStatus = (function() {
    
        /**
         * Properties of a CPackageReservationStatus.
         * @exports ICPackageReservationStatus
         * @interface ICPackageReservationStatus
         * @property {number|null} [packageid] CPackageReservationStatus packageid
         * @property {number|null} [reservation_state] CPackageReservationStatus reservation_state
         * @property {number|null} [queue_position] CPackageReservationStatus queue_position
         * @property {number|null} [total_queue_size] CPackageReservationStatus total_queue_size
         * @property {string|null} [reservation_country_code] CPackageReservationStatus reservation_country_code
         * @property {boolean|null} [expired] CPackageReservationStatus expired
         * @property {number|null} [time_expires] CPackageReservationStatus time_expires
         * @property {number|null} [time_reserved] CPackageReservationStatus time_reserved
         */
    
        /**
         * Constructs a new CPackageReservationStatus.
         * @exports CPackageReservationStatus
         * @classdesc Represents a CPackageReservationStatus.
         * @implements ICPackageReservationStatus
         * @constructor
         * @param {ICPackageReservationStatus=} [properties] Properties to set
         */
        function CPackageReservationStatus(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CPackageReservationStatus packageid.
         * @member {number} packageid
         * @memberof CPackageReservationStatus
         * @instance
         */
        CPackageReservationStatus.prototype.packageid = 0;
    
        /**
         * CPackageReservationStatus reservation_state.
         * @member {number} reservation_state
         * @memberof CPackageReservationStatus
         * @instance
         */
        CPackageReservationStatus.prototype.reservation_state = 0;
    
        /**
         * CPackageReservationStatus queue_position.
         * @member {number} queue_position
         * @memberof CPackageReservationStatus
         * @instance
         */
        CPackageReservationStatus.prototype.queue_position = 0;
    
        /**
         * CPackageReservationStatus total_queue_size.
         * @member {number} total_queue_size
         * @memberof CPackageReservationStatus
         * @instance
         */
        CPackageReservationStatus.prototype.total_queue_size = 0;
    
        /**
         * CPackageReservationStatus reservation_country_code.
         * @member {string} reservation_country_code
         * @memberof CPackageReservationStatus
         * @instance
         */
        CPackageReservationStatus.prototype.reservation_country_code = "";
    
        /**
         * CPackageReservationStatus expired.
         * @member {boolean} expired
         * @memberof CPackageReservationStatus
         * @instance
         */
        CPackageReservationStatus.prototype.expired = false;
    
        /**
         * CPackageReservationStatus time_expires.
         * @member {number} time_expires
         * @memberof CPackageReservationStatus
         * @instance
         */
        CPackageReservationStatus.prototype.time_expires = 0;
    
        /**
         * CPackageReservationStatus time_reserved.
         * @member {number} time_reserved
         * @memberof CPackageReservationStatus
         * @instance
         */
        CPackageReservationStatus.prototype.time_reserved = 0;
    
        /**
         * Creates a new CPackageReservationStatus instance using the specified properties.
         * @function create
         * @memberof CPackageReservationStatus
         * @static
         * @param {ICPackageReservationStatus=} [properties] Properties to set
         * @returns {CPackageReservationStatus} CPackageReservationStatus instance
         */
        CPackageReservationStatus.create = function create(properties) {
            return new CPackageReservationStatus(properties);
        };
    
        /**
         * Encodes the specified CPackageReservationStatus message. Does not implicitly {@link CPackageReservationStatus.verify|verify} messages.
         * @function encode
         * @memberof CPackageReservationStatus
         * @static
         * @param {ICPackageReservationStatus} message CPackageReservationStatus message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPackageReservationStatus.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.packageid != null && message.hasOwnProperty("packageid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.packageid);
            if (message.reservation_state != null && message.hasOwnProperty("reservation_state"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.reservation_state);
            if (message.queue_position != null && message.hasOwnProperty("queue_position"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.queue_position);
            if (message.total_queue_size != null && message.hasOwnProperty("total_queue_size"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.total_queue_size);
            if (message.reservation_country_code != null && message.hasOwnProperty("reservation_country_code"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.reservation_country_code);
            if (message.expired != null && message.hasOwnProperty("expired"))
                writer.uint32(/* id 6, wireType 0 =*/48).bool(message.expired);
            if (message.time_expires != null && message.hasOwnProperty("time_expires"))
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.time_expires);
            if (message.time_reserved != null && message.hasOwnProperty("time_reserved"))
                writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.time_reserved);
            return writer;
        };
    
        /**
         * Encodes the specified CPackageReservationStatus message, length delimited. Does not implicitly {@link CPackageReservationStatus.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPackageReservationStatus
         * @static
         * @param {ICPackageReservationStatus} message CPackageReservationStatus message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPackageReservationStatus.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPackageReservationStatus message from the specified reader or buffer.
         * @function decode
         * @memberof CPackageReservationStatus
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPackageReservationStatus} CPackageReservationStatus
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPackageReservationStatus.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPackageReservationStatus();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.packageid = reader.uint32();
                    break;
                case 2:
                    message.reservation_state = reader.int32();
                    break;
                case 3:
                    message.queue_position = reader.int32();
                    break;
                case 4:
                    message.total_queue_size = reader.int32();
                    break;
                case 5:
                    message.reservation_country_code = reader.string();
                    break;
                case 6:
                    message.expired = reader.bool();
                    break;
                case 7:
                    message.time_expires = reader.uint32();
                    break;
                case 8:
                    message.time_reserved = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPackageReservationStatus message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPackageReservationStatus
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPackageReservationStatus} CPackageReservationStatus
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPackageReservationStatus.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPackageReservationStatus message.
         * @function verify
         * @memberof CPackageReservationStatus
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPackageReservationStatus.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.packageid != null && message.hasOwnProperty("packageid"))
                if (!$util.isInteger(message.packageid))
                    return "packageid: integer expected";
            if (message.reservation_state != null && message.hasOwnProperty("reservation_state"))
                if (!$util.isInteger(message.reservation_state))
                    return "reservation_state: integer expected";
            if (message.queue_position != null && message.hasOwnProperty("queue_position"))
                if (!$util.isInteger(message.queue_position))
                    return "queue_position: integer expected";
            if (message.total_queue_size != null && message.hasOwnProperty("total_queue_size"))
                if (!$util.isInteger(message.total_queue_size))
                    return "total_queue_size: integer expected";
            if (message.reservation_country_code != null && message.hasOwnProperty("reservation_country_code"))
                if (!$util.isString(message.reservation_country_code))
                    return "reservation_country_code: string expected";
            if (message.expired != null && message.hasOwnProperty("expired"))
                if (typeof message.expired !== "boolean")
                    return "expired: boolean expected";
            if (message.time_expires != null && message.hasOwnProperty("time_expires"))
                if (!$util.isInteger(message.time_expires))
                    return "time_expires: integer expected";
            if (message.time_reserved != null && message.hasOwnProperty("time_reserved"))
                if (!$util.isInteger(message.time_reserved))
                    return "time_reserved: integer expected";
            return null;
        };
    
        /**
         * Creates a CPackageReservationStatus message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPackageReservationStatus
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPackageReservationStatus} CPackageReservationStatus
         */
        CPackageReservationStatus.fromObject = function fromObject(object) {
            if (object instanceof $root.CPackageReservationStatus)
                return object;
            var message = new $root.CPackageReservationStatus();
            if (object.packageid != null)
                message.packageid = object.packageid >>> 0;
            if (object.reservation_state != null)
                message.reservation_state = object.reservation_state | 0;
            if (object.queue_position != null)
                message.queue_position = object.queue_position | 0;
            if (object.total_queue_size != null)
                message.total_queue_size = object.total_queue_size | 0;
            if (object.reservation_country_code != null)
                message.reservation_country_code = String(object.reservation_country_code);
            if (object.expired != null)
                message.expired = Boolean(object.expired);
            if (object.time_expires != null)
                message.time_expires = object.time_expires >>> 0;
            if (object.time_reserved != null)
                message.time_reserved = object.time_reserved >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CPackageReservationStatus message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPackageReservationStatus
         * @static
         * @param {CPackageReservationStatus} message CPackageReservationStatus
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPackageReservationStatus.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.packageid = 0;
                object.reservation_state = 0;
                object.queue_position = 0;
                object.total_queue_size = 0;
                object.reservation_country_code = "";
                object.expired = false;
                object.time_expires = 0;
                object.time_reserved = 0;
            }
            if (message.packageid != null && message.hasOwnProperty("packageid"))
                object.packageid = message.packageid;
            if (message.reservation_state != null && message.hasOwnProperty("reservation_state"))
                object.reservation_state = message.reservation_state;
            if (message.queue_position != null && message.hasOwnProperty("queue_position"))
                object.queue_position = message.queue_position;
            if (message.total_queue_size != null && message.hasOwnProperty("total_queue_size"))
                object.total_queue_size = message.total_queue_size;
            if (message.reservation_country_code != null && message.hasOwnProperty("reservation_country_code"))
                object.reservation_country_code = message.reservation_country_code;
            if (message.expired != null && message.hasOwnProperty("expired"))
                object.expired = message.expired;
            if (message.time_expires != null && message.hasOwnProperty("time_expires"))
                object.time_expires = message.time_expires;
            if (message.time_reserved != null && message.hasOwnProperty("time_reserved"))
                object.time_reserved = message.time_reserved;
            return object;
        };
    
        /**
         * Converts this CPackageReservationStatus to JSON.
         * @function toJSON
         * @memberof CPackageReservationStatus
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPackageReservationStatus.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CPackageReservationStatus;
    })();
    
    /**
     * ECloudPendingRemoteOperation enum.
     * @exports ECloudPendingRemoteOperation
     * @enum {string}
     * @property {number} k_ECloudPendingRemoteOperationNone=0 k_ECloudPendingRemoteOperationNone value
     * @property {number} k_ECloudPendingRemoteOperationAppSessionActive=1 k_ECloudPendingRemoteOperationAppSessionActive value
     * @property {number} k_ECloudPendingRemoteOperationUploadInProgress=2 k_ECloudPendingRemoteOperationUploadInProgress value
     * @property {number} k_ECloudPendingRemoteOperationUploadPending=3 k_ECloudPendingRemoteOperationUploadPending value
     * @property {number} k_ECloudPendingRemoteOperationAppSessionSuspended=4 k_ECloudPendingRemoteOperationAppSessionSuspended value
     */
    $root.ECloudPendingRemoteOperation = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "k_ECloudPendingRemoteOperationNone"] = 0;
        values[valuesById[1] = "k_ECloudPendingRemoteOperationAppSessionActive"] = 1;
        values[valuesById[2] = "k_ECloudPendingRemoteOperationUploadInProgress"] = 2;
        values[valuesById[3] = "k_ECloudPendingRemoteOperationUploadPending"] = 3;
        values[valuesById[4] = "k_ECloudPendingRemoteOperationAppSessionSuspended"] = 4;
        return values;
    })();
    
    $root.SteamMessagesClientIClientForcedEnumDependencies = (function() {
    
        /**
         * Properties of a SteamMessagesClientIClientForcedEnumDependencies.
         * @exports ISteamMessagesClientIClientForcedEnumDependencies
         * @interface ISteamMessagesClientIClientForcedEnumDependencies
         * @property {EBluetoothDeviceType|null} [a] SteamMessagesClientIClientForcedEnumDependencies a
         * @property {EStorageBlockContentType|null} [b] SteamMessagesClientIClientForcedEnumDependencies b
         * @property {EStorageBlockFileSystemType|null} [c] SteamMessagesClientIClientForcedEnumDependencies c
         */
    
        /**
         * Constructs a new SteamMessagesClientIClientForcedEnumDependencies.
         * @exports SteamMessagesClientIClientForcedEnumDependencies
         * @classdesc Represents a SteamMessagesClientIClientForcedEnumDependencies.
         * @implements ISteamMessagesClientIClientForcedEnumDependencies
         * @constructor
         * @param {ISteamMessagesClientIClientForcedEnumDependencies=} [properties] Properties to set
         */
        function SteamMessagesClientIClientForcedEnumDependencies(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * SteamMessagesClientIClientForcedEnumDependencies a.
         * @member {EBluetoothDeviceType} a
         * @memberof SteamMessagesClientIClientForcedEnumDependencies
         * @instance
         */
        SteamMessagesClientIClientForcedEnumDependencies.prototype.a = 0;
    
        /**
         * SteamMessagesClientIClientForcedEnumDependencies b.
         * @member {EStorageBlockContentType} b
         * @memberof SteamMessagesClientIClientForcedEnumDependencies
         * @instance
         */
        SteamMessagesClientIClientForcedEnumDependencies.prototype.b = 0;
    
        /**
         * SteamMessagesClientIClientForcedEnumDependencies c.
         * @member {EStorageBlockFileSystemType} c
         * @memberof SteamMessagesClientIClientForcedEnumDependencies
         * @instance
         */
        SteamMessagesClientIClientForcedEnumDependencies.prototype.c = 0;
    
        /**
         * Creates a new SteamMessagesClientIClientForcedEnumDependencies instance using the specified properties.
         * @function create
         * @memberof SteamMessagesClientIClientForcedEnumDependencies
         * @static
         * @param {ISteamMessagesClientIClientForcedEnumDependencies=} [properties] Properties to set
         * @returns {SteamMessagesClientIClientForcedEnumDependencies} SteamMessagesClientIClientForcedEnumDependencies instance
         */
        SteamMessagesClientIClientForcedEnumDependencies.create = function create(properties) {
            return new SteamMessagesClientIClientForcedEnumDependencies(properties);
        };
    
        /**
         * Encodes the specified SteamMessagesClientIClientForcedEnumDependencies message. Does not implicitly {@link SteamMessagesClientIClientForcedEnumDependencies.verify|verify} messages.
         * @function encode
         * @memberof SteamMessagesClientIClientForcedEnumDependencies
         * @static
         * @param {ISteamMessagesClientIClientForcedEnumDependencies} message SteamMessagesClientIClientForcedEnumDependencies message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SteamMessagesClientIClientForcedEnumDependencies.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.a != null && message.hasOwnProperty("a"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.a);
            if (message.b != null && message.hasOwnProperty("b"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.b);
            if (message.c != null && message.hasOwnProperty("c"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.c);
            return writer;
        };
    
        /**
         * Encodes the specified SteamMessagesClientIClientForcedEnumDependencies message, length delimited. Does not implicitly {@link SteamMessagesClientIClientForcedEnumDependencies.verify|verify} messages.
         * @function encodeDelimited
         * @memberof SteamMessagesClientIClientForcedEnumDependencies
         * @static
         * @param {ISteamMessagesClientIClientForcedEnumDependencies} message SteamMessagesClientIClientForcedEnumDependencies message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SteamMessagesClientIClientForcedEnumDependencies.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a SteamMessagesClientIClientForcedEnumDependencies message from the specified reader or buffer.
         * @function decode
         * @memberof SteamMessagesClientIClientForcedEnumDependencies
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {SteamMessagesClientIClientForcedEnumDependencies} SteamMessagesClientIClientForcedEnumDependencies
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SteamMessagesClientIClientForcedEnumDependencies.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SteamMessagesClientIClientForcedEnumDependencies();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.a = reader.int32();
                    break;
                case 2:
                    message.b = reader.int32();
                    break;
                case 3:
                    message.c = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a SteamMessagesClientIClientForcedEnumDependencies message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof SteamMessagesClientIClientForcedEnumDependencies
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {SteamMessagesClientIClientForcedEnumDependencies} SteamMessagesClientIClientForcedEnumDependencies
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SteamMessagesClientIClientForcedEnumDependencies.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a SteamMessagesClientIClientForcedEnumDependencies message.
         * @function verify
         * @memberof SteamMessagesClientIClientForcedEnumDependencies
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SteamMessagesClientIClientForcedEnumDependencies.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.a != null && message.hasOwnProperty("a"))
                switch (message.a) {
                default:
                    return "a: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                    break;
                }
            if (message.b != null && message.hasOwnProperty("b"))
                switch (message.b) {
                default:
                    return "b: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                    break;
                }
            if (message.c != null && message.hasOwnProperty("c"))
                switch (message.c) {
                default:
                    return "c: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                    break;
                }
            return null;
        };
    
        /**
         * Creates a SteamMessagesClientIClientForcedEnumDependencies message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof SteamMessagesClientIClientForcedEnumDependencies
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {SteamMessagesClientIClientForcedEnumDependencies} SteamMessagesClientIClientForcedEnumDependencies
         */
        SteamMessagesClientIClientForcedEnumDependencies.fromObject = function fromObject(object) {
            if (object instanceof $root.SteamMessagesClientIClientForcedEnumDependencies)
                return object;
            var message = new $root.SteamMessagesClientIClientForcedEnumDependencies();
            switch (object.a) {
            case "k_BluetoothDeviceType_Invalid":
            case 0:
                message.a = 0;
                break;
            case "k_BluetoothDeviceType_Unknown":
            case 1:
                message.a = 1;
                break;
            case "k_BluetoothDeviceType_Phone":
            case 2:
                message.a = 2;
                break;
            case "k_BluetoothDeviceType_Computer":
            case 3:
                message.a = 3;
                break;
            case "k_BluetoothDeviceType_Headset":
            case 4:
                message.a = 4;
                break;
            case "k_BluetoothDeviceType_Headphones":
            case 5:
                message.a = 5;
                break;
            case "k_BluetoothDeviceType_Speakers":
            case 6:
                message.a = 6;
                break;
            case "k_BluetoothDeviceType_OtherAudio":
            case 7:
                message.a = 7;
                break;
            case "k_BluetoothDeviceType_Mouse":
            case 8:
                message.a = 8;
                break;
            case "k_BluetoothDeviceType_Joystick":
            case 9:
                message.a = 9;
                break;
            case "k_BluetoothDeviceType_Gamepad":
            case 10:
                message.a = 10;
                break;
            case "k_BluetoothDeviceType_Keyboard":
            case 11:
                message.a = 11;
                break;
            }
            switch (object.b) {
            case "k_EStorageBlockContentType_Invalid":
            case 0:
                message.b = 0;
                break;
            case "k_EStorageBlockContentType_Unknown":
            case 1:
                message.b = 1;
                break;
            case "k_EStorageBlockContentType_FileSystem":
            case 2:
                message.b = 2;
                break;
            case "k_EStorageBlockContentType_Crypto":
            case 3:
                message.b = 3;
                break;
            case "k_EStorageBlockContentType_Raid":
            case 4:
                message.b = 4;
                break;
            }
            switch (object.c) {
            case "k_EStorageBlockFileSystemType_Invalid":
            case 0:
                message.c = 0;
                break;
            case "k_EStorageBlockFileSystemType_Unknown":
            case 1:
                message.c = 1;
                break;
            case "k_EStorageBlockFileSystemType_VFat":
            case 2:
                message.c = 2;
                break;
            case "k_EStorageBlockFileSystemType_Ext4":
            case 3:
                message.c = 3;
                break;
            }
            return message;
        };
    
        /**
         * Creates a plain object from a SteamMessagesClientIClientForcedEnumDependencies message. Also converts values to other types if specified.
         * @function toObject
         * @memberof SteamMessagesClientIClientForcedEnumDependencies
         * @static
         * @param {SteamMessagesClientIClientForcedEnumDependencies} message SteamMessagesClientIClientForcedEnumDependencies
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SteamMessagesClientIClientForcedEnumDependencies.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.a = options.enums === String ? "k_BluetoothDeviceType_Invalid" : 0;
                object.b = options.enums === String ? "k_EStorageBlockContentType_Invalid" : 0;
                object.c = options.enums === String ? "k_EStorageBlockFileSystemType_Invalid" : 0;
            }
            if (message.a != null && message.hasOwnProperty("a"))
                object.a = options.enums === String ? $root.EBluetoothDeviceType[message.a] : message.a;
            if (message.b != null && message.hasOwnProperty("b"))
                object.b = options.enums === String ? $root.EStorageBlockContentType[message.b] : message.b;
            if (message.c != null && message.hasOwnProperty("c"))
                object.c = options.enums === String ? $root.EStorageBlockFileSystemType[message.c] : message.c;
            return object;
        };
    
        /**
         * Converts this SteamMessagesClientIClientForcedEnumDependencies to JSON.
         * @function toJSON
         * @memberof SteamMessagesClientIClientForcedEnumDependencies
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SteamMessagesClientIClientForcedEnumDependencies.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return SteamMessagesClientIClientForcedEnumDependencies;
    })();
    
    $root.CMsgNetworkDeviceIP4Address = (function() {
    
        /**
         * Properties of a CMsgNetworkDeviceIP4Address.
         * @exports ICMsgNetworkDeviceIP4Address
         * @interface ICMsgNetworkDeviceIP4Address
         * @property {number|null} [ip] CMsgNetworkDeviceIP4Address ip
         * @property {number|null} [netmask] CMsgNetworkDeviceIP4Address netmask
         */
    
        /**
         * Constructs a new CMsgNetworkDeviceIP4Address.
         * @exports CMsgNetworkDeviceIP4Address
         * @classdesc Represents a CMsgNetworkDeviceIP4Address.
         * @implements ICMsgNetworkDeviceIP4Address
         * @constructor
         * @param {ICMsgNetworkDeviceIP4Address=} [properties] Properties to set
         */
        function CMsgNetworkDeviceIP4Address(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgNetworkDeviceIP4Address ip.
         * @member {number} ip
         * @memberof CMsgNetworkDeviceIP4Address
         * @instance
         */
        CMsgNetworkDeviceIP4Address.prototype.ip = 0;
    
        /**
         * CMsgNetworkDeviceIP4Address netmask.
         * @member {number} netmask
         * @memberof CMsgNetworkDeviceIP4Address
         * @instance
         */
        CMsgNetworkDeviceIP4Address.prototype.netmask = 0;
    
        /**
         * Creates a new CMsgNetworkDeviceIP4Address instance using the specified properties.
         * @function create
         * @memberof CMsgNetworkDeviceIP4Address
         * @static
         * @param {ICMsgNetworkDeviceIP4Address=} [properties] Properties to set
         * @returns {CMsgNetworkDeviceIP4Address} CMsgNetworkDeviceIP4Address instance
         */
        CMsgNetworkDeviceIP4Address.create = function create(properties) {
            return new CMsgNetworkDeviceIP4Address(properties);
        };
    
        /**
         * Encodes the specified CMsgNetworkDeviceIP4Address message. Does not implicitly {@link CMsgNetworkDeviceIP4Address.verify|verify} messages.
         * @function encode
         * @memberof CMsgNetworkDeviceIP4Address
         * @static
         * @param {ICMsgNetworkDeviceIP4Address} message CMsgNetworkDeviceIP4Address message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgNetworkDeviceIP4Address.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.ip != null && message.hasOwnProperty("ip"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.ip);
            if (message.netmask != null && message.hasOwnProperty("netmask"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.netmask);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgNetworkDeviceIP4Address message, length delimited. Does not implicitly {@link CMsgNetworkDeviceIP4Address.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgNetworkDeviceIP4Address
         * @static
         * @param {ICMsgNetworkDeviceIP4Address} message CMsgNetworkDeviceIP4Address message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgNetworkDeviceIP4Address.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgNetworkDeviceIP4Address message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgNetworkDeviceIP4Address
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgNetworkDeviceIP4Address} CMsgNetworkDeviceIP4Address
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgNetworkDeviceIP4Address.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgNetworkDeviceIP4Address();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.ip = reader.int32();
                    break;
                case 2:
                    message.netmask = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgNetworkDeviceIP4Address message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgNetworkDeviceIP4Address
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgNetworkDeviceIP4Address} CMsgNetworkDeviceIP4Address
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgNetworkDeviceIP4Address.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgNetworkDeviceIP4Address message.
         * @function verify
         * @memberof CMsgNetworkDeviceIP4Address
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgNetworkDeviceIP4Address.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.ip != null && message.hasOwnProperty("ip"))
                if (!$util.isInteger(message.ip))
                    return "ip: integer expected";
            if (message.netmask != null && message.hasOwnProperty("netmask"))
                if (!$util.isInteger(message.netmask))
                    return "netmask: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgNetworkDeviceIP4Address message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgNetworkDeviceIP4Address
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgNetworkDeviceIP4Address} CMsgNetworkDeviceIP4Address
         */
        CMsgNetworkDeviceIP4Address.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgNetworkDeviceIP4Address)
                return object;
            var message = new $root.CMsgNetworkDeviceIP4Address();
            if (object.ip != null)
                message.ip = object.ip | 0;
            if (object.netmask != null)
                message.netmask = object.netmask | 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgNetworkDeviceIP4Address message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgNetworkDeviceIP4Address
         * @static
         * @param {CMsgNetworkDeviceIP4Address} message CMsgNetworkDeviceIP4Address
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgNetworkDeviceIP4Address.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.ip = 0;
                object.netmask = 0;
            }
            if (message.ip != null && message.hasOwnProperty("ip"))
                object.ip = message.ip;
            if (message.netmask != null && message.hasOwnProperty("netmask"))
                object.netmask = message.netmask;
            return object;
        };
    
        /**
         * Converts this CMsgNetworkDeviceIP4Address to JSON.
         * @function toJSON
         * @memberof CMsgNetworkDeviceIP4Address
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgNetworkDeviceIP4Address.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgNetworkDeviceIP4Address;
    })();
    
    $root.CMsgNetworkDeviceIP4Config = (function() {
    
        /**
         * Properties of a CMsgNetworkDeviceIP4Config.
         * @exports ICMsgNetworkDeviceIP4Config
         * @interface ICMsgNetworkDeviceIP4Config
         * @property {Array.<ICMsgNetworkDeviceIP4Address>|null} [addresses] CMsgNetworkDeviceIP4Config addresses
         * @property {Array.<number>|null} [dns_ip] CMsgNetworkDeviceIP4Config dns_ip
         * @property {number|null} [gateway_ip] CMsgNetworkDeviceIP4Config gateway_ip
         * @property {boolean|null} [is_dhcp_enabled] CMsgNetworkDeviceIP4Config is_dhcp_enabled
         * @property {boolean|null} [is_default_route] CMsgNetworkDeviceIP4Config is_default_route
         * @property {boolean|null} [is_enabled] CMsgNetworkDeviceIP4Config is_enabled
         */
    
        /**
         * Constructs a new CMsgNetworkDeviceIP4Config.
         * @exports CMsgNetworkDeviceIP4Config
         * @classdesc Represents a CMsgNetworkDeviceIP4Config.
         * @implements ICMsgNetworkDeviceIP4Config
         * @constructor
         * @param {ICMsgNetworkDeviceIP4Config=} [properties] Properties to set
         */
        function CMsgNetworkDeviceIP4Config(properties) {
            this.addresses = [];
            this.dns_ip = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgNetworkDeviceIP4Config addresses.
         * @member {Array.<ICMsgNetworkDeviceIP4Address>} addresses
         * @memberof CMsgNetworkDeviceIP4Config
         * @instance
         */
        CMsgNetworkDeviceIP4Config.prototype.addresses = $util.emptyArray;
    
        /**
         * CMsgNetworkDeviceIP4Config dns_ip.
         * @member {Array.<number>} dns_ip
         * @memberof CMsgNetworkDeviceIP4Config
         * @instance
         */
        CMsgNetworkDeviceIP4Config.prototype.dns_ip = $util.emptyArray;
    
        /**
         * CMsgNetworkDeviceIP4Config gateway_ip.
         * @member {number} gateway_ip
         * @memberof CMsgNetworkDeviceIP4Config
         * @instance
         */
        CMsgNetworkDeviceIP4Config.prototype.gateway_ip = 0;
    
        /**
         * CMsgNetworkDeviceIP4Config is_dhcp_enabled.
         * @member {boolean} is_dhcp_enabled
         * @memberof CMsgNetworkDeviceIP4Config
         * @instance
         */
        CMsgNetworkDeviceIP4Config.prototype.is_dhcp_enabled = false;
    
        /**
         * CMsgNetworkDeviceIP4Config is_default_route.
         * @member {boolean} is_default_route
         * @memberof CMsgNetworkDeviceIP4Config
         * @instance
         */
        CMsgNetworkDeviceIP4Config.prototype.is_default_route = false;
    
        /**
         * CMsgNetworkDeviceIP4Config is_enabled.
         * @member {boolean} is_enabled
         * @memberof CMsgNetworkDeviceIP4Config
         * @instance
         */
        CMsgNetworkDeviceIP4Config.prototype.is_enabled = false;
    
        /**
         * Creates a new CMsgNetworkDeviceIP4Config instance using the specified properties.
         * @function create
         * @memberof CMsgNetworkDeviceIP4Config
         * @static
         * @param {ICMsgNetworkDeviceIP4Config=} [properties] Properties to set
         * @returns {CMsgNetworkDeviceIP4Config} CMsgNetworkDeviceIP4Config instance
         */
        CMsgNetworkDeviceIP4Config.create = function create(properties) {
            return new CMsgNetworkDeviceIP4Config(properties);
        };
    
        /**
         * Encodes the specified CMsgNetworkDeviceIP4Config message. Does not implicitly {@link CMsgNetworkDeviceIP4Config.verify|verify} messages.
         * @function encode
         * @memberof CMsgNetworkDeviceIP4Config
         * @static
         * @param {ICMsgNetworkDeviceIP4Config} message CMsgNetworkDeviceIP4Config message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgNetworkDeviceIP4Config.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.addresses != null && message.addresses.length)
                for (var i = 0; i < message.addresses.length; ++i)
                    $root.CMsgNetworkDeviceIP4Address.encode(message.addresses[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.dns_ip != null && message.dns_ip.length)
                for (var i = 0; i < message.dns_ip.length; ++i)
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.dns_ip[i]);
            if (message.gateway_ip != null && message.hasOwnProperty("gateway_ip"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.gateway_ip);
            if (message.is_dhcp_enabled != null && message.hasOwnProperty("is_dhcp_enabled"))
                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.is_dhcp_enabled);
            if (message.is_default_route != null && message.hasOwnProperty("is_default_route"))
                writer.uint32(/* id 5, wireType 0 =*/40).bool(message.is_default_route);
            if (message.is_enabled != null && message.hasOwnProperty("is_enabled"))
                writer.uint32(/* id 6, wireType 0 =*/48).bool(message.is_enabled);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgNetworkDeviceIP4Config message, length delimited. Does not implicitly {@link CMsgNetworkDeviceIP4Config.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgNetworkDeviceIP4Config
         * @static
         * @param {ICMsgNetworkDeviceIP4Config} message CMsgNetworkDeviceIP4Config message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgNetworkDeviceIP4Config.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgNetworkDeviceIP4Config message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgNetworkDeviceIP4Config
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgNetworkDeviceIP4Config} CMsgNetworkDeviceIP4Config
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgNetworkDeviceIP4Config.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgNetworkDeviceIP4Config();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.addresses && message.addresses.length))
                        message.addresses = [];
                    message.addresses.push($root.CMsgNetworkDeviceIP4Address.decode(reader, reader.uint32()));
                    break;
                case 2:
                    if (!(message.dns_ip && message.dns_ip.length))
                        message.dns_ip = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.dns_ip.push(reader.int32());
                    } else
                        message.dns_ip.push(reader.int32());
                    break;
                case 3:
                    message.gateway_ip = reader.int32();
                    break;
                case 4:
                    message.is_dhcp_enabled = reader.bool();
                    break;
                case 5:
                    message.is_default_route = reader.bool();
                    break;
                case 6:
                    message.is_enabled = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgNetworkDeviceIP4Config message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgNetworkDeviceIP4Config
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgNetworkDeviceIP4Config} CMsgNetworkDeviceIP4Config
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgNetworkDeviceIP4Config.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgNetworkDeviceIP4Config message.
         * @function verify
         * @memberof CMsgNetworkDeviceIP4Config
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgNetworkDeviceIP4Config.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.addresses != null && message.hasOwnProperty("addresses")) {
                if (!Array.isArray(message.addresses))
                    return "addresses: array expected";
                for (var i = 0; i < message.addresses.length; ++i) {
                    var error = $root.CMsgNetworkDeviceIP4Address.verify(message.addresses[i]);
                    if (error)
                        return "addresses." + error;
                }
            }
            if (message.dns_ip != null && message.hasOwnProperty("dns_ip")) {
                if (!Array.isArray(message.dns_ip))
                    return "dns_ip: array expected";
                for (var i = 0; i < message.dns_ip.length; ++i)
                    if (!$util.isInteger(message.dns_ip[i]))
                        return "dns_ip: integer[] expected";
            }
            if (message.gateway_ip != null && message.hasOwnProperty("gateway_ip"))
                if (!$util.isInteger(message.gateway_ip))
                    return "gateway_ip: integer expected";
            if (message.is_dhcp_enabled != null && message.hasOwnProperty("is_dhcp_enabled"))
                if (typeof message.is_dhcp_enabled !== "boolean")
                    return "is_dhcp_enabled: boolean expected";
            if (message.is_default_route != null && message.hasOwnProperty("is_default_route"))
                if (typeof message.is_default_route !== "boolean")
                    return "is_default_route: boolean expected";
            if (message.is_enabled != null && message.hasOwnProperty("is_enabled"))
                if (typeof message.is_enabled !== "boolean")
                    return "is_enabled: boolean expected";
            return null;
        };
    
        /**
         * Creates a CMsgNetworkDeviceIP4Config message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgNetworkDeviceIP4Config
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgNetworkDeviceIP4Config} CMsgNetworkDeviceIP4Config
         */
        CMsgNetworkDeviceIP4Config.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgNetworkDeviceIP4Config)
                return object;
            var message = new $root.CMsgNetworkDeviceIP4Config();
            if (object.addresses) {
                if (!Array.isArray(object.addresses))
                    throw TypeError(".CMsgNetworkDeviceIP4Config.addresses: array expected");
                message.addresses = [];
                for (var i = 0; i < object.addresses.length; ++i) {
                    if (typeof object.addresses[i] !== "object")
                        throw TypeError(".CMsgNetworkDeviceIP4Config.addresses: object expected");
                    message.addresses[i] = $root.CMsgNetworkDeviceIP4Address.fromObject(object.addresses[i]);
                }
            }
            if (object.dns_ip) {
                if (!Array.isArray(object.dns_ip))
                    throw TypeError(".CMsgNetworkDeviceIP4Config.dns_ip: array expected");
                message.dns_ip = [];
                for (var i = 0; i < object.dns_ip.length; ++i)
                    message.dns_ip[i] = object.dns_ip[i] | 0;
            }
            if (object.gateway_ip != null)
                message.gateway_ip = object.gateway_ip | 0;
            if (object.is_dhcp_enabled != null)
                message.is_dhcp_enabled = Boolean(object.is_dhcp_enabled);
            if (object.is_default_route != null)
                message.is_default_route = Boolean(object.is_default_route);
            if (object.is_enabled != null)
                message.is_enabled = Boolean(object.is_enabled);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgNetworkDeviceIP4Config message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgNetworkDeviceIP4Config
         * @static
         * @param {CMsgNetworkDeviceIP4Config} message CMsgNetworkDeviceIP4Config
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgNetworkDeviceIP4Config.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.addresses = [];
                object.dns_ip = [];
            }
            if (options.defaults) {
                object.gateway_ip = 0;
                object.is_dhcp_enabled = false;
                object.is_default_route = false;
                object.is_enabled = false;
            }
            if (message.addresses && message.addresses.length) {
                object.addresses = [];
                for (var j = 0; j < message.addresses.length; ++j)
                    object.addresses[j] = $root.CMsgNetworkDeviceIP4Address.toObject(message.addresses[j], options);
            }
            if (message.dns_ip && message.dns_ip.length) {
                object.dns_ip = [];
                for (var j = 0; j < message.dns_ip.length; ++j)
                    object.dns_ip[j] = message.dns_ip[j];
            }
            if (message.gateway_ip != null && message.hasOwnProperty("gateway_ip"))
                object.gateway_ip = message.gateway_ip;
            if (message.is_dhcp_enabled != null && message.hasOwnProperty("is_dhcp_enabled"))
                object.is_dhcp_enabled = message.is_dhcp_enabled;
            if (message.is_default_route != null && message.hasOwnProperty("is_default_route"))
                object.is_default_route = message.is_default_route;
            if (message.is_enabled != null && message.hasOwnProperty("is_enabled"))
                object.is_enabled = message.is_enabled;
            return object;
        };
    
        /**
         * Converts this CMsgNetworkDeviceIP4Config to JSON.
         * @function toJSON
         * @memberof CMsgNetworkDeviceIP4Config
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgNetworkDeviceIP4Config.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgNetworkDeviceIP4Config;
    })();
    
    $root.CMsgNetworkDeviceIP6Address = (function() {
    
        /**
         * Properties of a CMsgNetworkDeviceIP6Address.
         * @exports ICMsgNetworkDeviceIP6Address
         * @interface ICMsgNetworkDeviceIP6Address
         * @property {string|null} [ip] CMsgNetworkDeviceIP6Address ip
         */
    
        /**
         * Constructs a new CMsgNetworkDeviceIP6Address.
         * @exports CMsgNetworkDeviceIP6Address
         * @classdesc Represents a CMsgNetworkDeviceIP6Address.
         * @implements ICMsgNetworkDeviceIP6Address
         * @constructor
         * @param {ICMsgNetworkDeviceIP6Address=} [properties] Properties to set
         */
        function CMsgNetworkDeviceIP6Address(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgNetworkDeviceIP6Address ip.
         * @member {string} ip
         * @memberof CMsgNetworkDeviceIP6Address
         * @instance
         */
        CMsgNetworkDeviceIP6Address.prototype.ip = "";
    
        /**
         * Creates a new CMsgNetworkDeviceIP6Address instance using the specified properties.
         * @function create
         * @memberof CMsgNetworkDeviceIP6Address
         * @static
         * @param {ICMsgNetworkDeviceIP6Address=} [properties] Properties to set
         * @returns {CMsgNetworkDeviceIP6Address} CMsgNetworkDeviceIP6Address instance
         */
        CMsgNetworkDeviceIP6Address.create = function create(properties) {
            return new CMsgNetworkDeviceIP6Address(properties);
        };
    
        /**
         * Encodes the specified CMsgNetworkDeviceIP6Address message. Does not implicitly {@link CMsgNetworkDeviceIP6Address.verify|verify} messages.
         * @function encode
         * @memberof CMsgNetworkDeviceIP6Address
         * @static
         * @param {ICMsgNetworkDeviceIP6Address} message CMsgNetworkDeviceIP6Address message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgNetworkDeviceIP6Address.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.ip != null && message.hasOwnProperty("ip"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.ip);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgNetworkDeviceIP6Address message, length delimited. Does not implicitly {@link CMsgNetworkDeviceIP6Address.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgNetworkDeviceIP6Address
         * @static
         * @param {ICMsgNetworkDeviceIP6Address} message CMsgNetworkDeviceIP6Address message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgNetworkDeviceIP6Address.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgNetworkDeviceIP6Address message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgNetworkDeviceIP6Address
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgNetworkDeviceIP6Address} CMsgNetworkDeviceIP6Address
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgNetworkDeviceIP6Address.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgNetworkDeviceIP6Address();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.ip = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgNetworkDeviceIP6Address message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgNetworkDeviceIP6Address
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgNetworkDeviceIP6Address} CMsgNetworkDeviceIP6Address
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgNetworkDeviceIP6Address.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgNetworkDeviceIP6Address message.
         * @function verify
         * @memberof CMsgNetworkDeviceIP6Address
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgNetworkDeviceIP6Address.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.ip != null && message.hasOwnProperty("ip"))
                if (!$util.isString(message.ip))
                    return "ip: string expected";
            return null;
        };
    
        /**
         * Creates a CMsgNetworkDeviceIP6Address message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgNetworkDeviceIP6Address
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgNetworkDeviceIP6Address} CMsgNetworkDeviceIP6Address
         */
        CMsgNetworkDeviceIP6Address.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgNetworkDeviceIP6Address)
                return object;
            var message = new $root.CMsgNetworkDeviceIP6Address();
            if (object.ip != null)
                message.ip = String(object.ip);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgNetworkDeviceIP6Address message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgNetworkDeviceIP6Address
         * @static
         * @param {CMsgNetworkDeviceIP6Address} message CMsgNetworkDeviceIP6Address
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgNetworkDeviceIP6Address.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.ip = "";
            if (message.ip != null && message.hasOwnProperty("ip"))
                object.ip = message.ip;
            return object;
        };
    
        /**
         * Converts this CMsgNetworkDeviceIP6Address to JSON.
         * @function toJSON
         * @memberof CMsgNetworkDeviceIP6Address
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgNetworkDeviceIP6Address.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgNetworkDeviceIP6Address;
    })();
    
    $root.CMsgNetworkDeviceIP6Config = (function() {
    
        /**
         * Properties of a CMsgNetworkDeviceIP6Config.
         * @exports ICMsgNetworkDeviceIP6Config
         * @interface ICMsgNetworkDeviceIP6Config
         * @property {Array.<ICMsgNetworkDeviceIP6Address>|null} [addresses] CMsgNetworkDeviceIP6Config addresses
         * @property {Array.<string>|null} [dns_ip] CMsgNetworkDeviceIP6Config dns_ip
         * @property {string|null} [gateway_ip] CMsgNetworkDeviceIP6Config gateway_ip
         * @property {boolean|null} [is_dhcp_enabled] CMsgNetworkDeviceIP6Config is_dhcp_enabled
         * @property {boolean|null} [is_default_route] CMsgNetworkDeviceIP6Config is_default_route
         * @property {boolean|null} [is_enabled] CMsgNetworkDeviceIP6Config is_enabled
         */
    
        /**
         * Constructs a new CMsgNetworkDeviceIP6Config.
         * @exports CMsgNetworkDeviceIP6Config
         * @classdesc Represents a CMsgNetworkDeviceIP6Config.
         * @implements ICMsgNetworkDeviceIP6Config
         * @constructor
         * @param {ICMsgNetworkDeviceIP6Config=} [properties] Properties to set
         */
        function CMsgNetworkDeviceIP6Config(properties) {
            this.addresses = [];
            this.dns_ip = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgNetworkDeviceIP6Config addresses.
         * @member {Array.<ICMsgNetworkDeviceIP6Address>} addresses
         * @memberof CMsgNetworkDeviceIP6Config
         * @instance
         */
        CMsgNetworkDeviceIP6Config.prototype.addresses = $util.emptyArray;
    
        /**
         * CMsgNetworkDeviceIP6Config dns_ip.
         * @member {Array.<string>} dns_ip
         * @memberof CMsgNetworkDeviceIP6Config
         * @instance
         */
        CMsgNetworkDeviceIP6Config.prototype.dns_ip = $util.emptyArray;
    
        /**
         * CMsgNetworkDeviceIP6Config gateway_ip.
         * @member {string} gateway_ip
         * @memberof CMsgNetworkDeviceIP6Config
         * @instance
         */
        CMsgNetworkDeviceIP6Config.prototype.gateway_ip = "";
    
        /**
         * CMsgNetworkDeviceIP6Config is_dhcp_enabled.
         * @member {boolean} is_dhcp_enabled
         * @memberof CMsgNetworkDeviceIP6Config
         * @instance
         */
        CMsgNetworkDeviceIP6Config.prototype.is_dhcp_enabled = false;
    
        /**
         * CMsgNetworkDeviceIP6Config is_default_route.
         * @member {boolean} is_default_route
         * @memberof CMsgNetworkDeviceIP6Config
         * @instance
         */
        CMsgNetworkDeviceIP6Config.prototype.is_default_route = false;
    
        /**
         * CMsgNetworkDeviceIP6Config is_enabled.
         * @member {boolean} is_enabled
         * @memberof CMsgNetworkDeviceIP6Config
         * @instance
         */
        CMsgNetworkDeviceIP6Config.prototype.is_enabled = false;
    
        /**
         * Creates a new CMsgNetworkDeviceIP6Config instance using the specified properties.
         * @function create
         * @memberof CMsgNetworkDeviceIP6Config
         * @static
         * @param {ICMsgNetworkDeviceIP6Config=} [properties] Properties to set
         * @returns {CMsgNetworkDeviceIP6Config} CMsgNetworkDeviceIP6Config instance
         */
        CMsgNetworkDeviceIP6Config.create = function create(properties) {
            return new CMsgNetworkDeviceIP6Config(properties);
        };
    
        /**
         * Encodes the specified CMsgNetworkDeviceIP6Config message. Does not implicitly {@link CMsgNetworkDeviceIP6Config.verify|verify} messages.
         * @function encode
         * @memberof CMsgNetworkDeviceIP6Config
         * @static
         * @param {ICMsgNetworkDeviceIP6Config} message CMsgNetworkDeviceIP6Config message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgNetworkDeviceIP6Config.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.addresses != null && message.addresses.length)
                for (var i = 0; i < message.addresses.length; ++i)
                    $root.CMsgNetworkDeviceIP6Address.encode(message.addresses[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.dns_ip != null && message.dns_ip.length)
                for (var i = 0; i < message.dns_ip.length; ++i)
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.dns_ip[i]);
            if (message.gateway_ip != null && message.hasOwnProperty("gateway_ip"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.gateway_ip);
            if (message.is_dhcp_enabled != null && message.hasOwnProperty("is_dhcp_enabled"))
                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.is_dhcp_enabled);
            if (message.is_default_route != null && message.hasOwnProperty("is_default_route"))
                writer.uint32(/* id 5, wireType 0 =*/40).bool(message.is_default_route);
            if (message.is_enabled != null && message.hasOwnProperty("is_enabled"))
                writer.uint32(/* id 6, wireType 0 =*/48).bool(message.is_enabled);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgNetworkDeviceIP6Config message, length delimited. Does not implicitly {@link CMsgNetworkDeviceIP6Config.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgNetworkDeviceIP6Config
         * @static
         * @param {ICMsgNetworkDeviceIP6Config} message CMsgNetworkDeviceIP6Config message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgNetworkDeviceIP6Config.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgNetworkDeviceIP6Config message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgNetworkDeviceIP6Config
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgNetworkDeviceIP6Config} CMsgNetworkDeviceIP6Config
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgNetworkDeviceIP6Config.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgNetworkDeviceIP6Config();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.addresses && message.addresses.length))
                        message.addresses = [];
                    message.addresses.push($root.CMsgNetworkDeviceIP6Address.decode(reader, reader.uint32()));
                    break;
                case 2:
                    if (!(message.dns_ip && message.dns_ip.length))
                        message.dns_ip = [];
                    message.dns_ip.push(reader.string());
                    break;
                case 3:
                    message.gateway_ip = reader.string();
                    break;
                case 4:
                    message.is_dhcp_enabled = reader.bool();
                    break;
                case 5:
                    message.is_default_route = reader.bool();
                    break;
                case 6:
                    message.is_enabled = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgNetworkDeviceIP6Config message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgNetworkDeviceIP6Config
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgNetworkDeviceIP6Config} CMsgNetworkDeviceIP6Config
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgNetworkDeviceIP6Config.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgNetworkDeviceIP6Config message.
         * @function verify
         * @memberof CMsgNetworkDeviceIP6Config
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgNetworkDeviceIP6Config.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.addresses != null && message.hasOwnProperty("addresses")) {
                if (!Array.isArray(message.addresses))
                    return "addresses: array expected";
                for (var i = 0; i < message.addresses.length; ++i) {
                    var error = $root.CMsgNetworkDeviceIP6Address.verify(message.addresses[i]);
                    if (error)
                        return "addresses." + error;
                }
            }
            if (message.dns_ip != null && message.hasOwnProperty("dns_ip")) {
                if (!Array.isArray(message.dns_ip))
                    return "dns_ip: array expected";
                for (var i = 0; i < message.dns_ip.length; ++i)
                    if (!$util.isString(message.dns_ip[i]))
                        return "dns_ip: string[] expected";
            }
            if (message.gateway_ip != null && message.hasOwnProperty("gateway_ip"))
                if (!$util.isString(message.gateway_ip))
                    return "gateway_ip: string expected";
            if (message.is_dhcp_enabled != null && message.hasOwnProperty("is_dhcp_enabled"))
                if (typeof message.is_dhcp_enabled !== "boolean")
                    return "is_dhcp_enabled: boolean expected";
            if (message.is_default_route != null && message.hasOwnProperty("is_default_route"))
                if (typeof message.is_default_route !== "boolean")
                    return "is_default_route: boolean expected";
            if (message.is_enabled != null && message.hasOwnProperty("is_enabled"))
                if (typeof message.is_enabled !== "boolean")
                    return "is_enabled: boolean expected";
            return null;
        };
    
        /**
         * Creates a CMsgNetworkDeviceIP6Config message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgNetworkDeviceIP6Config
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgNetworkDeviceIP6Config} CMsgNetworkDeviceIP6Config
         */
        CMsgNetworkDeviceIP6Config.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgNetworkDeviceIP6Config)
                return object;
            var message = new $root.CMsgNetworkDeviceIP6Config();
            if (object.addresses) {
                if (!Array.isArray(object.addresses))
                    throw TypeError(".CMsgNetworkDeviceIP6Config.addresses: array expected");
                message.addresses = [];
                for (var i = 0; i < object.addresses.length; ++i) {
                    if (typeof object.addresses[i] !== "object")
                        throw TypeError(".CMsgNetworkDeviceIP6Config.addresses: object expected");
                    message.addresses[i] = $root.CMsgNetworkDeviceIP6Address.fromObject(object.addresses[i]);
                }
            }
            if (object.dns_ip) {
                if (!Array.isArray(object.dns_ip))
                    throw TypeError(".CMsgNetworkDeviceIP6Config.dns_ip: array expected");
                message.dns_ip = [];
                for (var i = 0; i < object.dns_ip.length; ++i)
                    message.dns_ip[i] = String(object.dns_ip[i]);
            }
            if (object.gateway_ip != null)
                message.gateway_ip = String(object.gateway_ip);
            if (object.is_dhcp_enabled != null)
                message.is_dhcp_enabled = Boolean(object.is_dhcp_enabled);
            if (object.is_default_route != null)
                message.is_default_route = Boolean(object.is_default_route);
            if (object.is_enabled != null)
                message.is_enabled = Boolean(object.is_enabled);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgNetworkDeviceIP6Config message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgNetworkDeviceIP6Config
         * @static
         * @param {CMsgNetworkDeviceIP6Config} message CMsgNetworkDeviceIP6Config
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgNetworkDeviceIP6Config.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.addresses = [];
                object.dns_ip = [];
            }
            if (options.defaults) {
                object.gateway_ip = "";
                object.is_dhcp_enabled = false;
                object.is_default_route = false;
                object.is_enabled = false;
            }
            if (message.addresses && message.addresses.length) {
                object.addresses = [];
                for (var j = 0; j < message.addresses.length; ++j)
                    object.addresses[j] = $root.CMsgNetworkDeviceIP6Address.toObject(message.addresses[j], options);
            }
            if (message.dns_ip && message.dns_ip.length) {
                object.dns_ip = [];
                for (var j = 0; j < message.dns_ip.length; ++j)
                    object.dns_ip[j] = message.dns_ip[j];
            }
            if (message.gateway_ip != null && message.hasOwnProperty("gateway_ip"))
                object.gateway_ip = message.gateway_ip;
            if (message.is_dhcp_enabled != null && message.hasOwnProperty("is_dhcp_enabled"))
                object.is_dhcp_enabled = message.is_dhcp_enabled;
            if (message.is_default_route != null && message.hasOwnProperty("is_default_route"))
                object.is_default_route = message.is_default_route;
            if (message.is_enabled != null && message.hasOwnProperty("is_enabled"))
                object.is_enabled = message.is_enabled;
            return object;
        };
    
        /**
         * Converts this CMsgNetworkDeviceIP6Config to JSON.
         * @function toJSON
         * @memberof CMsgNetworkDeviceIP6Config
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgNetworkDeviceIP6Config.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgNetworkDeviceIP6Config;
    })();
    
    $root.CMsgNetworkDevicesData = (function() {
    
        /**
         * Properties of a CMsgNetworkDevicesData.
         * @exports ICMsgNetworkDevicesData
         * @interface ICMsgNetworkDevicesData
         * @property {Array.<CMsgNetworkDevicesData.IDevice>|null} [devices] CMsgNetworkDevicesData devices
         * @property {boolean|null} [is_wifi_enabled] CMsgNetworkDevicesData is_wifi_enabled
         * @property {boolean|null} [is_wifi_scanning_enabled] CMsgNetworkDevicesData is_wifi_scanning_enabled
         */
    
        /**
         * Constructs a new CMsgNetworkDevicesData.
         * @exports CMsgNetworkDevicesData
         * @classdesc Represents a CMsgNetworkDevicesData.
         * @implements ICMsgNetworkDevicesData
         * @constructor
         * @param {ICMsgNetworkDevicesData=} [properties] Properties to set
         */
        function CMsgNetworkDevicesData(properties) {
            this.devices = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgNetworkDevicesData devices.
         * @member {Array.<CMsgNetworkDevicesData.IDevice>} devices
         * @memberof CMsgNetworkDevicesData
         * @instance
         */
        CMsgNetworkDevicesData.prototype.devices = $util.emptyArray;
    
        /**
         * CMsgNetworkDevicesData is_wifi_enabled.
         * @member {boolean} is_wifi_enabled
         * @memberof CMsgNetworkDevicesData
         * @instance
         */
        CMsgNetworkDevicesData.prototype.is_wifi_enabled = false;
    
        /**
         * CMsgNetworkDevicesData is_wifi_scanning_enabled.
         * @member {boolean} is_wifi_scanning_enabled
         * @memberof CMsgNetworkDevicesData
         * @instance
         */
        CMsgNetworkDevicesData.prototype.is_wifi_scanning_enabled = false;
    
        /**
         * Creates a new CMsgNetworkDevicesData instance using the specified properties.
         * @function create
         * @memberof CMsgNetworkDevicesData
         * @static
         * @param {ICMsgNetworkDevicesData=} [properties] Properties to set
         * @returns {CMsgNetworkDevicesData} CMsgNetworkDevicesData instance
         */
        CMsgNetworkDevicesData.create = function create(properties) {
            return new CMsgNetworkDevicesData(properties);
        };
    
        /**
         * Encodes the specified CMsgNetworkDevicesData message. Does not implicitly {@link CMsgNetworkDevicesData.verify|verify} messages.
         * @function encode
         * @memberof CMsgNetworkDevicesData
         * @static
         * @param {ICMsgNetworkDevicesData} message CMsgNetworkDevicesData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgNetworkDevicesData.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.devices != null && message.devices.length)
                for (var i = 0; i < message.devices.length; ++i)
                    $root.CMsgNetworkDevicesData.Device.encode(message.devices[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.is_wifi_enabled != null && message.hasOwnProperty("is_wifi_enabled"))
                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.is_wifi_enabled);
            if (message.is_wifi_scanning_enabled != null && message.hasOwnProperty("is_wifi_scanning_enabled"))
                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.is_wifi_scanning_enabled);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgNetworkDevicesData message, length delimited. Does not implicitly {@link CMsgNetworkDevicesData.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgNetworkDevicesData
         * @static
         * @param {ICMsgNetworkDevicesData} message CMsgNetworkDevicesData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgNetworkDevicesData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgNetworkDevicesData message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgNetworkDevicesData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgNetworkDevicesData} CMsgNetworkDevicesData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgNetworkDevicesData.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgNetworkDevicesData();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.devices && message.devices.length))
                        message.devices = [];
                    message.devices.push($root.CMsgNetworkDevicesData.Device.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.is_wifi_enabled = reader.bool();
                    break;
                case 3:
                    message.is_wifi_scanning_enabled = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgNetworkDevicesData message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgNetworkDevicesData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgNetworkDevicesData} CMsgNetworkDevicesData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgNetworkDevicesData.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgNetworkDevicesData message.
         * @function verify
         * @memberof CMsgNetworkDevicesData
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgNetworkDevicesData.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.devices != null && message.hasOwnProperty("devices")) {
                if (!Array.isArray(message.devices))
                    return "devices: array expected";
                for (var i = 0; i < message.devices.length; ++i) {
                    var error = $root.CMsgNetworkDevicesData.Device.verify(message.devices[i]);
                    if (error)
                        return "devices." + error;
                }
            }
            if (message.is_wifi_enabled != null && message.hasOwnProperty("is_wifi_enabled"))
                if (typeof message.is_wifi_enabled !== "boolean")
                    return "is_wifi_enabled: boolean expected";
            if (message.is_wifi_scanning_enabled != null && message.hasOwnProperty("is_wifi_scanning_enabled"))
                if (typeof message.is_wifi_scanning_enabled !== "boolean")
                    return "is_wifi_scanning_enabled: boolean expected";
            return null;
        };
    
        /**
         * Creates a CMsgNetworkDevicesData message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgNetworkDevicesData
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgNetworkDevicesData} CMsgNetworkDevicesData
         */
        CMsgNetworkDevicesData.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgNetworkDevicesData)
                return object;
            var message = new $root.CMsgNetworkDevicesData();
            if (object.devices) {
                if (!Array.isArray(object.devices))
                    throw TypeError(".CMsgNetworkDevicesData.devices: array expected");
                message.devices = [];
                for (var i = 0; i < object.devices.length; ++i) {
                    if (typeof object.devices[i] !== "object")
                        throw TypeError(".CMsgNetworkDevicesData.devices: object expected");
                    message.devices[i] = $root.CMsgNetworkDevicesData.Device.fromObject(object.devices[i]);
                }
            }
            if (object.is_wifi_enabled != null)
                message.is_wifi_enabled = Boolean(object.is_wifi_enabled);
            if (object.is_wifi_scanning_enabled != null)
                message.is_wifi_scanning_enabled = Boolean(object.is_wifi_scanning_enabled);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgNetworkDevicesData message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgNetworkDevicesData
         * @static
         * @param {CMsgNetworkDevicesData} message CMsgNetworkDevicesData
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgNetworkDevicesData.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.devices = [];
            if (options.defaults) {
                object.is_wifi_enabled = false;
                object.is_wifi_scanning_enabled = false;
            }
            if (message.devices && message.devices.length) {
                object.devices = [];
                for (var j = 0; j < message.devices.length; ++j)
                    object.devices[j] = $root.CMsgNetworkDevicesData.Device.toObject(message.devices[j], options);
            }
            if (message.is_wifi_enabled != null && message.hasOwnProperty("is_wifi_enabled"))
                object.is_wifi_enabled = message.is_wifi_enabled;
            if (message.is_wifi_scanning_enabled != null && message.hasOwnProperty("is_wifi_scanning_enabled"))
                object.is_wifi_scanning_enabled = message.is_wifi_scanning_enabled;
            return object;
        };
    
        /**
         * Converts this CMsgNetworkDevicesData to JSON.
         * @function toJSON
         * @memberof CMsgNetworkDevicesData
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgNetworkDevicesData.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        CMsgNetworkDevicesData.Device = (function() {
    
            /**
             * Properties of a Device.
             * @memberof CMsgNetworkDevicesData
             * @interface IDevice
             * @property {number|null} [id] Device id
             * @property {number|null} [etype] Device etype
             * @property {number|null} [estate] Device estate
             * @property {string|null} [mac] Device mac
             * @property {string|null} [vendor] Device vendor
             * @property {string|null} [product] Device product
             * @property {ICMsgNetworkDeviceIP4Config|null} [ip4] Device ip4
             * @property {ICMsgNetworkDeviceIP6Config|null} [ip6] Device ip6
             * @property {CMsgNetworkDevicesData.Device.IWired|null} [wired] Device wired
             * @property {CMsgNetworkDevicesData.Device.IWireless|null} [wireless] Device wireless
             */
    
            /**
             * Constructs a new Device.
             * @memberof CMsgNetworkDevicesData
             * @classdesc Represents a Device.
             * @implements IDevice
             * @constructor
             * @param {CMsgNetworkDevicesData.IDevice=} [properties] Properties to set
             */
            function Device(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * Device id.
             * @member {number} id
             * @memberof CMsgNetworkDevicesData.Device
             * @instance
             */
            Device.prototype.id = 0;
    
            /**
             * Device etype.
             * @member {number} etype
             * @memberof CMsgNetworkDevicesData.Device
             * @instance
             */
            Device.prototype.etype = 0;
    
            /**
             * Device estate.
             * @member {number} estate
             * @memberof CMsgNetworkDevicesData.Device
             * @instance
             */
            Device.prototype.estate = 0;
    
            /**
             * Device mac.
             * @member {string} mac
             * @memberof CMsgNetworkDevicesData.Device
             * @instance
             */
            Device.prototype.mac = "";
    
            /**
             * Device vendor.
             * @member {string} vendor
             * @memberof CMsgNetworkDevicesData.Device
             * @instance
             */
            Device.prototype.vendor = "";
    
            /**
             * Device product.
             * @member {string} product
             * @memberof CMsgNetworkDevicesData.Device
             * @instance
             */
            Device.prototype.product = "";
    
            /**
             * Device ip4.
             * @member {ICMsgNetworkDeviceIP4Config|null|undefined} ip4
             * @memberof CMsgNetworkDevicesData.Device
             * @instance
             */
            Device.prototype.ip4 = null;
    
            /**
             * Device ip6.
             * @member {ICMsgNetworkDeviceIP6Config|null|undefined} ip6
             * @memberof CMsgNetworkDevicesData.Device
             * @instance
             */
            Device.prototype.ip6 = null;
    
            /**
             * Device wired.
             * @member {CMsgNetworkDevicesData.Device.IWired|null|undefined} wired
             * @memberof CMsgNetworkDevicesData.Device
             * @instance
             */
            Device.prototype.wired = null;
    
            /**
             * Device wireless.
             * @member {CMsgNetworkDevicesData.Device.IWireless|null|undefined} wireless
             * @memberof CMsgNetworkDevicesData.Device
             * @instance
             */
            Device.prototype.wireless = null;
    
            /**
             * Creates a new Device instance using the specified properties.
             * @function create
             * @memberof CMsgNetworkDevicesData.Device
             * @static
             * @param {CMsgNetworkDevicesData.IDevice=} [properties] Properties to set
             * @returns {CMsgNetworkDevicesData.Device} Device instance
             */
            Device.create = function create(properties) {
                return new Device(properties);
            };
    
            /**
             * Encodes the specified Device message. Does not implicitly {@link CMsgNetworkDevicesData.Device.verify|verify} messages.
             * @function encode
             * @memberof CMsgNetworkDevicesData.Device
             * @static
             * @param {CMsgNetworkDevicesData.IDevice} message Device message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Device.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.id != null && message.hasOwnProperty("id"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.id);
                if (message.etype != null && message.hasOwnProperty("etype"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.etype);
                if (message.estate != null && message.hasOwnProperty("estate"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.estate);
                if (message.mac != null && message.hasOwnProperty("mac"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.mac);
                if (message.vendor != null && message.hasOwnProperty("vendor"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.vendor);
                if (message.product != null && message.hasOwnProperty("product"))
                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.product);
                if (message.ip4 != null && message.hasOwnProperty("ip4"))
                    $root.CMsgNetworkDeviceIP4Config.encode(message.ip4, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                if (message.ip6 != null && message.hasOwnProperty("ip6"))
                    $root.CMsgNetworkDeviceIP6Config.encode(message.ip6, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                if (message.wired != null && message.hasOwnProperty("wired"))
                    $root.CMsgNetworkDevicesData.Device.Wired.encode(message.wired, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                if (message.wireless != null && message.hasOwnProperty("wireless"))
                    $root.CMsgNetworkDevicesData.Device.Wireless.encode(message.wireless, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified Device message, length delimited. Does not implicitly {@link CMsgNetworkDevicesData.Device.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgNetworkDevicesData.Device
             * @static
             * @param {CMsgNetworkDevicesData.IDevice} message Device message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Device.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a Device message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgNetworkDevicesData.Device
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgNetworkDevicesData.Device} Device
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Device.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgNetworkDevicesData.Device();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.id = reader.uint32();
                        break;
                    case 2:
                        message.etype = reader.int32();
                        break;
                    case 3:
                        message.estate = reader.int32();
                        break;
                    case 4:
                        message.mac = reader.string();
                        break;
                    case 5:
                        message.vendor = reader.string();
                        break;
                    case 6:
                        message.product = reader.string();
                        break;
                    case 7:
                        message.ip4 = $root.CMsgNetworkDeviceIP4Config.decode(reader, reader.uint32());
                        break;
                    case 8:
                        message.ip6 = $root.CMsgNetworkDeviceIP6Config.decode(reader, reader.uint32());
                        break;
                    case 9:
                        message.wired = $root.CMsgNetworkDevicesData.Device.Wired.decode(reader, reader.uint32());
                        break;
                    case 10:
                        message.wireless = $root.CMsgNetworkDevicesData.Device.Wireless.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a Device message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgNetworkDevicesData.Device
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgNetworkDevicesData.Device} Device
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Device.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a Device message.
             * @function verify
             * @memberof CMsgNetworkDevicesData.Device
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Device.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.id != null && message.hasOwnProperty("id"))
                    if (!$util.isInteger(message.id))
                        return "id: integer expected";
                if (message.etype != null && message.hasOwnProperty("etype"))
                    if (!$util.isInteger(message.etype))
                        return "etype: integer expected";
                if (message.estate != null && message.hasOwnProperty("estate"))
                    if (!$util.isInteger(message.estate))
                        return "estate: integer expected";
                if (message.mac != null && message.hasOwnProperty("mac"))
                    if (!$util.isString(message.mac))
                        return "mac: string expected";
                if (message.vendor != null && message.hasOwnProperty("vendor"))
                    if (!$util.isString(message.vendor))
                        return "vendor: string expected";
                if (message.product != null && message.hasOwnProperty("product"))
                    if (!$util.isString(message.product))
                        return "product: string expected";
                if (message.ip4 != null && message.hasOwnProperty("ip4")) {
                    var error = $root.CMsgNetworkDeviceIP4Config.verify(message.ip4);
                    if (error)
                        return "ip4." + error;
                }
                if (message.ip6 != null && message.hasOwnProperty("ip6")) {
                    var error = $root.CMsgNetworkDeviceIP6Config.verify(message.ip6);
                    if (error)
                        return "ip6." + error;
                }
                if (message.wired != null && message.hasOwnProperty("wired")) {
                    var error = $root.CMsgNetworkDevicesData.Device.Wired.verify(message.wired);
                    if (error)
                        return "wired." + error;
                }
                if (message.wireless != null && message.hasOwnProperty("wireless")) {
                    var error = $root.CMsgNetworkDevicesData.Device.Wireless.verify(message.wireless);
                    if (error)
                        return "wireless." + error;
                }
                return null;
            };
    
            /**
             * Creates a Device message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgNetworkDevicesData.Device
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgNetworkDevicesData.Device} Device
             */
            Device.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgNetworkDevicesData.Device)
                    return object;
                var message = new $root.CMsgNetworkDevicesData.Device();
                if (object.id != null)
                    message.id = object.id >>> 0;
                if (object.etype != null)
                    message.etype = object.etype | 0;
                if (object.estate != null)
                    message.estate = object.estate | 0;
                if (object.mac != null)
                    message.mac = String(object.mac);
                if (object.vendor != null)
                    message.vendor = String(object.vendor);
                if (object.product != null)
                    message.product = String(object.product);
                if (object.ip4 != null) {
                    if (typeof object.ip4 !== "object")
                        throw TypeError(".CMsgNetworkDevicesData.Device.ip4: object expected");
                    message.ip4 = $root.CMsgNetworkDeviceIP4Config.fromObject(object.ip4);
                }
                if (object.ip6 != null) {
                    if (typeof object.ip6 !== "object")
                        throw TypeError(".CMsgNetworkDevicesData.Device.ip6: object expected");
                    message.ip6 = $root.CMsgNetworkDeviceIP6Config.fromObject(object.ip6);
                }
                if (object.wired != null) {
                    if (typeof object.wired !== "object")
                        throw TypeError(".CMsgNetworkDevicesData.Device.wired: object expected");
                    message.wired = $root.CMsgNetworkDevicesData.Device.Wired.fromObject(object.wired);
                }
                if (object.wireless != null) {
                    if (typeof object.wireless !== "object")
                        throw TypeError(".CMsgNetworkDevicesData.Device.wireless: object expected");
                    message.wireless = $root.CMsgNetworkDevicesData.Device.Wireless.fromObject(object.wireless);
                }
                return message;
            };
    
            /**
             * Creates a plain object from a Device message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgNetworkDevicesData.Device
             * @static
             * @param {CMsgNetworkDevicesData.Device} message Device
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Device.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.id = 0;
                    object.etype = 0;
                    object.estate = 0;
                    object.mac = "";
                    object.vendor = "";
                    object.product = "";
                    object.ip4 = null;
                    object.ip6 = null;
                    object.wired = null;
                    object.wireless = null;
                }
                if (message.id != null && message.hasOwnProperty("id"))
                    object.id = message.id;
                if (message.etype != null && message.hasOwnProperty("etype"))
                    object.etype = message.etype;
                if (message.estate != null && message.hasOwnProperty("estate"))
                    object.estate = message.estate;
                if (message.mac != null && message.hasOwnProperty("mac"))
                    object.mac = message.mac;
                if (message.vendor != null && message.hasOwnProperty("vendor"))
                    object.vendor = message.vendor;
                if (message.product != null && message.hasOwnProperty("product"))
                    object.product = message.product;
                if (message.ip4 != null && message.hasOwnProperty("ip4"))
                    object.ip4 = $root.CMsgNetworkDeviceIP4Config.toObject(message.ip4, options);
                if (message.ip6 != null && message.hasOwnProperty("ip6"))
                    object.ip6 = $root.CMsgNetworkDeviceIP6Config.toObject(message.ip6, options);
                if (message.wired != null && message.hasOwnProperty("wired"))
                    object.wired = $root.CMsgNetworkDevicesData.Device.Wired.toObject(message.wired, options);
                if (message.wireless != null && message.hasOwnProperty("wireless"))
                    object.wireless = $root.CMsgNetworkDevicesData.Device.Wireless.toObject(message.wireless, options);
                return object;
            };
    
            /**
             * Converts this Device to JSON.
             * @function toJSON
             * @memberof CMsgNetworkDevicesData.Device
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Device.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            Device.Wired = (function() {
    
                /**
                 * Properties of a Wired.
                 * @memberof CMsgNetworkDevicesData.Device
                 * @interface IWired
                 * @property {boolean|null} [is_cable_present] Wired is_cable_present
                 * @property {number|null} [speed_mbit] Wired speed_mbit
                 * @property {string|null} [friendly_name] Wired friendly_name
                 */
    
                /**
                 * Constructs a new Wired.
                 * @memberof CMsgNetworkDevicesData.Device
                 * @classdesc Represents a Wired.
                 * @implements IWired
                 * @constructor
                 * @param {CMsgNetworkDevicesData.Device.IWired=} [properties] Properties to set
                 */
                function Wired(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Wired is_cable_present.
                 * @member {boolean} is_cable_present
                 * @memberof CMsgNetworkDevicesData.Device.Wired
                 * @instance
                 */
                Wired.prototype.is_cable_present = false;
    
                /**
                 * Wired speed_mbit.
                 * @member {number} speed_mbit
                 * @memberof CMsgNetworkDevicesData.Device.Wired
                 * @instance
                 */
                Wired.prototype.speed_mbit = 0;
    
                /**
                 * Wired friendly_name.
                 * @member {string} friendly_name
                 * @memberof CMsgNetworkDevicesData.Device.Wired
                 * @instance
                 */
                Wired.prototype.friendly_name = "";
    
                /**
                 * Creates a new Wired instance using the specified properties.
                 * @function create
                 * @memberof CMsgNetworkDevicesData.Device.Wired
                 * @static
                 * @param {CMsgNetworkDevicesData.Device.IWired=} [properties] Properties to set
                 * @returns {CMsgNetworkDevicesData.Device.Wired} Wired instance
                 */
                Wired.create = function create(properties) {
                    return new Wired(properties);
                };
    
                /**
                 * Encodes the specified Wired message. Does not implicitly {@link CMsgNetworkDevicesData.Device.Wired.verify|verify} messages.
                 * @function encode
                 * @memberof CMsgNetworkDevicesData.Device.Wired
                 * @static
                 * @param {CMsgNetworkDevicesData.Device.IWired} message Wired message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Wired.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.is_cable_present != null && message.hasOwnProperty("is_cable_present"))
                        writer.uint32(/* id 1, wireType 0 =*/8).bool(message.is_cable_present);
                    if (message.speed_mbit != null && message.hasOwnProperty("speed_mbit"))
                        writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.speed_mbit);
                    if (message.friendly_name != null && message.hasOwnProperty("friendly_name"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.friendly_name);
                    return writer;
                };
    
                /**
                 * Encodes the specified Wired message, length delimited. Does not implicitly {@link CMsgNetworkDevicesData.Device.Wired.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof CMsgNetworkDevicesData.Device.Wired
                 * @static
                 * @param {CMsgNetworkDevicesData.Device.IWired} message Wired message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Wired.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Wired message from the specified reader or buffer.
                 * @function decode
                 * @memberof CMsgNetworkDevicesData.Device.Wired
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {CMsgNetworkDevicesData.Device.Wired} Wired
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Wired.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgNetworkDevicesData.Device.Wired();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.is_cable_present = reader.bool();
                            break;
                        case 2:
                            message.speed_mbit = reader.uint32();
                            break;
                        case 3:
                            message.friendly_name = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Wired message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof CMsgNetworkDevicesData.Device.Wired
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {CMsgNetworkDevicesData.Device.Wired} Wired
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Wired.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Wired message.
                 * @function verify
                 * @memberof CMsgNetworkDevicesData.Device.Wired
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Wired.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.is_cable_present != null && message.hasOwnProperty("is_cable_present"))
                        if (typeof message.is_cable_present !== "boolean")
                            return "is_cable_present: boolean expected";
                    if (message.speed_mbit != null && message.hasOwnProperty("speed_mbit"))
                        if (!$util.isInteger(message.speed_mbit))
                            return "speed_mbit: integer expected";
                    if (message.friendly_name != null && message.hasOwnProperty("friendly_name"))
                        if (!$util.isString(message.friendly_name))
                            return "friendly_name: string expected";
                    return null;
                };
    
                /**
                 * Creates a Wired message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof CMsgNetworkDevicesData.Device.Wired
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {CMsgNetworkDevicesData.Device.Wired} Wired
                 */
                Wired.fromObject = function fromObject(object) {
                    if (object instanceof $root.CMsgNetworkDevicesData.Device.Wired)
                        return object;
                    var message = new $root.CMsgNetworkDevicesData.Device.Wired();
                    if (object.is_cable_present != null)
                        message.is_cable_present = Boolean(object.is_cable_present);
                    if (object.speed_mbit != null)
                        message.speed_mbit = object.speed_mbit >>> 0;
                    if (object.friendly_name != null)
                        message.friendly_name = String(object.friendly_name);
                    return message;
                };
    
                /**
                 * Creates a plain object from a Wired message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof CMsgNetworkDevicesData.Device.Wired
                 * @static
                 * @param {CMsgNetworkDevicesData.Device.Wired} message Wired
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Wired.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.is_cable_present = false;
                        object.speed_mbit = 0;
                        object.friendly_name = "";
                    }
                    if (message.is_cable_present != null && message.hasOwnProperty("is_cable_present"))
                        object.is_cable_present = message.is_cable_present;
                    if (message.speed_mbit != null && message.hasOwnProperty("speed_mbit"))
                        object.speed_mbit = message.speed_mbit;
                    if (message.friendly_name != null && message.hasOwnProperty("friendly_name"))
                        object.friendly_name = message.friendly_name;
                    return object;
                };
    
                /**
                 * Converts this Wired to JSON.
                 * @function toJSON
                 * @memberof CMsgNetworkDevicesData.Device.Wired
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Wired.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Wired;
            })();
    
            Device.Wireless = (function() {
    
                /**
                 * Properties of a Wireless.
                 * @memberof CMsgNetworkDevicesData.Device
                 * @interface IWireless
                 * @property {Array.<CMsgNetworkDevicesData.Device.Wireless.IAP>|null} [aps] Wireless aps
                 * @property {number|null} [esecurity_supported] Wireless esecurity_supported
                 */
    
                /**
                 * Constructs a new Wireless.
                 * @memberof CMsgNetworkDevicesData.Device
                 * @classdesc Represents a Wireless.
                 * @implements IWireless
                 * @constructor
                 * @param {CMsgNetworkDevicesData.Device.IWireless=} [properties] Properties to set
                 */
                function Wireless(properties) {
                    this.aps = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Wireless aps.
                 * @member {Array.<CMsgNetworkDevicesData.Device.Wireless.IAP>} aps
                 * @memberof CMsgNetworkDevicesData.Device.Wireless
                 * @instance
                 */
                Wireless.prototype.aps = $util.emptyArray;
    
                /**
                 * Wireless esecurity_supported.
                 * @member {number} esecurity_supported
                 * @memberof CMsgNetworkDevicesData.Device.Wireless
                 * @instance
                 */
                Wireless.prototype.esecurity_supported = 0;
    
                /**
                 * Creates a new Wireless instance using the specified properties.
                 * @function create
                 * @memberof CMsgNetworkDevicesData.Device.Wireless
                 * @static
                 * @param {CMsgNetworkDevicesData.Device.IWireless=} [properties] Properties to set
                 * @returns {CMsgNetworkDevicesData.Device.Wireless} Wireless instance
                 */
                Wireless.create = function create(properties) {
                    return new Wireless(properties);
                };
    
                /**
                 * Encodes the specified Wireless message. Does not implicitly {@link CMsgNetworkDevicesData.Device.Wireless.verify|verify} messages.
                 * @function encode
                 * @memberof CMsgNetworkDevicesData.Device.Wireless
                 * @static
                 * @param {CMsgNetworkDevicesData.Device.IWireless} message Wireless message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Wireless.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.aps != null && message.aps.length)
                        for (var i = 0; i < message.aps.length; ++i)
                            $root.CMsgNetworkDevicesData.Device.Wireless.AP.encode(message.aps[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.esecurity_supported != null && message.hasOwnProperty("esecurity_supported"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.esecurity_supported);
                    return writer;
                };
    
                /**
                 * Encodes the specified Wireless message, length delimited. Does not implicitly {@link CMsgNetworkDevicesData.Device.Wireless.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof CMsgNetworkDevicesData.Device.Wireless
                 * @static
                 * @param {CMsgNetworkDevicesData.Device.IWireless} message Wireless message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Wireless.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Wireless message from the specified reader or buffer.
                 * @function decode
                 * @memberof CMsgNetworkDevicesData.Device.Wireless
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {CMsgNetworkDevicesData.Device.Wireless} Wireless
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Wireless.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgNetworkDevicesData.Device.Wireless();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.aps && message.aps.length))
                                message.aps = [];
                            message.aps.push($root.CMsgNetworkDevicesData.Device.Wireless.AP.decode(reader, reader.uint32()));
                            break;
                        case 2:
                            message.esecurity_supported = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Wireless message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof CMsgNetworkDevicesData.Device.Wireless
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {CMsgNetworkDevicesData.Device.Wireless} Wireless
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Wireless.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Wireless message.
                 * @function verify
                 * @memberof CMsgNetworkDevicesData.Device.Wireless
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Wireless.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.aps != null && message.hasOwnProperty("aps")) {
                        if (!Array.isArray(message.aps))
                            return "aps: array expected";
                        for (var i = 0; i < message.aps.length; ++i) {
                            var error = $root.CMsgNetworkDevicesData.Device.Wireless.AP.verify(message.aps[i]);
                            if (error)
                                return "aps." + error;
                        }
                    }
                    if (message.esecurity_supported != null && message.hasOwnProperty("esecurity_supported"))
                        if (!$util.isInteger(message.esecurity_supported))
                            return "esecurity_supported: integer expected";
                    return null;
                };
    
                /**
                 * Creates a Wireless message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof CMsgNetworkDevicesData.Device.Wireless
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {CMsgNetworkDevicesData.Device.Wireless} Wireless
                 */
                Wireless.fromObject = function fromObject(object) {
                    if (object instanceof $root.CMsgNetworkDevicesData.Device.Wireless)
                        return object;
                    var message = new $root.CMsgNetworkDevicesData.Device.Wireless();
                    if (object.aps) {
                        if (!Array.isArray(object.aps))
                            throw TypeError(".CMsgNetworkDevicesData.Device.Wireless.aps: array expected");
                        message.aps = [];
                        for (var i = 0; i < object.aps.length; ++i) {
                            if (typeof object.aps[i] !== "object")
                                throw TypeError(".CMsgNetworkDevicesData.Device.Wireless.aps: object expected");
                            message.aps[i] = $root.CMsgNetworkDevicesData.Device.Wireless.AP.fromObject(object.aps[i]);
                        }
                    }
                    if (object.esecurity_supported != null)
                        message.esecurity_supported = object.esecurity_supported | 0;
                    return message;
                };
    
                /**
                 * Creates a plain object from a Wireless message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof CMsgNetworkDevicesData.Device.Wireless
                 * @static
                 * @param {CMsgNetworkDevicesData.Device.Wireless} message Wireless
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Wireless.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.aps = [];
                    if (options.defaults)
                        object.esecurity_supported = 0;
                    if (message.aps && message.aps.length) {
                        object.aps = [];
                        for (var j = 0; j < message.aps.length; ++j)
                            object.aps[j] = $root.CMsgNetworkDevicesData.Device.Wireless.AP.toObject(message.aps[j], options);
                    }
                    if (message.esecurity_supported != null && message.hasOwnProperty("esecurity_supported"))
                        object.esecurity_supported = message.esecurity_supported;
                    return object;
                };
    
                /**
                 * Converts this Wireless to JSON.
                 * @function toJSON
                 * @memberof CMsgNetworkDevicesData.Device.Wireless
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Wireless.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                Wireless.AP = (function() {
    
                    /**
                     * Properties of a AP.
                     * @memberof CMsgNetworkDevicesData.Device.Wireless
                     * @interface IAP
                     * @property {number|null} [id] AP id
                     * @property {number|null} [estrength] AP estrength
                     * @property {string|null} [ssid] AP ssid
                     * @property {boolean|null} [is_active] AP is_active
                     * @property {boolean|null} [is_autoconnect] AP is_autoconnect
                     * @property {number|null} [esecurity] AP esecurity
                     * @property {string|null} [user_name] AP user_name
                     * @property {string|null} [password] AP password
                     * @property {number|null} [strength_raw] AP strength_raw
                     */
    
                    /**
                     * Constructs a new AP.
                     * @memberof CMsgNetworkDevicesData.Device.Wireless
                     * @classdesc Represents a AP.
                     * @implements IAP
                     * @constructor
                     * @param {CMsgNetworkDevicesData.Device.Wireless.IAP=} [properties] Properties to set
                     */
                    function AP(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * AP id.
                     * @member {number} id
                     * @memberof CMsgNetworkDevicesData.Device.Wireless.AP
                     * @instance
                     */
                    AP.prototype.id = 0;
    
                    /**
                     * AP estrength.
                     * @member {number} estrength
                     * @memberof CMsgNetworkDevicesData.Device.Wireless.AP
                     * @instance
                     */
                    AP.prototype.estrength = 0;
    
                    /**
                     * AP ssid.
                     * @member {string} ssid
                     * @memberof CMsgNetworkDevicesData.Device.Wireless.AP
                     * @instance
                     */
                    AP.prototype.ssid = "";
    
                    /**
                     * AP is_active.
                     * @member {boolean} is_active
                     * @memberof CMsgNetworkDevicesData.Device.Wireless.AP
                     * @instance
                     */
                    AP.prototype.is_active = false;
    
                    /**
                     * AP is_autoconnect.
                     * @member {boolean} is_autoconnect
                     * @memberof CMsgNetworkDevicesData.Device.Wireless.AP
                     * @instance
                     */
                    AP.prototype.is_autoconnect = false;
    
                    /**
                     * AP esecurity.
                     * @member {number} esecurity
                     * @memberof CMsgNetworkDevicesData.Device.Wireless.AP
                     * @instance
                     */
                    AP.prototype.esecurity = 0;
    
                    /**
                     * AP user_name.
                     * @member {string} user_name
                     * @memberof CMsgNetworkDevicesData.Device.Wireless.AP
                     * @instance
                     */
                    AP.prototype.user_name = "";
    
                    /**
                     * AP password.
                     * @member {string} password
                     * @memberof CMsgNetworkDevicesData.Device.Wireless.AP
                     * @instance
                     */
                    AP.prototype.password = "";
    
                    /**
                     * AP strength_raw.
                     * @member {number} strength_raw
                     * @memberof CMsgNetworkDevicesData.Device.Wireless.AP
                     * @instance
                     */
                    AP.prototype.strength_raw = 0;
    
                    /**
                     * Creates a new AP instance using the specified properties.
                     * @function create
                     * @memberof CMsgNetworkDevicesData.Device.Wireless.AP
                     * @static
                     * @param {CMsgNetworkDevicesData.Device.Wireless.IAP=} [properties] Properties to set
                     * @returns {CMsgNetworkDevicesData.Device.Wireless.AP} AP instance
                     */
                    AP.create = function create(properties) {
                        return new AP(properties);
                    };
    
                    /**
                     * Encodes the specified AP message. Does not implicitly {@link CMsgNetworkDevicesData.Device.Wireless.AP.verify|verify} messages.
                     * @function encode
                     * @memberof CMsgNetworkDevicesData.Device.Wireless.AP
                     * @static
                     * @param {CMsgNetworkDevicesData.Device.Wireless.IAP} message AP message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    AP.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.id != null && message.hasOwnProperty("id"))
                            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.id);
                        if (message.estrength != null && message.hasOwnProperty("estrength"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.estrength);
                        if (message.ssid != null && message.hasOwnProperty("ssid"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.ssid);
                        if (message.is_active != null && message.hasOwnProperty("is_active"))
                            writer.uint32(/* id 4, wireType 0 =*/32).bool(message.is_active);
                        if (message.is_autoconnect != null && message.hasOwnProperty("is_autoconnect"))
                            writer.uint32(/* id 5, wireType 0 =*/40).bool(message.is_autoconnect);
                        if (message.esecurity != null && message.hasOwnProperty("esecurity"))
                            writer.uint32(/* id 6, wireType 0 =*/48).int32(message.esecurity);
                        if (message.user_name != null && message.hasOwnProperty("user_name"))
                            writer.uint32(/* id 7, wireType 2 =*/58).string(message.user_name);
                        if (message.password != null && message.hasOwnProperty("password"))
                            writer.uint32(/* id 8, wireType 2 =*/66).string(message.password);
                        if (message.strength_raw != null && message.hasOwnProperty("strength_raw"))
                            writer.uint32(/* id 9, wireType 0 =*/72).int32(message.strength_raw);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified AP message, length delimited. Does not implicitly {@link CMsgNetworkDevicesData.Device.Wireless.AP.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof CMsgNetworkDevicesData.Device.Wireless.AP
                     * @static
                     * @param {CMsgNetworkDevicesData.Device.Wireless.IAP} message AP message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    AP.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a AP message from the specified reader or buffer.
                     * @function decode
                     * @memberof CMsgNetworkDevicesData.Device.Wireless.AP
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {CMsgNetworkDevicesData.Device.Wireless.AP} AP
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    AP.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgNetworkDevicesData.Device.Wireless.AP();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.id = reader.uint32();
                                break;
                            case 2:
                                message.estrength = reader.int32();
                                break;
                            case 3:
                                message.ssid = reader.string();
                                break;
                            case 4:
                                message.is_active = reader.bool();
                                break;
                            case 5:
                                message.is_autoconnect = reader.bool();
                                break;
                            case 6:
                                message.esecurity = reader.int32();
                                break;
                            case 7:
                                message.user_name = reader.string();
                                break;
                            case 8:
                                message.password = reader.string();
                                break;
                            case 9:
                                message.strength_raw = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a AP message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof CMsgNetworkDevicesData.Device.Wireless.AP
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {CMsgNetworkDevicesData.Device.Wireless.AP} AP
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    AP.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a AP message.
                     * @function verify
                     * @memberof CMsgNetworkDevicesData.Device.Wireless.AP
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    AP.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.id != null && message.hasOwnProperty("id"))
                            if (!$util.isInteger(message.id))
                                return "id: integer expected";
                        if (message.estrength != null && message.hasOwnProperty("estrength"))
                            if (!$util.isInteger(message.estrength))
                                return "estrength: integer expected";
                        if (message.ssid != null && message.hasOwnProperty("ssid"))
                            if (!$util.isString(message.ssid))
                                return "ssid: string expected";
                        if (message.is_active != null && message.hasOwnProperty("is_active"))
                            if (typeof message.is_active !== "boolean")
                                return "is_active: boolean expected";
                        if (message.is_autoconnect != null && message.hasOwnProperty("is_autoconnect"))
                            if (typeof message.is_autoconnect !== "boolean")
                                return "is_autoconnect: boolean expected";
                        if (message.esecurity != null && message.hasOwnProperty("esecurity"))
                            if (!$util.isInteger(message.esecurity))
                                return "esecurity: integer expected";
                        if (message.user_name != null && message.hasOwnProperty("user_name"))
                            if (!$util.isString(message.user_name))
                                return "user_name: string expected";
                        if (message.password != null && message.hasOwnProperty("password"))
                            if (!$util.isString(message.password))
                                return "password: string expected";
                        if (message.strength_raw != null && message.hasOwnProperty("strength_raw"))
                            if (!$util.isInteger(message.strength_raw))
                                return "strength_raw: integer expected";
                        return null;
                    };
    
                    /**
                     * Creates a AP message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof CMsgNetworkDevicesData.Device.Wireless.AP
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {CMsgNetworkDevicesData.Device.Wireless.AP} AP
                     */
                    AP.fromObject = function fromObject(object) {
                        if (object instanceof $root.CMsgNetworkDevicesData.Device.Wireless.AP)
                            return object;
                        var message = new $root.CMsgNetworkDevicesData.Device.Wireless.AP();
                        if (object.id != null)
                            message.id = object.id >>> 0;
                        if (object.estrength != null)
                            message.estrength = object.estrength | 0;
                        if (object.ssid != null)
                            message.ssid = String(object.ssid);
                        if (object.is_active != null)
                            message.is_active = Boolean(object.is_active);
                        if (object.is_autoconnect != null)
                            message.is_autoconnect = Boolean(object.is_autoconnect);
                        if (object.esecurity != null)
                            message.esecurity = object.esecurity | 0;
                        if (object.user_name != null)
                            message.user_name = String(object.user_name);
                        if (object.password != null)
                            message.password = String(object.password);
                        if (object.strength_raw != null)
                            message.strength_raw = object.strength_raw | 0;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a AP message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof CMsgNetworkDevicesData.Device.Wireless.AP
                     * @static
                     * @param {CMsgNetworkDevicesData.Device.Wireless.AP} message AP
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    AP.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.id = 0;
                            object.estrength = 0;
                            object.ssid = "";
                            object.is_active = false;
                            object.is_autoconnect = false;
                            object.esecurity = 0;
                            object.user_name = "";
                            object.password = "";
                            object.strength_raw = 0;
                        }
                        if (message.id != null && message.hasOwnProperty("id"))
                            object.id = message.id;
                        if (message.estrength != null && message.hasOwnProperty("estrength"))
                            object.estrength = message.estrength;
                        if (message.ssid != null && message.hasOwnProperty("ssid"))
                            object.ssid = message.ssid;
                        if (message.is_active != null && message.hasOwnProperty("is_active"))
                            object.is_active = message.is_active;
                        if (message.is_autoconnect != null && message.hasOwnProperty("is_autoconnect"))
                            object.is_autoconnect = message.is_autoconnect;
                        if (message.esecurity != null && message.hasOwnProperty("esecurity"))
                            object.esecurity = message.esecurity;
                        if (message.user_name != null && message.hasOwnProperty("user_name"))
                            object.user_name = message.user_name;
                        if (message.password != null && message.hasOwnProperty("password"))
                            object.password = message.password;
                        if (message.strength_raw != null && message.hasOwnProperty("strength_raw"))
                            object.strength_raw = message.strength_raw;
                        return object;
                    };
    
                    /**
                     * Converts this AP to JSON.
                     * @function toJSON
                     * @memberof CMsgNetworkDevicesData.Device.Wireless.AP
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    AP.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return AP;
                })();
    
                return Wireless;
            })();
    
            return Device;
        })();
    
        return CMsgNetworkDevicesData;
    })();
    
    $root.CMsgNetworkDeviceConnect = (function() {
    
        /**
         * Properties of a CMsgNetworkDeviceConnect.
         * @exports ICMsgNetworkDeviceConnect
         * @interface ICMsgNetworkDeviceConnect
         * @property {number|null} [device_id] CMsgNetworkDeviceConnect device_id
         * @property {CMsgNetworkDeviceConnect.ICredentials|null} [credentials] CMsgNetworkDeviceConnect credentials
         * @property {ICMsgNetworkDeviceIP4Config|null} [ip4] CMsgNetworkDeviceConnect ip4
         * @property {ICMsgNetworkDeviceIP6Config|null} [ip6] CMsgNetworkDeviceConnect ip6
         * @property {CMsgNetworkDeviceConnect.IKnownAP|null} [ap_known] CMsgNetworkDeviceConnect ap_known
         * @property {CMsgNetworkDeviceConnect.ICustomAP|null} [ap_custom] CMsgNetworkDeviceConnect ap_custom
         */
    
        /**
         * Constructs a new CMsgNetworkDeviceConnect.
         * @exports CMsgNetworkDeviceConnect
         * @classdesc Represents a CMsgNetworkDeviceConnect.
         * @implements ICMsgNetworkDeviceConnect
         * @constructor
         * @param {ICMsgNetworkDeviceConnect=} [properties] Properties to set
         */
        function CMsgNetworkDeviceConnect(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgNetworkDeviceConnect device_id.
         * @member {number} device_id
         * @memberof CMsgNetworkDeviceConnect
         * @instance
         */
        CMsgNetworkDeviceConnect.prototype.device_id = 0;
    
        /**
         * CMsgNetworkDeviceConnect credentials.
         * @member {CMsgNetworkDeviceConnect.ICredentials|null|undefined} credentials
         * @memberof CMsgNetworkDeviceConnect
         * @instance
         */
        CMsgNetworkDeviceConnect.prototype.credentials = null;
    
        /**
         * CMsgNetworkDeviceConnect ip4.
         * @member {ICMsgNetworkDeviceIP4Config|null|undefined} ip4
         * @memberof CMsgNetworkDeviceConnect
         * @instance
         */
        CMsgNetworkDeviceConnect.prototype.ip4 = null;
    
        /**
         * CMsgNetworkDeviceConnect ip6.
         * @member {ICMsgNetworkDeviceIP6Config|null|undefined} ip6
         * @memberof CMsgNetworkDeviceConnect
         * @instance
         */
        CMsgNetworkDeviceConnect.prototype.ip6 = null;
    
        /**
         * CMsgNetworkDeviceConnect ap_known.
         * @member {CMsgNetworkDeviceConnect.IKnownAP|null|undefined} ap_known
         * @memberof CMsgNetworkDeviceConnect
         * @instance
         */
        CMsgNetworkDeviceConnect.prototype.ap_known = null;
    
        /**
         * CMsgNetworkDeviceConnect ap_custom.
         * @member {CMsgNetworkDeviceConnect.ICustomAP|null|undefined} ap_custom
         * @memberof CMsgNetworkDeviceConnect
         * @instance
         */
        CMsgNetworkDeviceConnect.prototype.ap_custom = null;
    
        // OneOf field names bound to virtual getters and setters
        var $oneOfFields;
    
        /**
         * CMsgNetworkDeviceConnect ap_info.
         * @member {"ap_known"|"ap_custom"|undefined} ap_info
         * @memberof CMsgNetworkDeviceConnect
         * @instance
         */
        Object.defineProperty(CMsgNetworkDeviceConnect.prototype, "ap_info", {
            get: $util.oneOfGetter($oneOfFields = ["ap_known", "ap_custom"]),
            set: $util.oneOfSetter($oneOfFields)
        });
    
        /**
         * Creates a new CMsgNetworkDeviceConnect instance using the specified properties.
         * @function create
         * @memberof CMsgNetworkDeviceConnect
         * @static
         * @param {ICMsgNetworkDeviceConnect=} [properties] Properties to set
         * @returns {CMsgNetworkDeviceConnect} CMsgNetworkDeviceConnect instance
         */
        CMsgNetworkDeviceConnect.create = function create(properties) {
            return new CMsgNetworkDeviceConnect(properties);
        };
    
        /**
         * Encodes the specified CMsgNetworkDeviceConnect message. Does not implicitly {@link CMsgNetworkDeviceConnect.verify|verify} messages.
         * @function encode
         * @memberof CMsgNetworkDeviceConnect
         * @static
         * @param {ICMsgNetworkDeviceConnect} message CMsgNetworkDeviceConnect message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgNetworkDeviceConnect.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.device_id != null && message.hasOwnProperty("device_id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.device_id);
            if (message.ap_known != null && message.hasOwnProperty("ap_known"))
                $root.CMsgNetworkDeviceConnect.KnownAP.encode(message.ap_known, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.ap_custom != null && message.hasOwnProperty("ap_custom"))
                $root.CMsgNetworkDeviceConnect.CustomAP.encode(message.ap_custom, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.credentials != null && message.hasOwnProperty("credentials"))
                $root.CMsgNetworkDeviceConnect.Credentials.encode(message.credentials, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.ip4 != null && message.hasOwnProperty("ip4"))
                $root.CMsgNetworkDeviceIP4Config.encode(message.ip4, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            if (message.ip6 != null && message.hasOwnProperty("ip6"))
                $root.CMsgNetworkDeviceIP6Config.encode(message.ip6, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CMsgNetworkDeviceConnect message, length delimited. Does not implicitly {@link CMsgNetworkDeviceConnect.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgNetworkDeviceConnect
         * @static
         * @param {ICMsgNetworkDeviceConnect} message CMsgNetworkDeviceConnect message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgNetworkDeviceConnect.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgNetworkDeviceConnect message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgNetworkDeviceConnect
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgNetworkDeviceConnect} CMsgNetworkDeviceConnect
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgNetworkDeviceConnect.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgNetworkDeviceConnect();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.device_id = reader.uint32();
                    break;
                case 4:
                    message.credentials = $root.CMsgNetworkDeviceConnect.Credentials.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.ip4 = $root.CMsgNetworkDeviceIP4Config.decode(reader, reader.uint32());
                    break;
                case 6:
                    message.ip6 = $root.CMsgNetworkDeviceIP6Config.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.ap_known = $root.CMsgNetworkDeviceConnect.KnownAP.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.ap_custom = $root.CMsgNetworkDeviceConnect.CustomAP.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgNetworkDeviceConnect message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgNetworkDeviceConnect
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgNetworkDeviceConnect} CMsgNetworkDeviceConnect
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgNetworkDeviceConnect.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgNetworkDeviceConnect message.
         * @function verify
         * @memberof CMsgNetworkDeviceConnect
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgNetworkDeviceConnect.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            var properties = {};
            if (message.device_id != null && message.hasOwnProperty("device_id"))
                if (!$util.isInteger(message.device_id))
                    return "device_id: integer expected";
            if (message.credentials != null && message.hasOwnProperty("credentials")) {
                var error = $root.CMsgNetworkDeviceConnect.Credentials.verify(message.credentials);
                if (error)
                    return "credentials." + error;
            }
            if (message.ip4 != null && message.hasOwnProperty("ip4")) {
                var error = $root.CMsgNetworkDeviceIP4Config.verify(message.ip4);
                if (error)
                    return "ip4." + error;
            }
            if (message.ip6 != null && message.hasOwnProperty("ip6")) {
                var error = $root.CMsgNetworkDeviceIP6Config.verify(message.ip6);
                if (error)
                    return "ip6." + error;
            }
            if (message.ap_known != null && message.hasOwnProperty("ap_known")) {
                properties.ap_info = 1;
                {
                    var error = $root.CMsgNetworkDeviceConnect.KnownAP.verify(message.ap_known);
                    if (error)
                        return "ap_known." + error;
                }
            }
            if (message.ap_custom != null && message.hasOwnProperty("ap_custom")) {
                if (properties.ap_info === 1)
                    return "ap_info: multiple values";
                properties.ap_info = 1;
                {
                    var error = $root.CMsgNetworkDeviceConnect.CustomAP.verify(message.ap_custom);
                    if (error)
                        return "ap_custom." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CMsgNetworkDeviceConnect message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgNetworkDeviceConnect
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgNetworkDeviceConnect} CMsgNetworkDeviceConnect
         */
        CMsgNetworkDeviceConnect.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgNetworkDeviceConnect)
                return object;
            var message = new $root.CMsgNetworkDeviceConnect();
            if (object.device_id != null)
                message.device_id = object.device_id >>> 0;
            if (object.credentials != null) {
                if (typeof object.credentials !== "object")
                    throw TypeError(".CMsgNetworkDeviceConnect.credentials: object expected");
                message.credentials = $root.CMsgNetworkDeviceConnect.Credentials.fromObject(object.credentials);
            }
            if (object.ip4 != null) {
                if (typeof object.ip4 !== "object")
                    throw TypeError(".CMsgNetworkDeviceConnect.ip4: object expected");
                message.ip4 = $root.CMsgNetworkDeviceIP4Config.fromObject(object.ip4);
            }
            if (object.ip6 != null) {
                if (typeof object.ip6 !== "object")
                    throw TypeError(".CMsgNetworkDeviceConnect.ip6: object expected");
                message.ip6 = $root.CMsgNetworkDeviceIP6Config.fromObject(object.ip6);
            }
            if (object.ap_known != null) {
                if (typeof object.ap_known !== "object")
                    throw TypeError(".CMsgNetworkDeviceConnect.ap_known: object expected");
                message.ap_known = $root.CMsgNetworkDeviceConnect.KnownAP.fromObject(object.ap_known);
            }
            if (object.ap_custom != null) {
                if (typeof object.ap_custom !== "object")
                    throw TypeError(".CMsgNetworkDeviceConnect.ap_custom: object expected");
                message.ap_custom = $root.CMsgNetworkDeviceConnect.CustomAP.fromObject(object.ap_custom);
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgNetworkDeviceConnect message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgNetworkDeviceConnect
         * @static
         * @param {CMsgNetworkDeviceConnect} message CMsgNetworkDeviceConnect
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgNetworkDeviceConnect.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.device_id = 0;
                object.credentials = null;
                object.ip4 = null;
                object.ip6 = null;
            }
            if (message.device_id != null && message.hasOwnProperty("device_id"))
                object.device_id = message.device_id;
            if (message.ap_known != null && message.hasOwnProperty("ap_known")) {
                object.ap_known = $root.CMsgNetworkDeviceConnect.KnownAP.toObject(message.ap_known, options);
                if (options.oneofs)
                    object.ap_info = "ap_known";
            }
            if (message.ap_custom != null && message.hasOwnProperty("ap_custom")) {
                object.ap_custom = $root.CMsgNetworkDeviceConnect.CustomAP.toObject(message.ap_custom, options);
                if (options.oneofs)
                    object.ap_info = "ap_custom";
            }
            if (message.credentials != null && message.hasOwnProperty("credentials"))
                object.credentials = $root.CMsgNetworkDeviceConnect.Credentials.toObject(message.credentials, options);
            if (message.ip4 != null && message.hasOwnProperty("ip4"))
                object.ip4 = $root.CMsgNetworkDeviceIP4Config.toObject(message.ip4, options);
            if (message.ip6 != null && message.hasOwnProperty("ip6"))
                object.ip6 = $root.CMsgNetworkDeviceIP6Config.toObject(message.ip6, options);
            return object;
        };
    
        /**
         * Converts this CMsgNetworkDeviceConnect to JSON.
         * @function toJSON
         * @memberof CMsgNetworkDeviceConnect
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgNetworkDeviceConnect.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        CMsgNetworkDeviceConnect.KnownAP = (function() {
    
            /**
             * Properties of a KnownAP.
             * @memberof CMsgNetworkDeviceConnect
             * @interface IKnownAP
             * @property {number|null} [ap_id] KnownAP ap_id
             */
    
            /**
             * Constructs a new KnownAP.
             * @memberof CMsgNetworkDeviceConnect
             * @classdesc Represents a KnownAP.
             * @implements IKnownAP
             * @constructor
             * @param {CMsgNetworkDeviceConnect.IKnownAP=} [properties] Properties to set
             */
            function KnownAP(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * KnownAP ap_id.
             * @member {number} ap_id
             * @memberof CMsgNetworkDeviceConnect.KnownAP
             * @instance
             */
            KnownAP.prototype.ap_id = 0;
    
            /**
             * Creates a new KnownAP instance using the specified properties.
             * @function create
             * @memberof CMsgNetworkDeviceConnect.KnownAP
             * @static
             * @param {CMsgNetworkDeviceConnect.IKnownAP=} [properties] Properties to set
             * @returns {CMsgNetworkDeviceConnect.KnownAP} KnownAP instance
             */
            KnownAP.create = function create(properties) {
                return new KnownAP(properties);
            };
    
            /**
             * Encodes the specified KnownAP message. Does not implicitly {@link CMsgNetworkDeviceConnect.KnownAP.verify|verify} messages.
             * @function encode
             * @memberof CMsgNetworkDeviceConnect.KnownAP
             * @static
             * @param {CMsgNetworkDeviceConnect.IKnownAP} message KnownAP message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            KnownAP.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.ap_id != null && message.hasOwnProperty("ap_id"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.ap_id);
                return writer;
            };
    
            /**
             * Encodes the specified KnownAP message, length delimited. Does not implicitly {@link CMsgNetworkDeviceConnect.KnownAP.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgNetworkDeviceConnect.KnownAP
             * @static
             * @param {CMsgNetworkDeviceConnect.IKnownAP} message KnownAP message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            KnownAP.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a KnownAP message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgNetworkDeviceConnect.KnownAP
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgNetworkDeviceConnect.KnownAP} KnownAP
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            KnownAP.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgNetworkDeviceConnect.KnownAP();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.ap_id = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a KnownAP message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgNetworkDeviceConnect.KnownAP
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgNetworkDeviceConnect.KnownAP} KnownAP
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            KnownAP.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a KnownAP message.
             * @function verify
             * @memberof CMsgNetworkDeviceConnect.KnownAP
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            KnownAP.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.ap_id != null && message.hasOwnProperty("ap_id"))
                    if (!$util.isInteger(message.ap_id))
                        return "ap_id: integer expected";
                return null;
            };
    
            /**
             * Creates a KnownAP message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgNetworkDeviceConnect.KnownAP
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgNetworkDeviceConnect.KnownAP} KnownAP
             */
            KnownAP.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgNetworkDeviceConnect.KnownAP)
                    return object;
                var message = new $root.CMsgNetworkDeviceConnect.KnownAP();
                if (object.ap_id != null)
                    message.ap_id = object.ap_id >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a KnownAP message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgNetworkDeviceConnect.KnownAP
             * @static
             * @param {CMsgNetworkDeviceConnect.KnownAP} message KnownAP
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            KnownAP.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.ap_id = 0;
                if (message.ap_id != null && message.hasOwnProperty("ap_id"))
                    object.ap_id = message.ap_id;
                return object;
            };
    
            /**
             * Converts this KnownAP to JSON.
             * @function toJSON
             * @memberof CMsgNetworkDeviceConnect.KnownAP
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            KnownAP.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return KnownAP;
        })();
    
        CMsgNetworkDeviceConnect.CustomAP = (function() {
    
            /**
             * Properties of a CustomAP.
             * @memberof CMsgNetworkDeviceConnect
             * @interface ICustomAP
             * @property {string|null} [ssid] CustomAP ssid
             * @property {number|null} [esecurity] CustomAP esecurity
             */
    
            /**
             * Constructs a new CustomAP.
             * @memberof CMsgNetworkDeviceConnect
             * @classdesc Represents a CustomAP.
             * @implements ICustomAP
             * @constructor
             * @param {CMsgNetworkDeviceConnect.ICustomAP=} [properties] Properties to set
             */
            function CustomAP(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * CustomAP ssid.
             * @member {string} ssid
             * @memberof CMsgNetworkDeviceConnect.CustomAP
             * @instance
             */
            CustomAP.prototype.ssid = "";
    
            /**
             * CustomAP esecurity.
             * @member {number} esecurity
             * @memberof CMsgNetworkDeviceConnect.CustomAP
             * @instance
             */
            CustomAP.prototype.esecurity = 0;
    
            /**
             * Creates a new CustomAP instance using the specified properties.
             * @function create
             * @memberof CMsgNetworkDeviceConnect.CustomAP
             * @static
             * @param {CMsgNetworkDeviceConnect.ICustomAP=} [properties] Properties to set
             * @returns {CMsgNetworkDeviceConnect.CustomAP} CustomAP instance
             */
            CustomAP.create = function create(properties) {
                return new CustomAP(properties);
            };
    
            /**
             * Encodes the specified CustomAP message. Does not implicitly {@link CMsgNetworkDeviceConnect.CustomAP.verify|verify} messages.
             * @function encode
             * @memberof CMsgNetworkDeviceConnect.CustomAP
             * @static
             * @param {CMsgNetworkDeviceConnect.ICustomAP} message CustomAP message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CustomAP.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.ssid != null && message.hasOwnProperty("ssid"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.ssid);
                if (message.esecurity != null && message.hasOwnProperty("esecurity"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.esecurity);
                return writer;
            };
    
            /**
             * Encodes the specified CustomAP message, length delimited. Does not implicitly {@link CMsgNetworkDeviceConnect.CustomAP.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgNetworkDeviceConnect.CustomAP
             * @static
             * @param {CMsgNetworkDeviceConnect.ICustomAP} message CustomAP message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CustomAP.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a CustomAP message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgNetworkDeviceConnect.CustomAP
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgNetworkDeviceConnect.CustomAP} CustomAP
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CustomAP.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgNetworkDeviceConnect.CustomAP();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.ssid = reader.string();
                        break;
                    case 2:
                        message.esecurity = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a CustomAP message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgNetworkDeviceConnect.CustomAP
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgNetworkDeviceConnect.CustomAP} CustomAP
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CustomAP.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a CustomAP message.
             * @function verify
             * @memberof CMsgNetworkDeviceConnect.CustomAP
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CustomAP.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.ssid != null && message.hasOwnProperty("ssid"))
                    if (!$util.isString(message.ssid))
                        return "ssid: string expected";
                if (message.esecurity != null && message.hasOwnProperty("esecurity"))
                    if (!$util.isInteger(message.esecurity))
                        return "esecurity: integer expected";
                return null;
            };
    
            /**
             * Creates a CustomAP message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgNetworkDeviceConnect.CustomAP
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgNetworkDeviceConnect.CustomAP} CustomAP
             */
            CustomAP.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgNetworkDeviceConnect.CustomAP)
                    return object;
                var message = new $root.CMsgNetworkDeviceConnect.CustomAP();
                if (object.ssid != null)
                    message.ssid = String(object.ssid);
                if (object.esecurity != null)
                    message.esecurity = object.esecurity | 0;
                return message;
            };
    
            /**
             * Creates a plain object from a CustomAP message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgNetworkDeviceConnect.CustomAP
             * @static
             * @param {CMsgNetworkDeviceConnect.CustomAP} message CustomAP
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CustomAP.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.ssid = "";
                    object.esecurity = 0;
                }
                if (message.ssid != null && message.hasOwnProperty("ssid"))
                    object.ssid = message.ssid;
                if (message.esecurity != null && message.hasOwnProperty("esecurity"))
                    object.esecurity = message.esecurity;
                return object;
            };
    
            /**
             * Converts this CustomAP to JSON.
             * @function toJSON
             * @memberof CMsgNetworkDeviceConnect.CustomAP
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CustomAP.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return CustomAP;
        })();
    
        CMsgNetworkDeviceConnect.Credentials = (function() {
    
            /**
             * Properties of a Credentials.
             * @memberof CMsgNetworkDeviceConnect
             * @interface ICredentials
             * @property {string|null} [username] Credentials username
             * @property {string|null} [password] Credentials password
             */
    
            /**
             * Constructs a new Credentials.
             * @memberof CMsgNetworkDeviceConnect
             * @classdesc Represents a Credentials.
             * @implements ICredentials
             * @constructor
             * @param {CMsgNetworkDeviceConnect.ICredentials=} [properties] Properties to set
             */
            function Credentials(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * Credentials username.
             * @member {string} username
             * @memberof CMsgNetworkDeviceConnect.Credentials
             * @instance
             */
            Credentials.prototype.username = "";
    
            /**
             * Credentials password.
             * @member {string} password
             * @memberof CMsgNetworkDeviceConnect.Credentials
             * @instance
             */
            Credentials.prototype.password = "";
    
            /**
             * Creates a new Credentials instance using the specified properties.
             * @function create
             * @memberof CMsgNetworkDeviceConnect.Credentials
             * @static
             * @param {CMsgNetworkDeviceConnect.ICredentials=} [properties] Properties to set
             * @returns {CMsgNetworkDeviceConnect.Credentials} Credentials instance
             */
            Credentials.create = function create(properties) {
                return new Credentials(properties);
            };
    
            /**
             * Encodes the specified Credentials message. Does not implicitly {@link CMsgNetworkDeviceConnect.Credentials.verify|verify} messages.
             * @function encode
             * @memberof CMsgNetworkDeviceConnect.Credentials
             * @static
             * @param {CMsgNetworkDeviceConnect.ICredentials} message Credentials message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Credentials.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.username != null && message.hasOwnProperty("username"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.username);
                if (message.password != null && message.hasOwnProperty("password"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.password);
                return writer;
            };
    
            /**
             * Encodes the specified Credentials message, length delimited. Does not implicitly {@link CMsgNetworkDeviceConnect.Credentials.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgNetworkDeviceConnect.Credentials
             * @static
             * @param {CMsgNetworkDeviceConnect.ICredentials} message Credentials message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Credentials.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a Credentials message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgNetworkDeviceConnect.Credentials
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgNetworkDeviceConnect.Credentials} Credentials
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Credentials.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgNetworkDeviceConnect.Credentials();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.username = reader.string();
                        break;
                    case 2:
                        message.password = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a Credentials message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgNetworkDeviceConnect.Credentials
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgNetworkDeviceConnect.Credentials} Credentials
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Credentials.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a Credentials message.
             * @function verify
             * @memberof CMsgNetworkDeviceConnect.Credentials
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Credentials.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.username != null && message.hasOwnProperty("username"))
                    if (!$util.isString(message.username))
                        return "username: string expected";
                if (message.password != null && message.hasOwnProperty("password"))
                    if (!$util.isString(message.password))
                        return "password: string expected";
                return null;
            };
    
            /**
             * Creates a Credentials message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgNetworkDeviceConnect.Credentials
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgNetworkDeviceConnect.Credentials} Credentials
             */
            Credentials.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgNetworkDeviceConnect.Credentials)
                    return object;
                var message = new $root.CMsgNetworkDeviceConnect.Credentials();
                if (object.username != null)
                    message.username = String(object.username);
                if (object.password != null)
                    message.password = String(object.password);
                return message;
            };
    
            /**
             * Creates a plain object from a Credentials message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgNetworkDeviceConnect.Credentials
             * @static
             * @param {CMsgNetworkDeviceConnect.Credentials} message Credentials
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Credentials.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.username = "";
                    object.password = "";
                }
                if (message.username != null && message.hasOwnProperty("username"))
                    object.username = message.username;
                if (message.password != null && message.hasOwnProperty("password"))
                    object.password = message.password;
                return object;
            };
    
            /**
             * Converts this Credentials to JSON.
             * @function toJSON
             * @memberof CMsgNetworkDeviceConnect.Credentials
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Credentials.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return Credentials;
        })();
    
        return CMsgNetworkDeviceConnect;
    })();
    
    $root.CMsgStorageDevicesData = (function() {
    
        /**
         * Properties of a CMsgStorageDevicesData.
         * @exports ICMsgStorageDevicesData
         * @interface ICMsgStorageDevicesData
         * @property {Array.<CMsgStorageDevicesData.IDrive>|null} [drives] CMsgStorageDevicesData drives
         * @property {Array.<CMsgStorageDevicesData.IBlockDevice>|null} [block_devices] CMsgStorageDevicesData block_devices
         */
    
        /**
         * Constructs a new CMsgStorageDevicesData.
         * @exports CMsgStorageDevicesData
         * @classdesc Represents a CMsgStorageDevicesData.
         * @implements ICMsgStorageDevicesData
         * @constructor
         * @param {ICMsgStorageDevicesData=} [properties] Properties to set
         */
        function CMsgStorageDevicesData(properties) {
            this.drives = [];
            this.block_devices = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgStorageDevicesData drives.
         * @member {Array.<CMsgStorageDevicesData.IDrive>} drives
         * @memberof CMsgStorageDevicesData
         * @instance
         */
        CMsgStorageDevicesData.prototype.drives = $util.emptyArray;
    
        /**
         * CMsgStorageDevicesData block_devices.
         * @member {Array.<CMsgStorageDevicesData.IBlockDevice>} block_devices
         * @memberof CMsgStorageDevicesData
         * @instance
         */
        CMsgStorageDevicesData.prototype.block_devices = $util.emptyArray;
    
        /**
         * Creates a new CMsgStorageDevicesData instance using the specified properties.
         * @function create
         * @memberof CMsgStorageDevicesData
         * @static
         * @param {ICMsgStorageDevicesData=} [properties] Properties to set
         * @returns {CMsgStorageDevicesData} CMsgStorageDevicesData instance
         */
        CMsgStorageDevicesData.create = function create(properties) {
            return new CMsgStorageDevicesData(properties);
        };
    
        /**
         * Encodes the specified CMsgStorageDevicesData message. Does not implicitly {@link CMsgStorageDevicesData.verify|verify} messages.
         * @function encode
         * @memberof CMsgStorageDevicesData
         * @static
         * @param {ICMsgStorageDevicesData} message CMsgStorageDevicesData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgStorageDevicesData.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.drives != null && message.drives.length)
                for (var i = 0; i < message.drives.length; ++i)
                    $root.CMsgStorageDevicesData.Drive.encode(message.drives[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.block_devices != null && message.block_devices.length)
                for (var i = 0; i < message.block_devices.length; ++i)
                    $root.CMsgStorageDevicesData.BlockDevice.encode(message.block_devices[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CMsgStorageDevicesData message, length delimited. Does not implicitly {@link CMsgStorageDevicesData.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgStorageDevicesData
         * @static
         * @param {ICMsgStorageDevicesData} message CMsgStorageDevicesData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgStorageDevicesData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgStorageDevicesData message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgStorageDevicesData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgStorageDevicesData} CMsgStorageDevicesData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgStorageDevicesData.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgStorageDevicesData();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.drives && message.drives.length))
                        message.drives = [];
                    message.drives.push($root.CMsgStorageDevicesData.Drive.decode(reader, reader.uint32()));
                    break;
                case 2:
                    if (!(message.block_devices && message.block_devices.length))
                        message.block_devices = [];
                    message.block_devices.push($root.CMsgStorageDevicesData.BlockDevice.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgStorageDevicesData message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgStorageDevicesData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgStorageDevicesData} CMsgStorageDevicesData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgStorageDevicesData.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgStorageDevicesData message.
         * @function verify
         * @memberof CMsgStorageDevicesData
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgStorageDevicesData.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.drives != null && message.hasOwnProperty("drives")) {
                if (!Array.isArray(message.drives))
                    return "drives: array expected";
                for (var i = 0; i < message.drives.length; ++i) {
                    var error = $root.CMsgStorageDevicesData.Drive.verify(message.drives[i]);
                    if (error)
                        return "drives." + error;
                }
            }
            if (message.block_devices != null && message.hasOwnProperty("block_devices")) {
                if (!Array.isArray(message.block_devices))
                    return "block_devices: array expected";
                for (var i = 0; i < message.block_devices.length; ++i) {
                    var error = $root.CMsgStorageDevicesData.BlockDevice.verify(message.block_devices[i]);
                    if (error)
                        return "block_devices." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CMsgStorageDevicesData message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgStorageDevicesData
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgStorageDevicesData} CMsgStorageDevicesData
         */
        CMsgStorageDevicesData.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgStorageDevicesData)
                return object;
            var message = new $root.CMsgStorageDevicesData();
            if (object.drives) {
                if (!Array.isArray(object.drives))
                    throw TypeError(".CMsgStorageDevicesData.drives: array expected");
                message.drives = [];
                for (var i = 0; i < object.drives.length; ++i) {
                    if (typeof object.drives[i] !== "object")
                        throw TypeError(".CMsgStorageDevicesData.drives: object expected");
                    message.drives[i] = $root.CMsgStorageDevicesData.Drive.fromObject(object.drives[i]);
                }
            }
            if (object.block_devices) {
                if (!Array.isArray(object.block_devices))
                    throw TypeError(".CMsgStorageDevicesData.block_devices: array expected");
                message.block_devices = [];
                for (var i = 0; i < object.block_devices.length; ++i) {
                    if (typeof object.block_devices[i] !== "object")
                        throw TypeError(".CMsgStorageDevicesData.block_devices: object expected");
                    message.block_devices[i] = $root.CMsgStorageDevicesData.BlockDevice.fromObject(object.block_devices[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgStorageDevicesData message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgStorageDevicesData
         * @static
         * @param {CMsgStorageDevicesData} message CMsgStorageDevicesData
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgStorageDevicesData.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.drives = [];
                object.block_devices = [];
            }
            if (message.drives && message.drives.length) {
                object.drives = [];
                for (var j = 0; j < message.drives.length; ++j)
                    object.drives[j] = $root.CMsgStorageDevicesData.Drive.toObject(message.drives[j], options);
            }
            if (message.block_devices && message.block_devices.length) {
                object.block_devices = [];
                for (var j = 0; j < message.block_devices.length; ++j)
                    object.block_devices[j] = $root.CMsgStorageDevicesData.BlockDevice.toObject(message.block_devices[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CMsgStorageDevicesData to JSON.
         * @function toJSON
         * @memberof CMsgStorageDevicesData
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgStorageDevicesData.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        CMsgStorageDevicesData.Drive = (function() {
    
            /**
             * Properties of a Drive.
             * @memberof CMsgStorageDevicesData
             * @interface IDrive
             * @property {number|null} [id] Drive id
             * @property {string|null} [model] Drive model
             * @property {string|null} [vendor] Drive vendor
             * @property {string|null} [serial] Drive serial
             * @property {boolean|null} [is_ejectable] Drive is_ejectable
             * @property {number|Long|null} [size_bytes] Drive size_bytes
             */
    
            /**
             * Constructs a new Drive.
             * @memberof CMsgStorageDevicesData
             * @classdesc Represents a Drive.
             * @implements IDrive
             * @constructor
             * @param {CMsgStorageDevicesData.IDrive=} [properties] Properties to set
             */
            function Drive(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * Drive id.
             * @member {number} id
             * @memberof CMsgStorageDevicesData.Drive
             * @instance
             */
            Drive.prototype.id = 0;
    
            /**
             * Drive model.
             * @member {string} model
             * @memberof CMsgStorageDevicesData.Drive
             * @instance
             */
            Drive.prototype.model = "";
    
            /**
             * Drive vendor.
             * @member {string} vendor
             * @memberof CMsgStorageDevicesData.Drive
             * @instance
             */
            Drive.prototype.vendor = "";
    
            /**
             * Drive serial.
             * @member {string} serial
             * @memberof CMsgStorageDevicesData.Drive
             * @instance
             */
            Drive.prototype.serial = "";
    
            /**
             * Drive is_ejectable.
             * @member {boolean} is_ejectable
             * @memberof CMsgStorageDevicesData.Drive
             * @instance
             */
            Drive.prototype.is_ejectable = false;
    
            /**
             * Drive size_bytes.
             * @member {number|Long} size_bytes
             * @memberof CMsgStorageDevicesData.Drive
             * @instance
             */
            Drive.prototype.size_bytes = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
            /**
             * Creates a new Drive instance using the specified properties.
             * @function create
             * @memberof CMsgStorageDevicesData.Drive
             * @static
             * @param {CMsgStorageDevicesData.IDrive=} [properties] Properties to set
             * @returns {CMsgStorageDevicesData.Drive} Drive instance
             */
            Drive.create = function create(properties) {
                return new Drive(properties);
            };
    
            /**
             * Encodes the specified Drive message. Does not implicitly {@link CMsgStorageDevicesData.Drive.verify|verify} messages.
             * @function encode
             * @memberof CMsgStorageDevicesData.Drive
             * @static
             * @param {CMsgStorageDevicesData.IDrive} message Drive message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Drive.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.id != null && message.hasOwnProperty("id"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.id);
                if (message.model != null && message.hasOwnProperty("model"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.model);
                if (message.vendor != null && message.hasOwnProperty("vendor"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.vendor);
                if (message.serial != null && message.hasOwnProperty("serial"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.serial);
                if (message.is_ejectable != null && message.hasOwnProperty("is_ejectable"))
                    writer.uint32(/* id 5, wireType 0 =*/40).bool(message.is_ejectable);
                if (message.size_bytes != null && message.hasOwnProperty("size_bytes"))
                    writer.uint32(/* id 6, wireType 0 =*/48).uint64(message.size_bytes);
                return writer;
            };
    
            /**
             * Encodes the specified Drive message, length delimited. Does not implicitly {@link CMsgStorageDevicesData.Drive.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgStorageDevicesData.Drive
             * @static
             * @param {CMsgStorageDevicesData.IDrive} message Drive message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Drive.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a Drive message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgStorageDevicesData.Drive
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgStorageDevicesData.Drive} Drive
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Drive.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgStorageDevicesData.Drive();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.id = reader.uint32();
                        break;
                    case 2:
                        message.model = reader.string();
                        break;
                    case 3:
                        message.vendor = reader.string();
                        break;
                    case 4:
                        message.serial = reader.string();
                        break;
                    case 5:
                        message.is_ejectable = reader.bool();
                        break;
                    case 6:
                        message.size_bytes = reader.uint64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a Drive message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgStorageDevicesData.Drive
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgStorageDevicesData.Drive} Drive
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Drive.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a Drive message.
             * @function verify
             * @memberof CMsgStorageDevicesData.Drive
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Drive.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.id != null && message.hasOwnProperty("id"))
                    if (!$util.isInteger(message.id))
                        return "id: integer expected";
                if (message.model != null && message.hasOwnProperty("model"))
                    if (!$util.isString(message.model))
                        return "model: string expected";
                if (message.vendor != null && message.hasOwnProperty("vendor"))
                    if (!$util.isString(message.vendor))
                        return "vendor: string expected";
                if (message.serial != null && message.hasOwnProperty("serial"))
                    if (!$util.isString(message.serial))
                        return "serial: string expected";
                if (message.is_ejectable != null && message.hasOwnProperty("is_ejectable"))
                    if (typeof message.is_ejectable !== "boolean")
                        return "is_ejectable: boolean expected";
                if (message.size_bytes != null && message.hasOwnProperty("size_bytes"))
                    if (!$util.isInteger(message.size_bytes) && !(message.size_bytes && $util.isInteger(message.size_bytes.low) && $util.isInteger(message.size_bytes.high)))
                        return "size_bytes: integer|Long expected";
                return null;
            };
    
            /**
             * Creates a Drive message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgStorageDevicesData.Drive
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgStorageDevicesData.Drive} Drive
             */
            Drive.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgStorageDevicesData.Drive)
                    return object;
                var message = new $root.CMsgStorageDevicesData.Drive();
                if (object.id != null)
                    message.id = object.id >>> 0;
                if (object.model != null)
                    message.model = String(object.model);
                if (object.vendor != null)
                    message.vendor = String(object.vendor);
                if (object.serial != null)
                    message.serial = String(object.serial);
                if (object.is_ejectable != null)
                    message.is_ejectable = Boolean(object.is_ejectable);
                if (object.size_bytes != null)
                    if ($util.Long)
                        (message.size_bytes = $util.Long.fromValue(object.size_bytes)).unsigned = true;
                    else if (typeof object.size_bytes === "string")
                        message.size_bytes = parseInt(object.size_bytes, 10);
                    else if (typeof object.size_bytes === "number")
                        message.size_bytes = object.size_bytes;
                    else if (typeof object.size_bytes === "object")
                        message.size_bytes = new $util.LongBits(object.size_bytes.low >>> 0, object.size_bytes.high >>> 0).toNumber(true);
                return message;
            };
    
            /**
             * Creates a plain object from a Drive message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgStorageDevicesData.Drive
             * @static
             * @param {CMsgStorageDevicesData.Drive} message Drive
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Drive.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.id = 0;
                    object.model = "";
                    object.vendor = "";
                    object.serial = "";
                    object.is_ejectable = false;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.size_bytes = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.size_bytes = options.longs === String ? "0" : 0;
                }
                if (message.id != null && message.hasOwnProperty("id"))
                    object.id = message.id;
                if (message.model != null && message.hasOwnProperty("model"))
                    object.model = message.model;
                if (message.vendor != null && message.hasOwnProperty("vendor"))
                    object.vendor = message.vendor;
                if (message.serial != null && message.hasOwnProperty("serial"))
                    object.serial = message.serial;
                if (message.is_ejectable != null && message.hasOwnProperty("is_ejectable"))
                    object.is_ejectable = message.is_ejectable;
                if (message.size_bytes != null && message.hasOwnProperty("size_bytes"))
                    if (typeof message.size_bytes === "number")
                        object.size_bytes = options.longs === String ? String(message.size_bytes) : message.size_bytes;
                    else
                        object.size_bytes = options.longs === String ? $util.Long.prototype.toString.call(message.size_bytes) : options.longs === Number ? new $util.LongBits(message.size_bytes.low >>> 0, message.size_bytes.high >>> 0).toNumber(true) : message.size_bytes;
                return object;
            };
    
            /**
             * Converts this Drive to JSON.
             * @function toJSON
             * @memberof CMsgStorageDevicesData.Drive
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Drive.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return Drive;
        })();
    
        CMsgStorageDevicesData.BlockDevice = (function() {
    
            /**
             * Properties of a BlockDevice.
             * @memberof CMsgStorageDevicesData
             * @interface IBlockDevice
             * @property {number|null} [id] BlockDevice id
             * @property {number|null} [drive_id] BlockDevice drive_id
             * @property {string|null} [path] BlockDevice path
             * @property {string|null} [friendly_path] BlockDevice friendly_path
             * @property {string|null} [label] BlockDevice label
             * @property {number|Long|null} [size_bytes] BlockDevice size_bytes
             * @property {boolean|null} [is_formattable] BlockDevice is_formattable
             * @property {boolean|null} [is_read_only] BlockDevice is_read_only
             * @property {boolean|null} [is_root_device] BlockDevice is_root_device
             * @property {EStorageBlockContentType|null} [content_type] BlockDevice content_type
             * @property {EStorageBlockFileSystemType|null} [filesystem_type] BlockDevice filesystem_type
             * @property {string|null} [mount_path] BlockDevice mount_path
             */
    
            /**
             * Constructs a new BlockDevice.
             * @memberof CMsgStorageDevicesData
             * @classdesc Represents a BlockDevice.
             * @implements IBlockDevice
             * @constructor
             * @param {CMsgStorageDevicesData.IBlockDevice=} [properties] Properties to set
             */
            function BlockDevice(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * BlockDevice id.
             * @member {number} id
             * @memberof CMsgStorageDevicesData.BlockDevice
             * @instance
             */
            BlockDevice.prototype.id = 0;
    
            /**
             * BlockDevice drive_id.
             * @member {number} drive_id
             * @memberof CMsgStorageDevicesData.BlockDevice
             * @instance
             */
            BlockDevice.prototype.drive_id = 0;
    
            /**
             * BlockDevice path.
             * @member {string} path
             * @memberof CMsgStorageDevicesData.BlockDevice
             * @instance
             */
            BlockDevice.prototype.path = "";
    
            /**
             * BlockDevice friendly_path.
             * @member {string} friendly_path
             * @memberof CMsgStorageDevicesData.BlockDevice
             * @instance
             */
            BlockDevice.prototype.friendly_path = "";
    
            /**
             * BlockDevice label.
             * @member {string} label
             * @memberof CMsgStorageDevicesData.BlockDevice
             * @instance
             */
            BlockDevice.prototype.label = "";
    
            /**
             * BlockDevice size_bytes.
             * @member {number|Long} size_bytes
             * @memberof CMsgStorageDevicesData.BlockDevice
             * @instance
             */
            BlockDevice.prototype.size_bytes = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
            /**
             * BlockDevice is_formattable.
             * @member {boolean} is_formattable
             * @memberof CMsgStorageDevicesData.BlockDevice
             * @instance
             */
            BlockDevice.prototype.is_formattable = false;
    
            /**
             * BlockDevice is_read_only.
             * @member {boolean} is_read_only
             * @memberof CMsgStorageDevicesData.BlockDevice
             * @instance
             */
            BlockDevice.prototype.is_read_only = false;
    
            /**
             * BlockDevice is_root_device.
             * @member {boolean} is_root_device
             * @memberof CMsgStorageDevicesData.BlockDevice
             * @instance
             */
            BlockDevice.prototype.is_root_device = false;
    
            /**
             * BlockDevice content_type.
             * @member {EStorageBlockContentType} content_type
             * @memberof CMsgStorageDevicesData.BlockDevice
             * @instance
             */
            BlockDevice.prototype.content_type = 0;
    
            /**
             * BlockDevice filesystem_type.
             * @member {EStorageBlockFileSystemType} filesystem_type
             * @memberof CMsgStorageDevicesData.BlockDevice
             * @instance
             */
            BlockDevice.prototype.filesystem_type = 0;
    
            /**
             * BlockDevice mount_path.
             * @member {string} mount_path
             * @memberof CMsgStorageDevicesData.BlockDevice
             * @instance
             */
            BlockDevice.prototype.mount_path = "";
    
            /**
             * Creates a new BlockDevice instance using the specified properties.
             * @function create
             * @memberof CMsgStorageDevicesData.BlockDevice
             * @static
             * @param {CMsgStorageDevicesData.IBlockDevice=} [properties] Properties to set
             * @returns {CMsgStorageDevicesData.BlockDevice} BlockDevice instance
             */
            BlockDevice.create = function create(properties) {
                return new BlockDevice(properties);
            };
    
            /**
             * Encodes the specified BlockDevice message. Does not implicitly {@link CMsgStorageDevicesData.BlockDevice.verify|verify} messages.
             * @function encode
             * @memberof CMsgStorageDevicesData.BlockDevice
             * @static
             * @param {CMsgStorageDevicesData.IBlockDevice} message BlockDevice message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BlockDevice.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.id != null && message.hasOwnProperty("id"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.id);
                if (message.drive_id != null && message.hasOwnProperty("drive_id"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.drive_id);
                if (message.path != null && message.hasOwnProperty("path"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.path);
                if (message.friendly_path != null && message.hasOwnProperty("friendly_path"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.friendly_path);
                if (message.label != null && message.hasOwnProperty("label"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.label);
                if (message.size_bytes != null && message.hasOwnProperty("size_bytes"))
                    writer.uint32(/* id 6, wireType 0 =*/48).uint64(message.size_bytes);
                if (message.is_formattable != null && message.hasOwnProperty("is_formattable"))
                    writer.uint32(/* id 7, wireType 0 =*/56).bool(message.is_formattable);
                if (message.is_read_only != null && message.hasOwnProperty("is_read_only"))
                    writer.uint32(/* id 8, wireType 0 =*/64).bool(message.is_read_only);
                if (message.is_root_device != null && message.hasOwnProperty("is_root_device"))
                    writer.uint32(/* id 9, wireType 0 =*/72).bool(message.is_root_device);
                if (message.content_type != null && message.hasOwnProperty("content_type"))
                    writer.uint32(/* id 10, wireType 0 =*/80).int32(message.content_type);
                if (message.filesystem_type != null && message.hasOwnProperty("filesystem_type"))
                    writer.uint32(/* id 11, wireType 0 =*/88).int32(message.filesystem_type);
                if (message.mount_path != null && message.hasOwnProperty("mount_path"))
                    writer.uint32(/* id 12, wireType 2 =*/98).string(message.mount_path);
                return writer;
            };
    
            /**
             * Encodes the specified BlockDevice message, length delimited. Does not implicitly {@link CMsgStorageDevicesData.BlockDevice.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgStorageDevicesData.BlockDevice
             * @static
             * @param {CMsgStorageDevicesData.IBlockDevice} message BlockDevice message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BlockDevice.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a BlockDevice message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgStorageDevicesData.BlockDevice
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgStorageDevicesData.BlockDevice} BlockDevice
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BlockDevice.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgStorageDevicesData.BlockDevice();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.id = reader.uint32();
                        break;
                    case 2:
                        message.drive_id = reader.uint32();
                        break;
                    case 3:
                        message.path = reader.string();
                        break;
                    case 4:
                        message.friendly_path = reader.string();
                        break;
                    case 5:
                        message.label = reader.string();
                        break;
                    case 6:
                        message.size_bytes = reader.uint64();
                        break;
                    case 7:
                        message.is_formattable = reader.bool();
                        break;
                    case 8:
                        message.is_read_only = reader.bool();
                        break;
                    case 9:
                        message.is_root_device = reader.bool();
                        break;
                    case 10:
                        message.content_type = reader.int32();
                        break;
                    case 11:
                        message.filesystem_type = reader.int32();
                        break;
                    case 12:
                        message.mount_path = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a BlockDevice message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgStorageDevicesData.BlockDevice
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgStorageDevicesData.BlockDevice} BlockDevice
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BlockDevice.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a BlockDevice message.
             * @function verify
             * @memberof CMsgStorageDevicesData.BlockDevice
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BlockDevice.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.id != null && message.hasOwnProperty("id"))
                    if (!$util.isInteger(message.id))
                        return "id: integer expected";
                if (message.drive_id != null && message.hasOwnProperty("drive_id"))
                    if (!$util.isInteger(message.drive_id))
                        return "drive_id: integer expected";
                if (message.path != null && message.hasOwnProperty("path"))
                    if (!$util.isString(message.path))
                        return "path: string expected";
                if (message.friendly_path != null && message.hasOwnProperty("friendly_path"))
                    if (!$util.isString(message.friendly_path))
                        return "friendly_path: string expected";
                if (message.label != null && message.hasOwnProperty("label"))
                    if (!$util.isString(message.label))
                        return "label: string expected";
                if (message.size_bytes != null && message.hasOwnProperty("size_bytes"))
                    if (!$util.isInteger(message.size_bytes) && !(message.size_bytes && $util.isInteger(message.size_bytes.low) && $util.isInteger(message.size_bytes.high)))
                        return "size_bytes: integer|Long expected";
                if (message.is_formattable != null && message.hasOwnProperty("is_formattable"))
                    if (typeof message.is_formattable !== "boolean")
                        return "is_formattable: boolean expected";
                if (message.is_read_only != null && message.hasOwnProperty("is_read_only"))
                    if (typeof message.is_read_only !== "boolean")
                        return "is_read_only: boolean expected";
                if (message.is_root_device != null && message.hasOwnProperty("is_root_device"))
                    if (typeof message.is_root_device !== "boolean")
                        return "is_root_device: boolean expected";
                if (message.content_type != null && message.hasOwnProperty("content_type"))
                    switch (message.content_type) {
                    default:
                        return "content_type: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                        break;
                    }
                if (message.filesystem_type != null && message.hasOwnProperty("filesystem_type"))
                    switch (message.filesystem_type) {
                    default:
                        return "filesystem_type: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                        break;
                    }
                if (message.mount_path != null && message.hasOwnProperty("mount_path"))
                    if (!$util.isString(message.mount_path))
                        return "mount_path: string expected";
                return null;
            };
    
            /**
             * Creates a BlockDevice message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgStorageDevicesData.BlockDevice
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgStorageDevicesData.BlockDevice} BlockDevice
             */
            BlockDevice.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgStorageDevicesData.BlockDevice)
                    return object;
                var message = new $root.CMsgStorageDevicesData.BlockDevice();
                if (object.id != null)
                    message.id = object.id >>> 0;
                if (object.drive_id != null)
                    message.drive_id = object.drive_id >>> 0;
                if (object.path != null)
                    message.path = String(object.path);
                if (object.friendly_path != null)
                    message.friendly_path = String(object.friendly_path);
                if (object.label != null)
                    message.label = String(object.label);
                if (object.size_bytes != null)
                    if ($util.Long)
                        (message.size_bytes = $util.Long.fromValue(object.size_bytes)).unsigned = true;
                    else if (typeof object.size_bytes === "string")
                        message.size_bytes = parseInt(object.size_bytes, 10);
                    else if (typeof object.size_bytes === "number")
                        message.size_bytes = object.size_bytes;
                    else if (typeof object.size_bytes === "object")
                        message.size_bytes = new $util.LongBits(object.size_bytes.low >>> 0, object.size_bytes.high >>> 0).toNumber(true);
                if (object.is_formattable != null)
                    message.is_formattable = Boolean(object.is_formattable);
                if (object.is_read_only != null)
                    message.is_read_only = Boolean(object.is_read_only);
                if (object.is_root_device != null)
                    message.is_root_device = Boolean(object.is_root_device);
                switch (object.content_type) {
                case "k_EStorageBlockContentType_Invalid":
                case 0:
                    message.content_type = 0;
                    break;
                case "k_EStorageBlockContentType_Unknown":
                case 1:
                    message.content_type = 1;
                    break;
                case "k_EStorageBlockContentType_FileSystem":
                case 2:
                    message.content_type = 2;
                    break;
                case "k_EStorageBlockContentType_Crypto":
                case 3:
                    message.content_type = 3;
                    break;
                case "k_EStorageBlockContentType_Raid":
                case 4:
                    message.content_type = 4;
                    break;
                }
                switch (object.filesystem_type) {
                case "k_EStorageBlockFileSystemType_Invalid":
                case 0:
                    message.filesystem_type = 0;
                    break;
                case "k_EStorageBlockFileSystemType_Unknown":
                case 1:
                    message.filesystem_type = 1;
                    break;
                case "k_EStorageBlockFileSystemType_VFat":
                case 2:
                    message.filesystem_type = 2;
                    break;
                case "k_EStorageBlockFileSystemType_Ext4":
                case 3:
                    message.filesystem_type = 3;
                    break;
                }
                if (object.mount_path != null)
                    message.mount_path = String(object.mount_path);
                return message;
            };
    
            /**
             * Creates a plain object from a BlockDevice message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgStorageDevicesData.BlockDevice
             * @static
             * @param {CMsgStorageDevicesData.BlockDevice} message BlockDevice
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BlockDevice.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.id = 0;
                    object.drive_id = 0;
                    object.path = "";
                    object.friendly_path = "";
                    object.label = "";
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.size_bytes = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.size_bytes = options.longs === String ? "0" : 0;
                    object.is_formattable = false;
                    object.is_read_only = false;
                    object.is_root_device = false;
                    object.content_type = options.enums === String ? "k_EStorageBlockContentType_Invalid" : 0;
                    object.filesystem_type = options.enums === String ? "k_EStorageBlockFileSystemType_Invalid" : 0;
                    object.mount_path = "";
                }
                if (message.id != null && message.hasOwnProperty("id"))
                    object.id = message.id;
                if (message.drive_id != null && message.hasOwnProperty("drive_id"))
                    object.drive_id = message.drive_id;
                if (message.path != null && message.hasOwnProperty("path"))
                    object.path = message.path;
                if (message.friendly_path != null && message.hasOwnProperty("friendly_path"))
                    object.friendly_path = message.friendly_path;
                if (message.label != null && message.hasOwnProperty("label"))
                    object.label = message.label;
                if (message.size_bytes != null && message.hasOwnProperty("size_bytes"))
                    if (typeof message.size_bytes === "number")
                        object.size_bytes = options.longs === String ? String(message.size_bytes) : message.size_bytes;
                    else
                        object.size_bytes = options.longs === String ? $util.Long.prototype.toString.call(message.size_bytes) : options.longs === Number ? new $util.LongBits(message.size_bytes.low >>> 0, message.size_bytes.high >>> 0).toNumber(true) : message.size_bytes;
                if (message.is_formattable != null && message.hasOwnProperty("is_formattable"))
                    object.is_formattable = message.is_formattable;
                if (message.is_read_only != null && message.hasOwnProperty("is_read_only"))
                    object.is_read_only = message.is_read_only;
                if (message.is_root_device != null && message.hasOwnProperty("is_root_device"))
                    object.is_root_device = message.is_root_device;
                if (message.content_type != null && message.hasOwnProperty("content_type"))
                    object.content_type = options.enums === String ? $root.EStorageBlockContentType[message.content_type] : message.content_type;
                if (message.filesystem_type != null && message.hasOwnProperty("filesystem_type"))
                    object.filesystem_type = options.enums === String ? $root.EStorageBlockFileSystemType[message.filesystem_type] : message.filesystem_type;
                if (message.mount_path != null && message.hasOwnProperty("mount_path"))
                    object.mount_path = message.mount_path;
                return object;
            };
    
            /**
             * Converts this BlockDevice to JSON.
             * @function toJSON
             * @memberof CMsgStorageDevicesData.BlockDevice
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BlockDevice.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return BlockDevice;
        })();
    
        return CMsgStorageDevicesData;
    })();
    
    $root.CCloud_PendingRemoteOperation = (function() {
    
        /**
         * Properties of a CCloud_PendingRemoteOperation.
         * @exports ICCloud_PendingRemoteOperation
         * @interface ICCloud_PendingRemoteOperation
         * @property {ECloudPendingRemoteOperation|null} [operation] CCloud_PendingRemoteOperation operation
         * @property {string|null} [machine_name] CCloud_PendingRemoteOperation machine_name
         * @property {number|Long|null} [client_id] CCloud_PendingRemoteOperation client_id
         * @property {number|null} [time_last_updated] CCloud_PendingRemoteOperation time_last_updated
         */
    
        /**
         * Constructs a new CCloud_PendingRemoteOperation.
         * @exports CCloud_PendingRemoteOperation
         * @classdesc Represents a CCloud_PendingRemoteOperation.
         * @implements ICCloud_PendingRemoteOperation
         * @constructor
         * @param {ICCloud_PendingRemoteOperation=} [properties] Properties to set
         */
        function CCloud_PendingRemoteOperation(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CCloud_PendingRemoteOperation operation.
         * @member {ECloudPendingRemoteOperation} operation
         * @memberof CCloud_PendingRemoteOperation
         * @instance
         */
        CCloud_PendingRemoteOperation.prototype.operation = 0;
    
        /**
         * CCloud_PendingRemoteOperation machine_name.
         * @member {string} machine_name
         * @memberof CCloud_PendingRemoteOperation
         * @instance
         */
        CCloud_PendingRemoteOperation.prototype.machine_name = "";
    
        /**
         * CCloud_PendingRemoteOperation client_id.
         * @member {number|Long} client_id
         * @memberof CCloud_PendingRemoteOperation
         * @instance
         */
        CCloud_PendingRemoteOperation.prototype.client_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CCloud_PendingRemoteOperation time_last_updated.
         * @member {number} time_last_updated
         * @memberof CCloud_PendingRemoteOperation
         * @instance
         */
        CCloud_PendingRemoteOperation.prototype.time_last_updated = 0;
    
        /**
         * Creates a new CCloud_PendingRemoteOperation instance using the specified properties.
         * @function create
         * @memberof CCloud_PendingRemoteOperation
         * @static
         * @param {ICCloud_PendingRemoteOperation=} [properties] Properties to set
         * @returns {CCloud_PendingRemoteOperation} CCloud_PendingRemoteOperation instance
         */
        CCloud_PendingRemoteOperation.create = function create(properties) {
            return new CCloud_PendingRemoteOperation(properties);
        };
    
        /**
         * Encodes the specified CCloud_PendingRemoteOperation message. Does not implicitly {@link CCloud_PendingRemoteOperation.verify|verify} messages.
         * @function encode
         * @memberof CCloud_PendingRemoteOperation
         * @static
         * @param {ICCloud_PendingRemoteOperation} message CCloud_PendingRemoteOperation message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_PendingRemoteOperation.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.operation != null && message.hasOwnProperty("operation"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.operation);
            if (message.machine_name != null && message.hasOwnProperty("machine_name"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.machine_name);
            if (message.client_id != null && message.hasOwnProperty("client_id"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.client_id);
            if (message.time_last_updated != null && message.hasOwnProperty("time_last_updated"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.time_last_updated);
            return writer;
        };
    
        /**
         * Encodes the specified CCloud_PendingRemoteOperation message, length delimited. Does not implicitly {@link CCloud_PendingRemoteOperation.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CCloud_PendingRemoteOperation
         * @static
         * @param {ICCloud_PendingRemoteOperation} message CCloud_PendingRemoteOperation message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CCloud_PendingRemoteOperation.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CCloud_PendingRemoteOperation message from the specified reader or buffer.
         * @function decode
         * @memberof CCloud_PendingRemoteOperation
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CCloud_PendingRemoteOperation} CCloud_PendingRemoteOperation
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_PendingRemoteOperation.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CCloud_PendingRemoteOperation();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.operation = reader.int32();
                    break;
                case 2:
                    message.machine_name = reader.string();
                    break;
                case 3:
                    message.client_id = reader.uint64();
                    break;
                case 4:
                    message.time_last_updated = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CCloud_PendingRemoteOperation message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CCloud_PendingRemoteOperation
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CCloud_PendingRemoteOperation} CCloud_PendingRemoteOperation
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CCloud_PendingRemoteOperation.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CCloud_PendingRemoteOperation message.
         * @function verify
         * @memberof CCloud_PendingRemoteOperation
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CCloud_PendingRemoteOperation.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.operation != null && message.hasOwnProperty("operation"))
                switch (message.operation) {
                default:
                    return "operation: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                    break;
                }
            if (message.machine_name != null && message.hasOwnProperty("machine_name"))
                if (!$util.isString(message.machine_name))
                    return "machine_name: string expected";
            if (message.client_id != null && message.hasOwnProperty("client_id"))
                if (!$util.isInteger(message.client_id) && !(message.client_id && $util.isInteger(message.client_id.low) && $util.isInteger(message.client_id.high)))
                    return "client_id: integer|Long expected";
            if (message.time_last_updated != null && message.hasOwnProperty("time_last_updated"))
                if (!$util.isInteger(message.time_last_updated))
                    return "time_last_updated: integer expected";
            return null;
        };
    
        /**
         * Creates a CCloud_PendingRemoteOperation message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CCloud_PendingRemoteOperation
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CCloud_PendingRemoteOperation} CCloud_PendingRemoteOperation
         */
        CCloud_PendingRemoteOperation.fromObject = function fromObject(object) {
            if (object instanceof $root.CCloud_PendingRemoteOperation)
                return object;
            var message = new $root.CCloud_PendingRemoteOperation();
            switch (object.operation) {
            case "k_ECloudPendingRemoteOperationNone":
            case 0:
                message.operation = 0;
                break;
            case "k_ECloudPendingRemoteOperationAppSessionActive":
            case 1:
                message.operation = 1;
                break;
            case "k_ECloudPendingRemoteOperationUploadInProgress":
            case 2:
                message.operation = 2;
                break;
            case "k_ECloudPendingRemoteOperationUploadPending":
            case 3:
                message.operation = 3;
                break;
            case "k_ECloudPendingRemoteOperationAppSessionSuspended":
            case 4:
                message.operation = 4;
                break;
            }
            if (object.machine_name != null)
                message.machine_name = String(object.machine_name);
            if (object.client_id != null)
                if ($util.Long)
                    (message.client_id = $util.Long.fromValue(object.client_id)).unsigned = true;
                else if (typeof object.client_id === "string")
                    message.client_id = parseInt(object.client_id, 10);
                else if (typeof object.client_id === "number")
                    message.client_id = object.client_id;
                else if (typeof object.client_id === "object")
                    message.client_id = new $util.LongBits(object.client_id.low >>> 0, object.client_id.high >>> 0).toNumber(true);
            if (object.time_last_updated != null)
                message.time_last_updated = object.time_last_updated >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CCloud_PendingRemoteOperation message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CCloud_PendingRemoteOperation
         * @static
         * @param {CCloud_PendingRemoteOperation} message CCloud_PendingRemoteOperation
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CCloud_PendingRemoteOperation.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.operation = options.enums === String ? "k_ECloudPendingRemoteOperationNone" : 0;
                object.machine_name = "";
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.client_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.client_id = options.longs === String ? "0" : 0;
                object.time_last_updated = 0;
            }
            if (message.operation != null && message.hasOwnProperty("operation"))
                object.operation = options.enums === String ? $root.ECloudPendingRemoteOperation[message.operation] : message.operation;
            if (message.machine_name != null && message.hasOwnProperty("machine_name"))
                object.machine_name = message.machine_name;
            if (message.client_id != null && message.hasOwnProperty("client_id"))
                if (typeof message.client_id === "number")
                    object.client_id = options.longs === String ? String(message.client_id) : message.client_id;
                else
                    object.client_id = options.longs === String ? $util.Long.prototype.toString.call(message.client_id) : options.longs === Number ? new $util.LongBits(message.client_id.low >>> 0, message.client_id.high >>> 0).toNumber(true) : message.client_id;
            if (message.time_last_updated != null && message.hasOwnProperty("time_last_updated"))
                object.time_last_updated = message.time_last_updated;
            return object;
        };
    
        /**
         * Converts this CCloud_PendingRemoteOperation to JSON.
         * @function toJSON
         * @memberof CCloud_PendingRemoteOperation
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CCloud_PendingRemoteOperation.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CCloud_PendingRemoteOperation;
    })();
    
    $root.CMsgCloudPendingRemoteOperations = (function() {
    
        /**
         * Properties of a CMsgCloudPendingRemoteOperations.
         * @exports ICMsgCloudPendingRemoteOperations
         * @interface ICMsgCloudPendingRemoteOperations
         * @property {Array.<ICCloud_PendingRemoteOperation>|null} [operations] CMsgCloudPendingRemoteOperations operations
         */
    
        /**
         * Constructs a new CMsgCloudPendingRemoteOperations.
         * @exports CMsgCloudPendingRemoteOperations
         * @classdesc Represents a CMsgCloudPendingRemoteOperations.
         * @implements ICMsgCloudPendingRemoteOperations
         * @constructor
         * @param {ICMsgCloudPendingRemoteOperations=} [properties] Properties to set
         */
        function CMsgCloudPendingRemoteOperations(properties) {
            this.operations = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgCloudPendingRemoteOperations operations.
         * @member {Array.<ICCloud_PendingRemoteOperation>} operations
         * @memberof CMsgCloudPendingRemoteOperations
         * @instance
         */
        CMsgCloudPendingRemoteOperations.prototype.operations = $util.emptyArray;
    
        /**
         * Creates a new CMsgCloudPendingRemoteOperations instance using the specified properties.
         * @function create
         * @memberof CMsgCloudPendingRemoteOperations
         * @static
         * @param {ICMsgCloudPendingRemoteOperations=} [properties] Properties to set
         * @returns {CMsgCloudPendingRemoteOperations} CMsgCloudPendingRemoteOperations instance
         */
        CMsgCloudPendingRemoteOperations.create = function create(properties) {
            return new CMsgCloudPendingRemoteOperations(properties);
        };
    
        /**
         * Encodes the specified CMsgCloudPendingRemoteOperations message. Does not implicitly {@link CMsgCloudPendingRemoteOperations.verify|verify} messages.
         * @function encode
         * @memberof CMsgCloudPendingRemoteOperations
         * @static
         * @param {ICMsgCloudPendingRemoteOperations} message CMsgCloudPendingRemoteOperations message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgCloudPendingRemoteOperations.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.operations != null && message.operations.length)
                for (var i = 0; i < message.operations.length; ++i)
                    $root.CCloud_PendingRemoteOperation.encode(message.operations[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CMsgCloudPendingRemoteOperations message, length delimited. Does not implicitly {@link CMsgCloudPendingRemoteOperations.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgCloudPendingRemoteOperations
         * @static
         * @param {ICMsgCloudPendingRemoteOperations} message CMsgCloudPendingRemoteOperations message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgCloudPendingRemoteOperations.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgCloudPendingRemoteOperations message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgCloudPendingRemoteOperations
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgCloudPendingRemoteOperations} CMsgCloudPendingRemoteOperations
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgCloudPendingRemoteOperations.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgCloudPendingRemoteOperations();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.operations && message.operations.length))
                        message.operations = [];
                    message.operations.push($root.CCloud_PendingRemoteOperation.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgCloudPendingRemoteOperations message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgCloudPendingRemoteOperations
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgCloudPendingRemoteOperations} CMsgCloudPendingRemoteOperations
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgCloudPendingRemoteOperations.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgCloudPendingRemoteOperations message.
         * @function verify
         * @memberof CMsgCloudPendingRemoteOperations
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgCloudPendingRemoteOperations.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.operations != null && message.hasOwnProperty("operations")) {
                if (!Array.isArray(message.operations))
                    return "operations: array expected";
                for (var i = 0; i < message.operations.length; ++i) {
                    var error = $root.CCloud_PendingRemoteOperation.verify(message.operations[i]);
                    if (error)
                        return "operations." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CMsgCloudPendingRemoteOperations message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgCloudPendingRemoteOperations
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgCloudPendingRemoteOperations} CMsgCloudPendingRemoteOperations
         */
        CMsgCloudPendingRemoteOperations.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgCloudPendingRemoteOperations)
                return object;
            var message = new $root.CMsgCloudPendingRemoteOperations();
            if (object.operations) {
                if (!Array.isArray(object.operations))
                    throw TypeError(".CMsgCloudPendingRemoteOperations.operations: array expected");
                message.operations = [];
                for (var i = 0; i < object.operations.length; ++i) {
                    if (typeof object.operations[i] !== "object")
                        throw TypeError(".CMsgCloudPendingRemoteOperations.operations: object expected");
                    message.operations[i] = $root.CCloud_PendingRemoteOperation.fromObject(object.operations[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgCloudPendingRemoteOperations message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgCloudPendingRemoteOperations
         * @static
         * @param {CMsgCloudPendingRemoteOperations} message CMsgCloudPendingRemoteOperations
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgCloudPendingRemoteOperations.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.operations = [];
            if (message.operations && message.operations.length) {
                object.operations = [];
                for (var j = 0; j < message.operations.length; ++j)
                    object.operations[j] = $root.CCloud_PendingRemoteOperation.toObject(message.operations[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CMsgCloudPendingRemoteOperations to JSON.
         * @function toJSON
         * @memberof CMsgCloudPendingRemoteOperations
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgCloudPendingRemoteOperations.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgCloudPendingRemoteOperations;
    })();
    
    $root.CMsgBluetoothDevicesData = (function() {
    
        /**
         * Properties of a CMsgBluetoothDevicesData.
         * @exports ICMsgBluetoothDevicesData
         * @interface ICMsgBluetoothDevicesData
         * @property {Array.<CMsgBluetoothDevicesData.IAdapter>|null} [adapters] CMsgBluetoothDevicesData adapters
         * @property {Array.<CMsgBluetoothDevicesData.IDevice>|null} [devices] CMsgBluetoothDevicesData devices
         */
    
        /**
         * Constructs a new CMsgBluetoothDevicesData.
         * @exports CMsgBluetoothDevicesData
         * @classdesc Represents a CMsgBluetoothDevicesData.
         * @implements ICMsgBluetoothDevicesData
         * @constructor
         * @param {ICMsgBluetoothDevicesData=} [properties] Properties to set
         */
        function CMsgBluetoothDevicesData(properties) {
            this.adapters = [];
            this.devices = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgBluetoothDevicesData adapters.
         * @member {Array.<CMsgBluetoothDevicesData.IAdapter>} adapters
         * @memberof CMsgBluetoothDevicesData
         * @instance
         */
        CMsgBluetoothDevicesData.prototype.adapters = $util.emptyArray;
    
        /**
         * CMsgBluetoothDevicesData devices.
         * @member {Array.<CMsgBluetoothDevicesData.IDevice>} devices
         * @memberof CMsgBluetoothDevicesData
         * @instance
         */
        CMsgBluetoothDevicesData.prototype.devices = $util.emptyArray;
    
        /**
         * Creates a new CMsgBluetoothDevicesData instance using the specified properties.
         * @function create
         * @memberof CMsgBluetoothDevicesData
         * @static
         * @param {ICMsgBluetoothDevicesData=} [properties] Properties to set
         * @returns {CMsgBluetoothDevicesData} CMsgBluetoothDevicesData instance
         */
        CMsgBluetoothDevicesData.create = function create(properties) {
            return new CMsgBluetoothDevicesData(properties);
        };
    
        /**
         * Encodes the specified CMsgBluetoothDevicesData message. Does not implicitly {@link CMsgBluetoothDevicesData.verify|verify} messages.
         * @function encode
         * @memberof CMsgBluetoothDevicesData
         * @static
         * @param {ICMsgBluetoothDevicesData} message CMsgBluetoothDevicesData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgBluetoothDevicesData.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.adapters != null && message.adapters.length)
                for (var i = 0; i < message.adapters.length; ++i)
                    $root.CMsgBluetoothDevicesData.Adapter.encode(message.adapters[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.devices != null && message.devices.length)
                for (var i = 0; i < message.devices.length; ++i)
                    $root.CMsgBluetoothDevicesData.Device.encode(message.devices[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CMsgBluetoothDevicesData message, length delimited. Does not implicitly {@link CMsgBluetoothDevicesData.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgBluetoothDevicesData
         * @static
         * @param {ICMsgBluetoothDevicesData} message CMsgBluetoothDevicesData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgBluetoothDevicesData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgBluetoothDevicesData message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgBluetoothDevicesData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgBluetoothDevicesData} CMsgBluetoothDevicesData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgBluetoothDevicesData.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgBluetoothDevicesData();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.adapters && message.adapters.length))
                        message.adapters = [];
                    message.adapters.push($root.CMsgBluetoothDevicesData.Adapter.decode(reader, reader.uint32()));
                    break;
                case 2:
                    if (!(message.devices && message.devices.length))
                        message.devices = [];
                    message.devices.push($root.CMsgBluetoothDevicesData.Device.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgBluetoothDevicesData message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgBluetoothDevicesData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgBluetoothDevicesData} CMsgBluetoothDevicesData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgBluetoothDevicesData.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgBluetoothDevicesData message.
         * @function verify
         * @memberof CMsgBluetoothDevicesData
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgBluetoothDevicesData.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.adapters != null && message.hasOwnProperty("adapters")) {
                if (!Array.isArray(message.adapters))
                    return "adapters: array expected";
                for (var i = 0; i < message.adapters.length; ++i) {
                    var error = $root.CMsgBluetoothDevicesData.Adapter.verify(message.adapters[i]);
                    if (error)
                        return "adapters." + error;
                }
            }
            if (message.devices != null && message.hasOwnProperty("devices")) {
                if (!Array.isArray(message.devices))
                    return "devices: array expected";
                for (var i = 0; i < message.devices.length; ++i) {
                    var error = $root.CMsgBluetoothDevicesData.Device.verify(message.devices[i]);
                    if (error)
                        return "devices." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CMsgBluetoothDevicesData message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgBluetoothDevicesData
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgBluetoothDevicesData} CMsgBluetoothDevicesData
         */
        CMsgBluetoothDevicesData.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgBluetoothDevicesData)
                return object;
            var message = new $root.CMsgBluetoothDevicesData();
            if (object.adapters) {
                if (!Array.isArray(object.adapters))
                    throw TypeError(".CMsgBluetoothDevicesData.adapters: array expected");
                message.adapters = [];
                for (var i = 0; i < object.adapters.length; ++i) {
                    if (typeof object.adapters[i] !== "object")
                        throw TypeError(".CMsgBluetoothDevicesData.adapters: object expected");
                    message.adapters[i] = $root.CMsgBluetoothDevicesData.Adapter.fromObject(object.adapters[i]);
                }
            }
            if (object.devices) {
                if (!Array.isArray(object.devices))
                    throw TypeError(".CMsgBluetoothDevicesData.devices: array expected");
                message.devices = [];
                for (var i = 0; i < object.devices.length; ++i) {
                    if (typeof object.devices[i] !== "object")
                        throw TypeError(".CMsgBluetoothDevicesData.devices: object expected");
                    message.devices[i] = $root.CMsgBluetoothDevicesData.Device.fromObject(object.devices[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgBluetoothDevicesData message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgBluetoothDevicesData
         * @static
         * @param {CMsgBluetoothDevicesData} message CMsgBluetoothDevicesData
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgBluetoothDevicesData.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.adapters = [];
                object.devices = [];
            }
            if (message.adapters && message.adapters.length) {
                object.adapters = [];
                for (var j = 0; j < message.adapters.length; ++j)
                    object.adapters[j] = $root.CMsgBluetoothDevicesData.Adapter.toObject(message.adapters[j], options);
            }
            if (message.devices && message.devices.length) {
                object.devices = [];
                for (var j = 0; j < message.devices.length; ++j)
                    object.devices[j] = $root.CMsgBluetoothDevicesData.Device.toObject(message.devices[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CMsgBluetoothDevicesData to JSON.
         * @function toJSON
         * @memberof CMsgBluetoothDevicesData
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgBluetoothDevicesData.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        CMsgBluetoothDevicesData.Adapter = (function() {
    
            /**
             * Properties of an Adapter.
             * @memberof CMsgBluetoothDevicesData
             * @interface IAdapter
             * @property {number|null} [id] Adapter id
             * @property {string|null} [mac] Adapter mac
             * @property {string|null} [name] Adapter name
             * @property {boolean|null} [is_enabled] Adapter is_enabled
             * @property {boolean|null} [is_discovering] Adapter is_discovering
             */
    
            /**
             * Constructs a new Adapter.
             * @memberof CMsgBluetoothDevicesData
             * @classdesc Represents an Adapter.
             * @implements IAdapter
             * @constructor
             * @param {CMsgBluetoothDevicesData.IAdapter=} [properties] Properties to set
             */
            function Adapter(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * Adapter id.
             * @member {number} id
             * @memberof CMsgBluetoothDevicesData.Adapter
             * @instance
             */
            Adapter.prototype.id = 0;
    
            /**
             * Adapter mac.
             * @member {string} mac
             * @memberof CMsgBluetoothDevicesData.Adapter
             * @instance
             */
            Adapter.prototype.mac = "";
    
            /**
             * Adapter name.
             * @member {string} name
             * @memberof CMsgBluetoothDevicesData.Adapter
             * @instance
             */
            Adapter.prototype.name = "";
    
            /**
             * Adapter is_enabled.
             * @member {boolean} is_enabled
             * @memberof CMsgBluetoothDevicesData.Adapter
             * @instance
             */
            Adapter.prototype.is_enabled = false;
    
            /**
             * Adapter is_discovering.
             * @member {boolean} is_discovering
             * @memberof CMsgBluetoothDevicesData.Adapter
             * @instance
             */
            Adapter.prototype.is_discovering = false;
    
            /**
             * Creates a new Adapter instance using the specified properties.
             * @function create
             * @memberof CMsgBluetoothDevicesData.Adapter
             * @static
             * @param {CMsgBluetoothDevicesData.IAdapter=} [properties] Properties to set
             * @returns {CMsgBluetoothDevicesData.Adapter} Adapter instance
             */
            Adapter.create = function create(properties) {
                return new Adapter(properties);
            };
    
            /**
             * Encodes the specified Adapter message. Does not implicitly {@link CMsgBluetoothDevicesData.Adapter.verify|verify} messages.
             * @function encode
             * @memberof CMsgBluetoothDevicesData.Adapter
             * @static
             * @param {CMsgBluetoothDevicesData.IAdapter} message Adapter message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Adapter.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.id != null && message.hasOwnProperty("id"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.id);
                if (message.mac != null && message.hasOwnProperty("mac"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.mac);
                if (message.name != null && message.hasOwnProperty("name"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);
                if (message.is_enabled != null && message.hasOwnProperty("is_enabled"))
                    writer.uint32(/* id 4, wireType 0 =*/32).bool(message.is_enabled);
                if (message.is_discovering != null && message.hasOwnProperty("is_discovering"))
                    writer.uint32(/* id 5, wireType 0 =*/40).bool(message.is_discovering);
                return writer;
            };
    
            /**
             * Encodes the specified Adapter message, length delimited. Does not implicitly {@link CMsgBluetoothDevicesData.Adapter.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgBluetoothDevicesData.Adapter
             * @static
             * @param {CMsgBluetoothDevicesData.IAdapter} message Adapter message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Adapter.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes an Adapter message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgBluetoothDevicesData.Adapter
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgBluetoothDevicesData.Adapter} Adapter
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Adapter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgBluetoothDevicesData.Adapter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.id = reader.uint32();
                        break;
                    case 2:
                        message.mac = reader.string();
                        break;
                    case 3:
                        message.name = reader.string();
                        break;
                    case 4:
                        message.is_enabled = reader.bool();
                        break;
                    case 5:
                        message.is_discovering = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes an Adapter message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgBluetoothDevicesData.Adapter
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgBluetoothDevicesData.Adapter} Adapter
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Adapter.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies an Adapter message.
             * @function verify
             * @memberof CMsgBluetoothDevicesData.Adapter
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Adapter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.id != null && message.hasOwnProperty("id"))
                    if (!$util.isInteger(message.id))
                        return "id: integer expected";
                if (message.mac != null && message.hasOwnProperty("mac"))
                    if (!$util.isString(message.mac))
                        return "mac: string expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.is_enabled != null && message.hasOwnProperty("is_enabled"))
                    if (typeof message.is_enabled !== "boolean")
                        return "is_enabled: boolean expected";
                if (message.is_discovering != null && message.hasOwnProperty("is_discovering"))
                    if (typeof message.is_discovering !== "boolean")
                        return "is_discovering: boolean expected";
                return null;
            };
    
            /**
             * Creates an Adapter message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgBluetoothDevicesData.Adapter
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgBluetoothDevicesData.Adapter} Adapter
             */
            Adapter.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgBluetoothDevicesData.Adapter)
                    return object;
                var message = new $root.CMsgBluetoothDevicesData.Adapter();
                if (object.id != null)
                    message.id = object.id >>> 0;
                if (object.mac != null)
                    message.mac = String(object.mac);
                if (object.name != null)
                    message.name = String(object.name);
                if (object.is_enabled != null)
                    message.is_enabled = Boolean(object.is_enabled);
                if (object.is_discovering != null)
                    message.is_discovering = Boolean(object.is_discovering);
                return message;
            };
    
            /**
             * Creates a plain object from an Adapter message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgBluetoothDevicesData.Adapter
             * @static
             * @param {CMsgBluetoothDevicesData.Adapter} message Adapter
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Adapter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.id = 0;
                    object.mac = "";
                    object.name = "";
                    object.is_enabled = false;
                    object.is_discovering = false;
                }
                if (message.id != null && message.hasOwnProperty("id"))
                    object.id = message.id;
                if (message.mac != null && message.hasOwnProperty("mac"))
                    object.mac = message.mac;
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.is_enabled != null && message.hasOwnProperty("is_enabled"))
                    object.is_enabled = message.is_enabled;
                if (message.is_discovering != null && message.hasOwnProperty("is_discovering"))
                    object.is_discovering = message.is_discovering;
                return object;
            };
    
            /**
             * Converts this Adapter to JSON.
             * @function toJSON
             * @memberof CMsgBluetoothDevicesData.Adapter
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Adapter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return Adapter;
        })();
    
        CMsgBluetoothDevicesData.Device = (function() {
    
            /**
             * Properties of a Device.
             * @memberof CMsgBluetoothDevicesData
             * @interface IDevice
             * @property {number|null} [id] Device id
             * @property {number|null} [adapter_id] Device adapter_id
             * @property {EBluetoothDeviceType|null} [etype] Device etype
             * @property {string|null} [mac] Device mac
             * @property {string|null} [name] Device name
             * @property {boolean|null} [is_connected] Device is_connected
             * @property {boolean|null} [is_paired] Device is_paired
             * @property {number|null} [strength_raw] Device strength_raw
             */
    
            /**
             * Constructs a new Device.
             * @memberof CMsgBluetoothDevicesData
             * @classdesc Represents a Device.
             * @implements IDevice
             * @constructor
             * @param {CMsgBluetoothDevicesData.IDevice=} [properties] Properties to set
             */
            function Device(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * Device id.
             * @member {number} id
             * @memberof CMsgBluetoothDevicesData.Device
             * @instance
             */
            Device.prototype.id = 0;
    
            /**
             * Device adapter_id.
             * @member {number} adapter_id
             * @memberof CMsgBluetoothDevicesData.Device
             * @instance
             */
            Device.prototype.adapter_id = 0;
    
            /**
             * Device etype.
             * @member {EBluetoothDeviceType} etype
             * @memberof CMsgBluetoothDevicesData.Device
             * @instance
             */
            Device.prototype.etype = 0;
    
            /**
             * Device mac.
             * @member {string} mac
             * @memberof CMsgBluetoothDevicesData.Device
             * @instance
             */
            Device.prototype.mac = "";
    
            /**
             * Device name.
             * @member {string} name
             * @memberof CMsgBluetoothDevicesData.Device
             * @instance
             */
            Device.prototype.name = "";
    
            /**
             * Device is_connected.
             * @member {boolean} is_connected
             * @memberof CMsgBluetoothDevicesData.Device
             * @instance
             */
            Device.prototype.is_connected = false;
    
            /**
             * Device is_paired.
             * @member {boolean} is_paired
             * @memberof CMsgBluetoothDevicesData.Device
             * @instance
             */
            Device.prototype.is_paired = false;
    
            /**
             * Device strength_raw.
             * @member {number} strength_raw
             * @memberof CMsgBluetoothDevicesData.Device
             * @instance
             */
            Device.prototype.strength_raw = 0;
    
            /**
             * Creates a new Device instance using the specified properties.
             * @function create
             * @memberof CMsgBluetoothDevicesData.Device
             * @static
             * @param {CMsgBluetoothDevicesData.IDevice=} [properties] Properties to set
             * @returns {CMsgBluetoothDevicesData.Device} Device instance
             */
            Device.create = function create(properties) {
                return new Device(properties);
            };
    
            /**
             * Encodes the specified Device message. Does not implicitly {@link CMsgBluetoothDevicesData.Device.verify|verify} messages.
             * @function encode
             * @memberof CMsgBluetoothDevicesData.Device
             * @static
             * @param {CMsgBluetoothDevicesData.IDevice} message Device message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Device.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.id != null && message.hasOwnProperty("id"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.id);
                if (message.adapter_id != null && message.hasOwnProperty("adapter_id"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.adapter_id);
                if (message.etype != null && message.hasOwnProperty("etype"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.etype);
                if (message.mac != null && message.hasOwnProperty("mac"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.mac);
                if (message.name != null && message.hasOwnProperty("name"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.name);
                if (message.is_connected != null && message.hasOwnProperty("is_connected"))
                    writer.uint32(/* id 6, wireType 0 =*/48).bool(message.is_connected);
                if (message.is_paired != null && message.hasOwnProperty("is_paired"))
                    writer.uint32(/* id 7, wireType 0 =*/56).bool(message.is_paired);
                if (message.strength_raw != null && message.hasOwnProperty("strength_raw"))
                    writer.uint32(/* id 8, wireType 0 =*/64).int32(message.strength_raw);
                return writer;
            };
    
            /**
             * Encodes the specified Device message, length delimited. Does not implicitly {@link CMsgBluetoothDevicesData.Device.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgBluetoothDevicesData.Device
             * @static
             * @param {CMsgBluetoothDevicesData.IDevice} message Device message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Device.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a Device message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgBluetoothDevicesData.Device
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgBluetoothDevicesData.Device} Device
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Device.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgBluetoothDevicesData.Device();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.id = reader.uint32();
                        break;
                    case 2:
                        message.adapter_id = reader.uint32();
                        break;
                    case 3:
                        message.etype = reader.int32();
                        break;
                    case 4:
                        message.mac = reader.string();
                        break;
                    case 5:
                        message.name = reader.string();
                        break;
                    case 6:
                        message.is_connected = reader.bool();
                        break;
                    case 7:
                        message.is_paired = reader.bool();
                        break;
                    case 8:
                        message.strength_raw = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a Device message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgBluetoothDevicesData.Device
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgBluetoothDevicesData.Device} Device
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Device.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a Device message.
             * @function verify
             * @memberof CMsgBluetoothDevicesData.Device
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Device.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.id != null && message.hasOwnProperty("id"))
                    if (!$util.isInteger(message.id))
                        return "id: integer expected";
                if (message.adapter_id != null && message.hasOwnProperty("adapter_id"))
                    if (!$util.isInteger(message.adapter_id))
                        return "adapter_id: integer expected";
                if (message.etype != null && message.hasOwnProperty("etype"))
                    switch (message.etype) {
                    default:
                        return "etype: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                        break;
                    }
                if (message.mac != null && message.hasOwnProperty("mac"))
                    if (!$util.isString(message.mac))
                        return "mac: string expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.is_connected != null && message.hasOwnProperty("is_connected"))
                    if (typeof message.is_connected !== "boolean")
                        return "is_connected: boolean expected";
                if (message.is_paired != null && message.hasOwnProperty("is_paired"))
                    if (typeof message.is_paired !== "boolean")
                        return "is_paired: boolean expected";
                if (message.strength_raw != null && message.hasOwnProperty("strength_raw"))
                    if (!$util.isInteger(message.strength_raw))
                        return "strength_raw: integer expected";
                return null;
            };
    
            /**
             * Creates a Device message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgBluetoothDevicesData.Device
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgBluetoothDevicesData.Device} Device
             */
            Device.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgBluetoothDevicesData.Device)
                    return object;
                var message = new $root.CMsgBluetoothDevicesData.Device();
                if (object.id != null)
                    message.id = object.id >>> 0;
                if (object.adapter_id != null)
                    message.adapter_id = object.adapter_id >>> 0;
                switch (object.etype) {
                case "k_BluetoothDeviceType_Invalid":
                case 0:
                    message.etype = 0;
                    break;
                case "k_BluetoothDeviceType_Unknown":
                case 1:
                    message.etype = 1;
                    break;
                case "k_BluetoothDeviceType_Phone":
                case 2:
                    message.etype = 2;
                    break;
                case "k_BluetoothDeviceType_Computer":
                case 3:
                    message.etype = 3;
                    break;
                case "k_BluetoothDeviceType_Headset":
                case 4:
                    message.etype = 4;
                    break;
                case "k_BluetoothDeviceType_Headphones":
                case 5:
                    message.etype = 5;
                    break;
                case "k_BluetoothDeviceType_Speakers":
                case 6:
                    message.etype = 6;
                    break;
                case "k_BluetoothDeviceType_OtherAudio":
                case 7:
                    message.etype = 7;
                    break;
                case "k_BluetoothDeviceType_Mouse":
                case 8:
                    message.etype = 8;
                    break;
                case "k_BluetoothDeviceType_Joystick":
                case 9:
                    message.etype = 9;
                    break;
                case "k_BluetoothDeviceType_Gamepad":
                case 10:
                    message.etype = 10;
                    break;
                case "k_BluetoothDeviceType_Keyboard":
                case 11:
                    message.etype = 11;
                    break;
                }
                if (object.mac != null)
                    message.mac = String(object.mac);
                if (object.name != null)
                    message.name = String(object.name);
                if (object.is_connected != null)
                    message.is_connected = Boolean(object.is_connected);
                if (object.is_paired != null)
                    message.is_paired = Boolean(object.is_paired);
                if (object.strength_raw != null)
                    message.strength_raw = object.strength_raw | 0;
                return message;
            };
    
            /**
             * Creates a plain object from a Device message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgBluetoothDevicesData.Device
             * @static
             * @param {CMsgBluetoothDevicesData.Device} message Device
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Device.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.id = 0;
                    object.adapter_id = 0;
                    object.etype = options.enums === String ? "k_BluetoothDeviceType_Invalid" : 0;
                    object.mac = "";
                    object.name = "";
                    object.is_connected = false;
                    object.is_paired = false;
                    object.strength_raw = 0;
                }
                if (message.id != null && message.hasOwnProperty("id"))
                    object.id = message.id;
                if (message.adapter_id != null && message.hasOwnProperty("adapter_id"))
                    object.adapter_id = message.adapter_id;
                if (message.etype != null && message.hasOwnProperty("etype"))
                    object.etype = options.enums === String ? $root.EBluetoothDeviceType[message.etype] : message.etype;
                if (message.mac != null && message.hasOwnProperty("mac"))
                    object.mac = message.mac;
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.is_connected != null && message.hasOwnProperty("is_connected"))
                    object.is_connected = message.is_connected;
                if (message.is_paired != null && message.hasOwnProperty("is_paired"))
                    object.is_paired = message.is_paired;
                if (message.strength_raw != null && message.hasOwnProperty("strength_raw"))
                    object.strength_raw = message.strength_raw;
                return object;
            };
    
            /**
             * Converts this Device to JSON.
             * @function toJSON
             * @memberof CMsgBluetoothDevicesData.Device
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Device.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return Device;
        })();
    
        return CMsgBluetoothDevicesData;
    })();
    
    $root.CMsgBluetoothSettings = (function() {
    
        /**
         * Properties of a CMsgBluetoothSettings.
         * @exports ICMsgBluetoothSettings
         * @interface ICMsgBluetoothSettings
         * @property {boolean|null} [is_enabled] CMsgBluetoothSettings is_enabled
         */
    
        /**
         * Constructs a new CMsgBluetoothSettings.
         * @exports CMsgBluetoothSettings
         * @classdesc Represents a CMsgBluetoothSettings.
         * @implements ICMsgBluetoothSettings
         * @constructor
         * @param {ICMsgBluetoothSettings=} [properties] Properties to set
         */
        function CMsgBluetoothSettings(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgBluetoothSettings is_enabled.
         * @member {boolean} is_enabled
         * @memberof CMsgBluetoothSettings
         * @instance
         */
        CMsgBluetoothSettings.prototype.is_enabled = false;
    
        /**
         * Creates a new CMsgBluetoothSettings instance using the specified properties.
         * @function create
         * @memberof CMsgBluetoothSettings
         * @static
         * @param {ICMsgBluetoothSettings=} [properties] Properties to set
         * @returns {CMsgBluetoothSettings} CMsgBluetoothSettings instance
         */
        CMsgBluetoothSettings.create = function create(properties) {
            return new CMsgBluetoothSettings(properties);
        };
    
        /**
         * Encodes the specified CMsgBluetoothSettings message. Does not implicitly {@link CMsgBluetoothSettings.verify|verify} messages.
         * @function encode
         * @memberof CMsgBluetoothSettings
         * @static
         * @param {ICMsgBluetoothSettings} message CMsgBluetoothSettings message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgBluetoothSettings.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.is_enabled != null && message.hasOwnProperty("is_enabled"))
                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.is_enabled);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgBluetoothSettings message, length delimited. Does not implicitly {@link CMsgBluetoothSettings.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgBluetoothSettings
         * @static
         * @param {ICMsgBluetoothSettings} message CMsgBluetoothSettings message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgBluetoothSettings.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgBluetoothSettings message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgBluetoothSettings
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgBluetoothSettings} CMsgBluetoothSettings
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgBluetoothSettings.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgBluetoothSettings();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.is_enabled = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgBluetoothSettings message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgBluetoothSettings
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgBluetoothSettings} CMsgBluetoothSettings
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgBluetoothSettings.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgBluetoothSettings message.
         * @function verify
         * @memberof CMsgBluetoothSettings
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgBluetoothSettings.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.is_enabled != null && message.hasOwnProperty("is_enabled"))
                if (typeof message.is_enabled !== "boolean")
                    return "is_enabled: boolean expected";
            return null;
        };
    
        /**
         * Creates a CMsgBluetoothSettings message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgBluetoothSettings
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgBluetoothSettings} CMsgBluetoothSettings
         */
        CMsgBluetoothSettings.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgBluetoothSettings)
                return object;
            var message = new $root.CMsgBluetoothSettings();
            if (object.is_enabled != null)
                message.is_enabled = Boolean(object.is_enabled);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgBluetoothSettings message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgBluetoothSettings
         * @static
         * @param {CMsgBluetoothSettings} message CMsgBluetoothSettings
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgBluetoothSettings.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.is_enabled = false;
            if (message.is_enabled != null && message.hasOwnProperty("is_enabled"))
                object.is_enabled = message.is_enabled;
            return object;
        };
    
        /**
         * Converts this CMsgBluetoothSettings to JSON.
         * @function toJSON
         * @memberof CMsgBluetoothSettings
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgBluetoothSettings.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgBluetoothSettings;
    })();
    
    $root.CMsgSystemPerfDiagnosticEntry = (function() {
    
        /**
         * Properties of a CMsgSystemPerfDiagnosticEntry.
         * @exports ICMsgSystemPerfDiagnosticEntry
         * @interface ICMsgSystemPerfDiagnosticEntry
         * @property {string|null} [name] CMsgSystemPerfDiagnosticEntry name
         * @property {string|null} [value] CMsgSystemPerfDiagnosticEntry value
         */
    
        /**
         * Constructs a new CMsgSystemPerfDiagnosticEntry.
         * @exports CMsgSystemPerfDiagnosticEntry
         * @classdesc Represents a CMsgSystemPerfDiagnosticEntry.
         * @implements ICMsgSystemPerfDiagnosticEntry
         * @constructor
         * @param {ICMsgSystemPerfDiagnosticEntry=} [properties] Properties to set
         */
        function CMsgSystemPerfDiagnosticEntry(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSystemPerfDiagnosticEntry name.
         * @member {string} name
         * @memberof CMsgSystemPerfDiagnosticEntry
         * @instance
         */
        CMsgSystemPerfDiagnosticEntry.prototype.name = "";
    
        /**
         * CMsgSystemPerfDiagnosticEntry value.
         * @member {string} value
         * @memberof CMsgSystemPerfDiagnosticEntry
         * @instance
         */
        CMsgSystemPerfDiagnosticEntry.prototype.value = "";
    
        /**
         * Creates a new CMsgSystemPerfDiagnosticEntry instance using the specified properties.
         * @function create
         * @memberof CMsgSystemPerfDiagnosticEntry
         * @static
         * @param {ICMsgSystemPerfDiagnosticEntry=} [properties] Properties to set
         * @returns {CMsgSystemPerfDiagnosticEntry} CMsgSystemPerfDiagnosticEntry instance
         */
        CMsgSystemPerfDiagnosticEntry.create = function create(properties) {
            return new CMsgSystemPerfDiagnosticEntry(properties);
        };
    
        /**
         * Encodes the specified CMsgSystemPerfDiagnosticEntry message. Does not implicitly {@link CMsgSystemPerfDiagnosticEntry.verify|verify} messages.
         * @function encode
         * @memberof CMsgSystemPerfDiagnosticEntry
         * @static
         * @param {ICMsgSystemPerfDiagnosticEntry} message CMsgSystemPerfDiagnosticEntry message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSystemPerfDiagnosticEntry.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.name != null && message.hasOwnProperty("name"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
            if (message.value != null && message.hasOwnProperty("value"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSystemPerfDiagnosticEntry message, length delimited. Does not implicitly {@link CMsgSystemPerfDiagnosticEntry.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSystemPerfDiagnosticEntry
         * @static
         * @param {ICMsgSystemPerfDiagnosticEntry} message CMsgSystemPerfDiagnosticEntry message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSystemPerfDiagnosticEntry.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSystemPerfDiagnosticEntry message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSystemPerfDiagnosticEntry
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSystemPerfDiagnosticEntry} CMsgSystemPerfDiagnosticEntry
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSystemPerfDiagnosticEntry.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSystemPerfDiagnosticEntry();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.name = reader.string();
                    break;
                case 2:
                    message.value = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSystemPerfDiagnosticEntry message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSystemPerfDiagnosticEntry
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSystemPerfDiagnosticEntry} CMsgSystemPerfDiagnosticEntry
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSystemPerfDiagnosticEntry.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSystemPerfDiagnosticEntry message.
         * @function verify
         * @memberof CMsgSystemPerfDiagnosticEntry
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSystemPerfDiagnosticEntry.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.name != null && message.hasOwnProperty("name"))
                if (!$util.isString(message.name))
                    return "name: string expected";
            if (message.value != null && message.hasOwnProperty("value"))
                if (!$util.isString(message.value))
                    return "value: string expected";
            return null;
        };
    
        /**
         * Creates a CMsgSystemPerfDiagnosticEntry message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSystemPerfDiagnosticEntry
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSystemPerfDiagnosticEntry} CMsgSystemPerfDiagnosticEntry
         */
        CMsgSystemPerfDiagnosticEntry.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSystemPerfDiagnosticEntry)
                return object;
            var message = new $root.CMsgSystemPerfDiagnosticEntry();
            if (object.name != null)
                message.name = String(object.name);
            if (object.value != null)
                message.value = String(object.value);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSystemPerfDiagnosticEntry message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSystemPerfDiagnosticEntry
         * @static
         * @param {CMsgSystemPerfDiagnosticEntry} message CMsgSystemPerfDiagnosticEntry
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSystemPerfDiagnosticEntry.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.name = "";
                object.value = "";
            }
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
            if (message.value != null && message.hasOwnProperty("value"))
                object.value = message.value;
            return object;
        };
    
        /**
         * Converts this CMsgSystemPerfDiagnosticEntry to JSON.
         * @function toJSON
         * @memberof CMsgSystemPerfDiagnosticEntry
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSystemPerfDiagnosticEntry.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgSystemPerfDiagnosticEntry;
    })();
    
    $root.CMsgSystemPerfDiagnosticInfo = (function() {
    
        /**
         * Properties of a CMsgSystemPerfDiagnosticInfo.
         * @exports ICMsgSystemPerfDiagnosticInfo
         * @interface ICMsgSystemPerfDiagnosticInfo
         * @property {Array.<ICMsgSystemPerfDiagnosticEntry>|null} [entries] CMsgSystemPerfDiagnosticInfo entries
         */
    
        /**
         * Constructs a new CMsgSystemPerfDiagnosticInfo.
         * @exports CMsgSystemPerfDiagnosticInfo
         * @classdesc Represents a CMsgSystemPerfDiagnosticInfo.
         * @implements ICMsgSystemPerfDiagnosticInfo
         * @constructor
         * @param {ICMsgSystemPerfDiagnosticInfo=} [properties] Properties to set
         */
        function CMsgSystemPerfDiagnosticInfo(properties) {
            this.entries = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSystemPerfDiagnosticInfo entries.
         * @member {Array.<ICMsgSystemPerfDiagnosticEntry>} entries
         * @memberof CMsgSystemPerfDiagnosticInfo
         * @instance
         */
        CMsgSystemPerfDiagnosticInfo.prototype.entries = $util.emptyArray;
    
        /**
         * Creates a new CMsgSystemPerfDiagnosticInfo instance using the specified properties.
         * @function create
         * @memberof CMsgSystemPerfDiagnosticInfo
         * @static
         * @param {ICMsgSystemPerfDiagnosticInfo=} [properties] Properties to set
         * @returns {CMsgSystemPerfDiagnosticInfo} CMsgSystemPerfDiagnosticInfo instance
         */
        CMsgSystemPerfDiagnosticInfo.create = function create(properties) {
            return new CMsgSystemPerfDiagnosticInfo(properties);
        };
    
        /**
         * Encodes the specified CMsgSystemPerfDiagnosticInfo message. Does not implicitly {@link CMsgSystemPerfDiagnosticInfo.verify|verify} messages.
         * @function encode
         * @memberof CMsgSystemPerfDiagnosticInfo
         * @static
         * @param {ICMsgSystemPerfDiagnosticInfo} message CMsgSystemPerfDiagnosticInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSystemPerfDiagnosticInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.entries != null && message.entries.length)
                for (var i = 0; i < message.entries.length; ++i)
                    $root.CMsgSystemPerfDiagnosticEntry.encode(message.entries[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSystemPerfDiagnosticInfo message, length delimited. Does not implicitly {@link CMsgSystemPerfDiagnosticInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSystemPerfDiagnosticInfo
         * @static
         * @param {ICMsgSystemPerfDiagnosticInfo} message CMsgSystemPerfDiagnosticInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSystemPerfDiagnosticInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSystemPerfDiagnosticInfo message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSystemPerfDiagnosticInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSystemPerfDiagnosticInfo} CMsgSystemPerfDiagnosticInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSystemPerfDiagnosticInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSystemPerfDiagnosticInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.entries && message.entries.length))
                        message.entries = [];
                    message.entries.push($root.CMsgSystemPerfDiagnosticEntry.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSystemPerfDiagnosticInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSystemPerfDiagnosticInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSystemPerfDiagnosticInfo} CMsgSystemPerfDiagnosticInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSystemPerfDiagnosticInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSystemPerfDiagnosticInfo message.
         * @function verify
         * @memberof CMsgSystemPerfDiagnosticInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSystemPerfDiagnosticInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.entries != null && message.hasOwnProperty("entries")) {
                if (!Array.isArray(message.entries))
                    return "entries: array expected";
                for (var i = 0; i < message.entries.length; ++i) {
                    var error = $root.CMsgSystemPerfDiagnosticEntry.verify(message.entries[i]);
                    if (error)
                        return "entries." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CMsgSystemPerfDiagnosticInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSystemPerfDiagnosticInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSystemPerfDiagnosticInfo} CMsgSystemPerfDiagnosticInfo
         */
        CMsgSystemPerfDiagnosticInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSystemPerfDiagnosticInfo)
                return object;
            var message = new $root.CMsgSystemPerfDiagnosticInfo();
            if (object.entries) {
                if (!Array.isArray(object.entries))
                    throw TypeError(".CMsgSystemPerfDiagnosticInfo.entries: array expected");
                message.entries = [];
                for (var i = 0; i < object.entries.length; ++i) {
                    if (typeof object.entries[i] !== "object")
                        throw TypeError(".CMsgSystemPerfDiagnosticInfo.entries: object expected");
                    message.entries[i] = $root.CMsgSystemPerfDiagnosticEntry.fromObject(object.entries[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSystemPerfDiagnosticInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSystemPerfDiagnosticInfo
         * @static
         * @param {CMsgSystemPerfDiagnosticInfo} message CMsgSystemPerfDiagnosticInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSystemPerfDiagnosticInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.entries = [];
            if (message.entries && message.entries.length) {
                object.entries = [];
                for (var j = 0; j < message.entries.length; ++j)
                    object.entries[j] = $root.CMsgSystemPerfDiagnosticEntry.toObject(message.entries[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CMsgSystemPerfDiagnosticInfo to JSON.
         * @function toJSON
         * @memberof CMsgSystemPerfDiagnosticInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSystemPerfDiagnosticInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgSystemPerfDiagnosticInfo;
    })();
    
    $root.CMsgSystemPerfSettings = (function() {
    
        /**
         * Properties of a CMsgSystemPerfSettings.
         * @exports ICMsgSystemPerfSettings
         * @interface ICMsgSystemPerfSettings
         * @property {number|null} [diagnostic_update_rate] CMsgSystemPerfSettings diagnostic_update_rate
         * @property {boolean|null} [is_shark_mode] CMsgSystemPerfSettings is_shark_mode
         */
    
        /**
         * Constructs a new CMsgSystemPerfSettings.
         * @exports CMsgSystemPerfSettings
         * @classdesc Represents a CMsgSystemPerfSettings.
         * @implements ICMsgSystemPerfSettings
         * @constructor
         * @param {ICMsgSystemPerfSettings=} [properties] Properties to set
         */
        function CMsgSystemPerfSettings(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSystemPerfSettings diagnostic_update_rate.
         * @member {number} diagnostic_update_rate
         * @memberof CMsgSystemPerfSettings
         * @instance
         */
        CMsgSystemPerfSettings.prototype.diagnostic_update_rate = 0;
    
        /**
         * CMsgSystemPerfSettings is_shark_mode.
         * @member {boolean} is_shark_mode
         * @memberof CMsgSystemPerfSettings
         * @instance
         */
        CMsgSystemPerfSettings.prototype.is_shark_mode = false;
    
        /**
         * Creates a new CMsgSystemPerfSettings instance using the specified properties.
         * @function create
         * @memberof CMsgSystemPerfSettings
         * @static
         * @param {ICMsgSystemPerfSettings=} [properties] Properties to set
         * @returns {CMsgSystemPerfSettings} CMsgSystemPerfSettings instance
         */
        CMsgSystemPerfSettings.create = function create(properties) {
            return new CMsgSystemPerfSettings(properties);
        };
    
        /**
         * Encodes the specified CMsgSystemPerfSettings message. Does not implicitly {@link CMsgSystemPerfSettings.verify|verify} messages.
         * @function encode
         * @memberof CMsgSystemPerfSettings
         * @static
         * @param {ICMsgSystemPerfSettings} message CMsgSystemPerfSettings message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSystemPerfSettings.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.diagnostic_update_rate != null && message.hasOwnProperty("diagnostic_update_rate"))
                writer.uint32(/* id 1, wireType 5 =*/13).float(message.diagnostic_update_rate);
            if (message.is_shark_mode != null && message.hasOwnProperty("is_shark_mode"))
                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.is_shark_mode);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSystemPerfSettings message, length delimited. Does not implicitly {@link CMsgSystemPerfSettings.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSystemPerfSettings
         * @static
         * @param {ICMsgSystemPerfSettings} message CMsgSystemPerfSettings message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSystemPerfSettings.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSystemPerfSettings message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSystemPerfSettings
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSystemPerfSettings} CMsgSystemPerfSettings
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSystemPerfSettings.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSystemPerfSettings();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.diagnostic_update_rate = reader.float();
                    break;
                case 2:
                    message.is_shark_mode = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSystemPerfSettings message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSystemPerfSettings
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSystemPerfSettings} CMsgSystemPerfSettings
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSystemPerfSettings.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSystemPerfSettings message.
         * @function verify
         * @memberof CMsgSystemPerfSettings
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSystemPerfSettings.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.diagnostic_update_rate != null && message.hasOwnProperty("diagnostic_update_rate"))
                if (typeof message.diagnostic_update_rate !== "number")
                    return "diagnostic_update_rate: number expected";
            if (message.is_shark_mode != null && message.hasOwnProperty("is_shark_mode"))
                if (typeof message.is_shark_mode !== "boolean")
                    return "is_shark_mode: boolean expected";
            return null;
        };
    
        /**
         * Creates a CMsgSystemPerfSettings message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSystemPerfSettings
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSystemPerfSettings} CMsgSystemPerfSettings
         */
        CMsgSystemPerfSettings.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSystemPerfSettings)
                return object;
            var message = new $root.CMsgSystemPerfSettings();
            if (object.diagnostic_update_rate != null)
                message.diagnostic_update_rate = Number(object.diagnostic_update_rate);
            if (object.is_shark_mode != null)
                message.is_shark_mode = Boolean(object.is_shark_mode);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSystemPerfSettings message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSystemPerfSettings
         * @static
         * @param {CMsgSystemPerfSettings} message CMsgSystemPerfSettings
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSystemPerfSettings.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.diagnostic_update_rate = 0;
                object.is_shark_mode = false;
            }
            if (message.diagnostic_update_rate != null && message.hasOwnProperty("diagnostic_update_rate"))
                object.diagnostic_update_rate = options.json && !isFinite(message.diagnostic_update_rate) ? String(message.diagnostic_update_rate) : message.diagnostic_update_rate;
            if (message.is_shark_mode != null && message.hasOwnProperty("is_shark_mode"))
                object.is_shark_mode = message.is_shark_mode;
            return object;
        };
    
        /**
         * Converts this CMsgSystemPerfSettings to JSON.
         * @function toJSON
         * @memberof CMsgSystemPerfSettings
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSystemPerfSettings.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgSystemPerfSettings;
    })();

    return $root;
});
